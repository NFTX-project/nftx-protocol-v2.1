{
  "address": "0xB25Ea886FcE4bfDC8750Cb2D4464FE3F7A67bc07",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "xTokensUnstaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numNftsRedeemed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "unstaker",
          "type": "address"
        }
      ],
      "name": "InventoryUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "inventoryStaking",
      "outputs": [
        {
          "internalType": "contract NFTXInventoryStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "slpToken",
          "type": "address"
        }
      ],
      "name": "maxNftsUsingXToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "numNfts",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "shortByTinyAmount",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "rescue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setInventoryStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sushiRouterAddr",
          "type": "address"
        }
      ],
      "name": "setSushiRouterAndWeth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setVaultFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numNfts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingPortionToUnstake",
          "type": "uint256"
        }
      ],
      "name": "unstakeInventory",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultFactory",
      "outputs": [
        {
          "internalType": "contract INFTXVaultFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x87a4dc6a92f83953895580d77f6012e71df5694dbb4bea706c0e0f5da133284a",
  "receipt": {
    "to": null,
    "from": "0xDEA9196Dcdd2173D6E369c2AcC0faCc83fD9346a",
    "contractAddress": "0xB25Ea886FcE4bfDC8750Cb2D4464FE3F7A67bc07",
    "transactionIndex": 1,
    "gasUsed": "7740831",
    "logsBloom": "0x
    "blockHash": "0xb5117fe643d35d152c142120b9bc41710dc0d9a54b368e8027d7c9b73d95f330",
    "transactionHash": "0x87a4dc6a92f83953895580d77f6012e71df5694dbb4bea706c0e0f5da133284a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 52291624,
        "transactionHash": "0x87a4dc6a92f83953895580d77f6012e71df5694dbb4bea706c0e0f5da133284a",
        "address": "0xB25Ea886FcE4bfDC8750Cb2D4464FE3F7A67bc07",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dea9196dcdd2173d6e369c2acc0facc83fd9346a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb5117fe643d35d152c142120b9bc41710dc0d9a54b368e8027d7c9b73d95f330"
      }
    ],
    "blockNumber": 52291624,
    "cumulativeGasUsed": "7740831",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4ed07831cf1b45df322bf066ca733d09",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xTokensUnstaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numNftsRedeemed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unstaker\",\"type\":\"address\"}],\"name\":\"InventoryUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"inventoryStaking\",\"outputs\":[{\"internalType\":\"contract NFTXInventoryStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slpToken\",\"type\":\"address\"}],\"name\":\"maxNftsUsingXToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numNfts\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shortByTinyAmount\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setInventoryStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sushiRouterAddr\",\"type\":\"address\"}],\"name\":\"setSushiRouterAndWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numNfts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingPortionToUnstake\",\"type\":\"uint256\"}],\"name\":\"unstakeInventory\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFactory\",\"outputs\":[{\"internalType\":\"contract INFTXVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstakeInventory(uint256,uint256,uint256)\":{\"params\":{\"remainingPortionToUnstake\":\"Represents the ratio (in 1e18) of the remaining xTokens (left after claiming `numNfts`) balance of user to unstake if remainingPortionToUnstake = 1e18 => unstake entire user's balance if remainingPortionToUnstake = 0 => only unstake required xToken balance to claim `numNfts`, nothing extra\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/solidity/NFTXUnstakingInventoryZap.sol\":\"NFTXUnstakingInventoryZap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/solidity/NFTXInventoryStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./util/PausableUpgradeable.sol\\\";\\nimport \\\"./util/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./util/Create2.sol\\\";\\nimport \\\"./proxy/UpgradeableBeacon.sol\\\";\\nimport \\\"./proxy/Create2BeaconProxy.sol\\\";\\nimport \\\"./token/XTokenUpgradeable.sol\\\";\\nimport \\\"./interface/INFTXInventoryStaking.sol\\\";\\nimport \\\"./interface/INFTXVaultFactory.sol\\\";\\nimport \\\"./interface/ITimelockExcludeList.sol\\\";\\n\\n// Author: 0xKiwi.\\n\\n// Pausing codes for inventory staking are:\\n// 10: Deposit\\n\\ncontract NFTXInventoryStaking is\\n    PausableUpgradeable,\\n    UpgradeableBeacon,\\n    INFTXInventoryStaking\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // Small locktime to prevent flash deposits.\\n    uint256 internal constant DEFAULT_LOCKTIME = 2;\\n    bytes internal constant beaconCode = type(Create2BeaconProxy).creationCode;\\n\\n    INFTXVaultFactory public override nftxVaultFactory;\\n\\n    uint256 public inventoryLockTimeErc20;\\n    ITimelockExcludeList public timelockExcludeList;\\n\\n    event XTokenCreated(uint256 vaultId, address baseToken, address xToken);\\n    event Deposit(\\n        uint256 vaultId,\\n        uint256 baseTokenAmount,\\n        uint256 xTokenAmount,\\n        uint256 timelockUntil,\\n        address sender\\n    );\\n    event Withdraw(\\n        uint256 vaultId,\\n        uint256 baseTokenAmount,\\n        uint256 xTokenAmount,\\n        address sender\\n    );\\n    event FeesReceived(uint256 vaultId, uint256 amount);\\n\\n    function __NFTXInventoryStaking_init(address _nftxVaultFactory)\\n        external\\n        virtual\\n        override\\n        initializer\\n    {\\n        __Ownable_init();\\n        nftxVaultFactory = INFTXVaultFactory(_nftxVaultFactory);\\n        address xTokenImpl = address(new XTokenUpgradeable());\\n        __UpgradeableBeacon__init(xTokenImpl);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            msg.sender == owner() ||\\n                msg.sender == nftxVaultFactory.feeDistributor(),\\n            \\\"LPStaking: Not authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    function setTimelockExcludeList(address addr) external onlyOwner {\\n        timelockExcludeList = ITimelockExcludeList(addr);\\n    }\\n\\n    function setInventoryLockTimeErc20(uint256 time) external onlyOwner {\\n        require(time <= 14 days, \\\"Lock too long\\\");\\n        inventoryLockTimeErc20 = time;\\n    }\\n\\n    function isAddressTimelockExcluded(address addr, uint256 vaultId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        if (address(timelockExcludeList) == address(0)) {\\n            return false;\\n        } else {\\n            return timelockExcludeList.isExcluded(addr, vaultId);\\n        }\\n    }\\n\\n    function deployXTokenForVault(uint256 vaultId) public virtual override {\\n        address baseToken = nftxVaultFactory.vault(vaultId);\\n        address deployedXToken = xTokenAddr(address(baseToken));\\n\\n        if (isContract(deployedXToken)) {\\n            return;\\n        }\\n\\n        address xToken = _deployXToken(baseToken);\\n        emit XTokenCreated(vaultId, baseToken, xToken);\\n    }\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount)\\n        external\\n        virtual\\n        override\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        address baseToken = nftxVaultFactory.vault(vaultId);\\n        address deployedXToken = xTokenAddr(address(baseToken));\\n\\n        // Don't distribute rewards unless there are people to distribute to.\\n        // Also added here if the distribution token is not deployed, just forfeit rewards for now.\\n        if (\\n            !isContract(deployedXToken) ||\\n            XTokenUpgradeable(deployedXToken).totalSupply() == 0\\n        ) {\\n            return false;\\n        }\\n        // We \\\"pull\\\" to the dividend tokens so the fee distributor only needs to approve this contract.\\n        IERC20Upgradeable(baseToken).safeTransferFrom(\\n            msg.sender,\\n            deployedXToken,\\n            amount\\n        );\\n        emit FeesReceived(vaultId, amount);\\n        return true;\\n    }\\n\\n    // Enter staking. Staking, get minted shares and\\n    // locks base tokens and mints xTokens.\\n    function deposit(uint256 vaultId, uint256 _amount)\\n        external\\n        virtual\\n        override\\n    {\\n        onlyOwnerIfPaused(10);\\n\\n        uint256 timelockTime = isAddressTimelockExcluded(msg.sender, vaultId)\\n            ? 0\\n            : inventoryLockTimeErc20;\\n\\n        (\\n            IERC20Upgradeable baseToken,\\n            XTokenUpgradeable xToken,\\n            uint256 xTokensMinted\\n        ) = _timelockMintFor(vaultId, msg.sender, _amount, timelockTime);\\n        // Lock the base token in the xtoken contract\\n        baseToken.safeTransferFrom(msg.sender, address(xToken), _amount);\\n        emit Deposit(vaultId, _amount, xTokensMinted, timelockTime, msg.sender);\\n    }\\n\\n    function timelockMintFor(\\n        uint256 vaultId,\\n        uint256 amount,\\n        address to,\\n        uint256 timelockLength\\n    ) external virtual override returns (uint256) {\\n        onlyOwnerIfPaused(10);\\n        require(nftxVaultFactory.zapContracts(msg.sender), \\\"Not staking zap\\\");\\n        require(\\n            nftxVaultFactory.excludedFromFees(msg.sender),\\n            \\\"Not fee excluded\\\"\\n        );\\n\\n        (, , uint256 xTokensMinted) = _timelockMintFor(\\n            vaultId,\\n            to,\\n            amount,\\n            timelockLength\\n        );\\n        emit Deposit(vaultId, amount, xTokensMinted, timelockLength, to);\\n        return xTokensMinted;\\n    }\\n\\n    // Leave the bar. Claim back your tokens.\\n    // Unlocks the staked + gained tokens and burns xTokens.\\n    function withdraw(uint256 vaultId, uint256 _share)\\n        external\\n        virtual\\n        override\\n    {\\n        IERC20Upgradeable baseToken = IERC20Upgradeable(\\n            nftxVaultFactory.vault(vaultId)\\n        );\\n        XTokenUpgradeable xToken = XTokenUpgradeable(\\n            xTokenAddr(address(baseToken))\\n        );\\n\\n        uint256 baseTokensRedeemed = xToken.burnXTokens(msg.sender, _share);\\n        emit Withdraw(vaultId, baseTokensRedeemed, _share, msg.sender);\\n    }\\n\\n    function xTokenShareValue(uint256 vaultId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        IERC20Upgradeable baseToken = IERC20Upgradeable(\\n            nftxVaultFactory.vault(vaultId)\\n        );\\n        XTokenUpgradeable xToken = XTokenUpgradeable(\\n            xTokenAddr(address(baseToken))\\n        );\\n        require(address(xToken) != address(0), \\\"XToken not deployed\\\");\\n\\n        uint256 multiplier = 10**18;\\n        return\\n            xToken.totalSupply() > 0\\n                ? (multiplier * baseToken.balanceOf(address(xToken))) /\\n                    xToken.totalSupply()\\n                : multiplier;\\n    }\\n\\n    function timelockUntil(uint256 vaultId, address who)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        XTokenUpgradeable xToken = XTokenUpgradeable(vaultXToken(vaultId));\\n        return xToken.timelockUntil(who);\\n    }\\n\\n    function balanceOf(uint256 vaultId, address who)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        XTokenUpgradeable xToken = XTokenUpgradeable(vaultXToken(vaultId));\\n        return xToken.balanceOf(who);\\n    }\\n\\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\\n    function xTokenAddr(address baseToken)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        bytes32 salt = keccak256(abi.encodePacked(baseToken));\\n        address tokenAddr = Create2.computeAddress(\\n            salt,\\n            keccak256(type(Create2BeaconProxy).creationCode)\\n        );\\n        return tokenAddr;\\n    }\\n\\n    function vaultXToken(uint256 vaultId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        address baseToken = nftxVaultFactory.vault(vaultId);\\n        address xToken = xTokenAddr(baseToken);\\n        require(isContract(xToken), \\\"XToken not deployed\\\");\\n        return xToken;\\n    }\\n\\n    function _timelockMintFor(\\n        uint256 vaultId,\\n        address account,\\n        uint256 _amount,\\n        uint256 timelockLength\\n    )\\n        internal\\n        returns (\\n            IERC20Upgradeable,\\n            XTokenUpgradeable,\\n            uint256\\n        )\\n    {\\n        deployXTokenForVault(vaultId);\\n        IERC20Upgradeable baseToken = IERC20Upgradeable(\\n            nftxVaultFactory.vault(vaultId)\\n        );\\n        XTokenUpgradeable xToken = XTokenUpgradeable(\\n            (xTokenAddr(address(baseToken)))\\n        );\\n\\n        uint256 xTokensMinted = xToken.mintXTokens(\\n            account,\\n            _amount,\\n            timelockLength\\n        );\\n        return (baseToken, xToken, xTokensMinted);\\n    }\\n\\n    function _deployXToken(address baseToken) internal returns (address) {\\n        string memory symbol = IERC20Metadata(baseToken).symbol();\\n        symbol = string(abi.encodePacked(\\\"x\\\", symbol));\\n        bytes32 salt = keccak256(abi.encodePacked(baseToken));\\n        address deployedXToken = Create2.deploy(0, salt, beaconCode);\\n        XTokenUpgradeable(deployedXToken).__XToken_init(\\n            baseToken,\\n            symbol,\\n            symbol\\n        );\\n        return deployedXToken;\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa4b980c02f7b036d7a28366c82129fe9626f3174a85d71ce08caeded20ab891e\",\"license\":\"MIT\"},\"contracts/solidity/NFTXUnstakingInventoryZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./util/Ownable.sol\\\";\\nimport \\\"./util/ReentrancyGuard.sol\\\";\\nimport \\\"./util/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./interface/INFTXVaultFactory.sol\\\";\\nimport \\\"./interface/INFTXVault.sol\\\";\\nimport \\\"./interface/IUniswapV2Router01.sol\\\";\\nimport \\\"./token/IWETH.sol\\\";\\nimport \\\"./NFTXInventoryStaking.sol\\\";\\n\\ncontract NFTXUnstakingInventoryZap is Ownable, ReentrancyGuard {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    INFTXVaultFactory public vaultFactory;\\n    NFTXInventoryStaking public inventoryStaking;\\n    IUniswapV2Router01 public sushiRouter;\\n    IWETH public weth;\\n\\n    event InventoryUnstaked(\\n        uint256 vaultId,\\n        uint256 xTokensUnstaked,\\n        uint256 numNftsRedeemed,\\n        address unstaker\\n    );\\n\\n    function setVaultFactory(address addr) public onlyOwner {\\n        vaultFactory = INFTXVaultFactory(addr);\\n    }\\n\\n    function setInventoryStaking(address addr) public onlyOwner {\\n        inventoryStaking = NFTXInventoryStaking(addr);\\n    }\\n\\n    function setSushiRouterAndWeth(address sushiRouterAddr) public onlyOwner {\\n        sushiRouter = IUniswapV2Router01(sushiRouterAddr);\\n        weth = IWETH(sushiRouter.WETH());\\n    }\\n\\n    /**\\n     * @param remainingPortionToUnstake Represents the ratio (in 1e18) of the remaining xTokens (left after claiming `numNfts`) balance of user to unstake\\n     * if remainingPortionToUnstake = 1e18 => unstake entire user's balance\\n     * if remainingPortionToUnstake = 0 => only unstake required xToken balance to claim `numNfts`, nothing extra\\n     */\\n    function unstakeInventory(\\n        uint256 vaultId,\\n        uint256 numNfts,\\n        uint256 remainingPortionToUnstake\\n    ) public payable {\\n        require(remainingPortionToUnstake <= 1e18);\\n        IERC20Upgradeable vToken = IERC20Upgradeable(\\n            vaultFactory.vault(vaultId)\\n        );\\n        IERC20Upgradeable xToken = IERC20Upgradeable(\\n            inventoryStaking.xTokenAddr(address(vToken))\\n        );\\n\\n        uint256 reqVTokens = numNfts * 1e18;\\n\\n        // calculate `xTokensToPull` to pull\\n        uint256 xTokensToPull;\\n        uint256 xTokenUserBal = xToken.balanceOf(msg.sender);\\n        if (remainingPortionToUnstake == 1e18) {\\n            xTokensToPull = xTokenUserBal;\\n        } else {\\n            uint256 shareValue = inventoryStaking.xTokenShareValue(vaultId); // vTokens per xToken in wei\\n            uint256 reqXTokens = (reqVTokens * 1e18) / shareValue;\\n\\n            // Check for rounding error being 1 less that expected amount\\n            if ((reqXTokens * shareValue) / 1e18 < reqVTokens) {\\n                reqXTokens += 1;\\n            }\\n\\n            // If the user doesn't have enough xTokens then we just want to pull the\\n            // balance of the user.\\n            if (xTokenUserBal < reqXTokens) {\\n                xTokensToPull = xTokenUserBal;\\n            }\\n            // If we have zero additional portion to unstake, then we only need to pull the required tokens\\n            else if (remainingPortionToUnstake == 0) {\\n                xTokensToPull = reqXTokens;\\n            }\\n            // Otherwise, calculate remaining xTokens to unstake using `remainingPortionToUnstake` ratio\\n            else {\\n                uint256 remainingXTokens = xToken.balanceOf(msg.sender) -\\n                    reqXTokens;\\n                xTokensToPull =\\n                    reqXTokens +\\n                    ((remainingXTokens * remainingPortionToUnstake) / 1e18);\\n            }\\n        }\\n\\n        // pull xTokens then unstake for vTokens\\n        xToken.safeTransferFrom(msg.sender, address(this), xTokensToPull);\\n\\n        // If our inventory staking contract has an allowance less that the amount we need\\n        // to pull, then we need to approve additional tokens.\\n        if (\\n            xToken.allowance(address(this), address(inventoryStaking)) <\\n            xTokensToPull\\n        ) {\\n            xToken.approve(address(inventoryStaking), type(uint256).max);\\n        }\\n\\n        uint256 initialVTokenBal = vToken.balanceOf(address(this));\\n        // Burn our xTokens to pull in our vTokens\\n        inventoryStaking.withdraw(vaultId, xTokensToPull);\\n        uint256 vTokensReceived = vToken.balanceOf(address(this)) -\\n            initialVTokenBal;\\n\\n        uint256 missingVToken;\\n\\n        // If the amount of vTokens generated from our `inventoryStaking.withdraw` call\\n        // is not sufficient to fulfill the claim on the specified number of NFTs, then\\n        // we determine if we can claim some dust from the contract.\\n        if (vTokensReceived < reqVTokens) {\\n            // We can calculate the amount of vToken required by the contract to get\\n            // it from the withdrawal amount to the amount required based on the number\\n            // of NFTs.\\n            missingVToken = reqVTokens - vTokensReceived;\\n\\n            /**\\n             * reqVTokens = 1e18\\n             * initialVTokenBal = 2\\n             * vToken.balanceOf(address(this)) = 1000000000000000001\\n             *\\n             * 1000000000000000000 - (1000000000000000001 - 2) = 1\\n             */\\n        }\\n\\n        // This dust value has to be less that 100 to ensure we aren't just being rinsed\\n        // of dust.\\n        require(missingVToken < 100, \\\"not enough vTokens\\\");\\n\\n        uint256 dustUsed;\\n        if (missingVToken > initialVTokenBal) {\\n            // If user has sufficient vTokens to account for missingVToken\\n            // then get it from them to this contract\\n            if (\\n                vToken.balanceOf(msg.sender) >= missingVToken &&\\n                vToken.allowance(msg.sender, address(this)) >= missingVToken\\n            ) {\\n                vToken.safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    missingVToken\\n                );\\n            } else {\\n                // else we swap ETH from this contract to get `missingVToken`\\n                address[] memory path = new address[](2);\\n                path[0] = address(weth);\\n                path[1] = address(vToken);\\n                sushiRouter.swapETHForExactTokens{value: 1_000_000_000}(\\n                    missingVToken,\\n                    path,\\n                    address(this),\\n                    block.timestamp\\n                );\\n            }\\n        } else {\\n            dustUsed = missingVToken;\\n        }\\n\\n        // reedem NFTs with vTokens, if requested\\n        if (numNfts > 0) {\\n            INFTXVault(address(vToken)).redeemTo(\\n                numNfts,\\n                new uint256[](0),\\n                msg.sender\\n            );\\n        }\\n\\n        /**\\n         * How this fixes underflow error:\\n         * vToken.balanceOf(address(this)) = 1\\n         * initialVTokenBal = 2\\n         * dustUsed = missingVToken = 1\\n         * vTokenRemainder = 1 - (2 - 1) = 0\\n         */\\n        uint256 vTokenRemainder = vToken.balanceOf(address(this)) -\\n            (initialVTokenBal - dustUsed);\\n\\n        // if vToken remainder more than dust then return to sender.\\n        // happens when `remainingPortionToUnstake` is non-zero\\n        if (vTokenRemainder > 100) {\\n            vToken.safeTransfer(msg.sender, vTokenRemainder);\\n        }\\n\\n        emit InventoryUnstaked(vaultId, xTokensToPull, numNfts, msg.sender);\\n    }\\n\\n    function maxNftsUsingXToken(\\n        uint256 vaultId,\\n        address staker,\\n        address slpToken\\n    ) public view returns (uint256 numNfts, bool shortByTinyAmount) {\\n        if (inventoryStaking.timelockUntil(vaultId, staker) > block.timestamp) {\\n            return (0, false);\\n        }\\n        address vTokenAddr = vaultFactory.vault(vaultId);\\n        address xTokenAddr = inventoryStaking.xTokenAddr(vTokenAddr);\\n        IERC20Upgradeable vToken = IERC20Upgradeable(vTokenAddr);\\n        IERC20Upgradeable xToken = IERC20Upgradeable(xTokenAddr);\\n        IERC20Upgradeable lpPair = IERC20Upgradeable(slpToken);\\n\\n        uint256 xTokenBal = xToken.balanceOf(staker);\\n        uint256 shareValue = inventoryStaking.xTokenShareValue(vaultId);\\n        uint256 vTokensA = (xTokenBal * shareValue) / 1e18;\\n        uint256 vTokensB = ((xTokenBal * shareValue) / 1e18) + 99;\\n\\n        uint256 vTokensIntA = vTokensA / 1e18;\\n        uint256 vTokensIntB = vTokensB / 1e18;\\n\\n        if (vTokensIntB > vTokensIntA) {\\n            if (\\n                vToken.balanceOf(msg.sender) >= 99 &&\\n                vToken.allowance(msg.sender, address(this)) >= 99\\n            ) {\\n                return (vTokensIntB, true);\\n            } else if (lpPair.totalSupply() >= 10000) {\\n                return (vTokensIntB, true);\\n            } else if (vToken.balanceOf(address(this)) >= 99) {\\n                return (vTokensIntB, true);\\n            } else {\\n                return (vTokensIntA, false);\\n            }\\n        } else {\\n            return (vTokensIntA, false);\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    function rescue(address token) external onlyOwner {\\n        if (token == address(0)) {\\n            (bool success, ) = payable(msg.sender).call{\\n                value: address(this).balance\\n            }(\\\"\\\");\\n            require(\\n                success,\\n                \\\"Address: unable to send value, recipient may have reverted\\\"\\n            );\\n        } else {\\n            IERC20Upgradeable(token).safeTransfer(\\n                msg.sender,\\n                IERC20Upgradeable(token).balanceOf(address(this))\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ae5561353e648f645e2a5cd830689e9323f67b6a8547b3239ba11a4374739da\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXEligibility {\\n    // Read functions.\\n    function name() external pure returns (string memory);\\n\\n    function finalized() external view returns (bool);\\n\\n    function targetAsset() external pure returns (address);\\n\\n    function checkAllEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool[] memory);\\n\\n    function checkAllIneligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\\n\\n    // Write functions.\\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\\n\\n    function beforeMintHook(uint256[] calldata tokenIds) external;\\n\\n    function afterMintHook(uint256[] calldata tokenIds) external;\\n\\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\\n\\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xd932fdc4ea04b9d685f094b4405e64da8f3ab46cd701b22223f2a28d42973c70\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXInventoryStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./INFTXVaultFactory.sol\\\";\\n\\ninterface INFTXInventoryStaking {\\n    function nftxVaultFactory() external view returns (INFTXVaultFactory);\\n\\n    function vaultXToken(uint256 vaultId) external view returns (address);\\n\\n    function xTokenAddr(address baseToken) external view returns (address);\\n\\n    function xTokenShareValue(uint256 vaultId) external view returns (uint256);\\n\\n    function __NFTXInventoryStaking_init(address nftxFactory) external;\\n\\n    function deployXTokenForVault(uint256 vaultId) external;\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function timelockMintFor(\\n        uint256 vaultId,\\n        uint256 amount,\\n        address to,\\n        uint256 timelockLength\\n    ) external returns (uint256);\\n\\n    function deposit(uint256 vaultId, uint256 _amount) external;\\n\\n    function withdraw(uint256 vaultId, uint256 _share) external;\\n}\\n\",\"keccak256\":\"0x80540f3c1ec01c54afc55dd9343e9973e8ea4f11ac12e2129d3cb088f8380649\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\nimport \\\"./INFTXVaultFactory.sol\\\";\\nimport \\\"./INFTXEligibility.sol\\\";\\n\\ninterface INFTXVault is IERC20Upgradeable {\\n    function manager() external view returns (address);\\n\\n    function assetAddress() external view returns (address);\\n\\n    function vaultFactory() external view returns (INFTXVaultFactory);\\n\\n    function eligibilityStorage() external view returns (INFTXEligibility);\\n\\n    function is1155() external view returns (bool);\\n\\n    function allowAllItems() external view returns (bool);\\n\\n    function enableMint() external view returns (bool);\\n\\n    function enableRandomRedeem() external view returns (bool);\\n\\n    function enableTargetRedeem() external view returns (bool);\\n\\n    function enableRandomSwap() external view returns (bool);\\n\\n    function enableTargetSwap() external view returns (bool);\\n\\n    function vaultId() external view returns (uint256);\\n\\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\\n\\n    function allHoldings() external view returns (uint256[] memory);\\n\\n    function totalHoldings() external view returns (uint256);\\n\\n    function mintFee() external view returns (uint256);\\n\\n    function randomRedeemFee() external view returns (uint256);\\n\\n    function targetRedeemFee() external view returns (uint256);\\n\\n    function randomSwapFee() external view returns (uint256);\\n\\n    function targetSwapFee() external view returns (uint256);\\n\\n    function vaultFees()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    event VaultInit(\\n        uint256 indexed vaultId,\\n        address assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    );\\n\\n    event ManagerSet(address manager);\\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\\n    // event CustomEligibilityDeployed(address eligibilityAddr);\\n\\n    event EnableMintUpdated(bool enabled);\\n    event EnableRandomRedeemUpdated(bool enabled);\\n    event EnableTargetRedeemUpdated(bool enabled);\\n    event EnableRandomSwapUpdated(bool enabled);\\n    event EnableTargetSwapUpdated(bool enabled);\\n\\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\\n    event Swapped(\\n        uint256[] nftIds,\\n        uint256[] amounts,\\n        uint256[] specificIds,\\n        uint256[] redeemedIds,\\n        address to\\n    );\\n\\n    function __NFTXVault_init(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _assetAddress,\\n        bool _is1155,\\n        bool _allowAllItems\\n    ) external;\\n\\n    function finalizeVault() external;\\n\\n    function setVaultMetadata(string memory name_, string memory symbol_)\\n        external;\\n\\n    function setVaultFeatures(\\n        bool _enableMint,\\n        bool _enableRandomRedeem,\\n        bool _enableTargetRedeem,\\n        bool _enableRandomSwap,\\n        bool _enableTargetSwap\\n    ) external;\\n\\n    function setFees(\\n        uint256 _mintFee,\\n        uint256 _randomRedeemFee,\\n        uint256 _targetRedeemFee,\\n        uint256 _randomSwapFee,\\n        uint256 _targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees() external;\\n\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\n    // a similar interface.\\n    function deployEligibilityStorage(\\n        uint256 moduleIndex,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    // The manager has control over options like fees and features\\n    function setManager(address _manager) external;\\n\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\n    ) external returns (uint256);\\n\\n    function mintTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        address to\\n    ) external returns (uint256);\\n\\n    function redeem(uint256 amount, uint256[] calldata specificIds)\\n        external\\n        returns (uint256[] calldata);\\n\\n    function redeemTo(\\n        uint256 amount,\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function swap(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds\\n    ) external returns (uint256[] calldata);\\n\\n    function swapTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function allValidNFTs(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x2d3a6170188b0e18d6744b9ea5414e8f01946302b390b032bed94546ce3f5f41\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/IBeacon.sol\\\";\\n\\ninterface INFTXVaultFactory is IBeacon {\\n    // Read functions.\\n    function numVaults() external view returns (uint256);\\n\\n    function zapContract() external view returns (address);\\n\\n    function zapContracts(address addr) external view returns (bool);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function eligibilityManager() external view returns (address);\\n\\n    function vault(uint256 vaultId) external view returns (address);\\n\\n    function allVaults() external view returns (address[] memory);\\n\\n    function vaultsForAsset(address asset)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function isLocked(uint256 id) external view returns (bool);\\n\\n    function excludedFromFees(address addr) external view returns (bool);\\n\\n    function factoryMintFee() external view returns (uint64);\\n\\n    function factoryRandomRedeemFee() external view returns (uint64);\\n\\n    function factoryTargetRedeemFee() external view returns (uint64);\\n\\n    function factoryRandomSwapFee() external view returns (uint64);\\n\\n    function factoryTargetSwapFee() external view returns (uint64);\\n\\n    function vaultFees(uint256 vaultId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    event NewFeeDistributor(address oldDistributor, address newDistributor);\\n    event NewZapContract(address oldZap, address newZap);\\n    event UpdatedZapContract(address zap, bool excluded);\\n    event FeeExclusion(address feeExcluded, bool excluded);\\n    event NewEligibilityManager(address oldEligManager, address newEligManager);\\n    event NewVault(\\n        uint256 indexed vaultId,\\n        address vaultAddress,\\n        address assetAddress\\n    );\\n    event UpdateVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n    event DisableVaultFees(uint256 vaultId);\\n    event UpdateFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n\\n    // Write functions.\\n    function __NFTXVaultFactory_init(\\n        address _vaultImpl,\\n        address _feeDistributor\\n    ) external;\\n\\n    function createVault(\\n        string calldata name,\\n        string calldata symbol,\\n        address _assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    ) external returns (uint256);\\n\\n    function setFeeDistributor(address _feeDistributor) external;\\n\\n    function setEligibilityManager(address _eligibilityManager) external;\\n\\n    function setZapContract(address _zapContract, bool _excluded) external;\\n\\n    function setFeeExclusion(address _excludedAddr, bool excluded) external;\\n\\n    function setFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function setVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees(uint256 vaultId) external;\\n}\\n\",\"keccak256\":\"0xb6d64ca7f387cb11b1a345add3556c21d2b3c9fa9b8d8645a3312bcbb33ce9bb\",\"license\":\"MIT\"},\"contracts/solidity/interface/ITimelockExcludeList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITimelockExcludeList {\\n    function isExcluded(address addr, uint256 vaultId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x2d3930257422b12987fe227b9ed08a8485768eb2756cff136882c53989852401\",\"license\":\"MIT\"},\"contracts/solidity/interface/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x9d9507bd23206f8914e46b21966e1a06659a2b98741d91cf200e000ffc6b0f9c\",\"license\":\"MIT\"},\"contracts/solidity/proxy/Create2BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../util/Address.sol\\\";\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"./IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n * Slightly modified to allow using beacon proxies with Create2.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract Create2BeaconProxy is Proxy {\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 private constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor() payable {\\n        assert(\\n            _BEACON_SLOT ==\\n                bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1)\\n        );\\n        _setBeacon(msg.sender, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address beacon) {\\n        bytes32 slot = _BEACON_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            beacon := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return IBeacon(_beacon()).childImplementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        require(\\n            Address.isContract(beacon),\\n            \\\"BeaconProxy: beacon is not a contract\\\"\\n        );\\n        require(\\n            Address.isContract(IBeacon(beacon).childImplementation()),\\n            \\\"BeaconProxy: beacon implementation is not a contract\\\"\\n        );\\n        bytes32 slot = _BEACON_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, beacon)\\n        }\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(\\n                _implementation(),\\n                data,\\n                \\\"BeaconProxy: function call failed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc87e2e83121808660273f14984619582d69e51edbdb2cea1bbf5a00d5f57713f\",\"license\":\"MIT\"},\"contracts/solidity/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function childImplementation() external view returns (address);\\n\\n    function upgradeChildTo(address newImplementation) external;\\n}\\n\",\"keccak256\":\"0xd9b361e1d9b9a4bde9801abb5692e9fd7018cb52505d3a47dc7b5dd968bcad28\",\"license\":\"MIT\"},\"contracts/solidity/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            _initializing || !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04ad3c77a6a5006b66f1642cc3353b8009215d734eb80f069ed42a6c09460391\",\"license\":\"MIT\"},\"contracts/solidity/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x32b48b65e8bceba29c50212376de0cd9c69e61617557ecb783d3a79a175db58c\",\"license\":\"MIT\"},\"contracts/solidity/proxy/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../util/Address.sol\\\";\\nimport \\\"../util/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, OwnableUpgradeable {\\n    address private _childImplementation;\\n\\n    /**\\n     * @dev Emitted when the child implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed childImplementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    function __UpgradeableBeacon__init(address childImplementation_)\\n        public\\n        initializer\\n    {\\n        _setChildImplementation(childImplementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current child implementation address.\\n     */\\n    function childImplementation()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return _childImplementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newChildImplementation` must be a contract.\\n     */\\n    function upgradeChildTo(address newChildImplementation)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        _setChildImplementation(newChildImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newChildImplementation` must be a contract.\\n     */\\n    function _setChildImplementation(address newChildImplementation) private {\\n        require(\\n            Address.isContract(newChildImplementation),\\n            \\\"UpgradeableBeacon: child implementation is not a contract\\\"\\n        );\\n        _childImplementation = newChildImplementation;\\n        emit Upgraded(newChildImplementation);\\n    }\\n}\\n\",\"keccak256\":\"0xfe03f6e22a9ecf466fd557c2f44514254629f0e1e786522f5bda656574f38c5c\",\"license\":\"MIT\"},\"contracts/solidity/testing/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/solidity/token/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\nimport \\\"../util/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    IERC20Upgradeable,\\n    IERC20Metadata\\n{\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_)\\n        internal\\n        initializer\\n    {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_)\\n        internal\\n        initializer\\n    {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function _setMetadata(string memory name_, string memory symbol_) internal {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xbf251e6b6effb5717664c474e2adda144585a5d45da12f7c24c3df05797de67f\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1e18474180ce77dc747bb185501fd4d5395cb6096274d3d8f4977d9ed11619c9\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x57ee5f4c65fa0d2e023e97cb265784084412c700117cac90cfe29bf4bab3c7fc\",\"license\":\"MIT\"},\"contracts/solidity/token/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xbf4452a5fff4d809835761fce5cb8199a2338f203262a9b1323a0941ab1cb012\",\"license\":\"MIT\"},\"contracts/solidity/token/XTokenUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../util/OwnableUpgradeable.sol\\\";\\nimport \\\"../util/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../token/ERC20Upgradeable.sol\\\";\\n\\n// XTokens let uou come in with some vault tokens, and leave with more! The longer you stay, the more vault tokens you get.\\n//\\n// This contract handles swapping to and from xSushi, SushiSwap's staking token.\\ncontract XTokenUpgradeable is OwnableUpgradeable, ERC20Upgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint256 internal constant MAX_TIMELOCK = 2592000;\\n    IERC20Upgradeable public baseToken;\\n\\n    mapping(address => uint256) internal timelock;\\n\\n    event Timelocked(address user, uint256 until);\\n\\n    function __XToken_init(\\n        address _baseToken,\\n        string memory name,\\n        string memory symbol\\n    ) public initializer {\\n        __Ownable_init();\\n        // string memory _name = INFTXInventoryStaking(msg.sender).nftxVaultFactory().vault();\\n        __ERC20_init(name, symbol);\\n        baseToken = IERC20Upgradeable(_baseToken);\\n    }\\n\\n    // Needs to be called BEFORE new base tokens are deposited.\\n    function mintXTokens(\\n        address account,\\n        uint256 _amount,\\n        uint256 timelockLength\\n    ) external onlyOwner returns (uint256) {\\n        // Gets the amount of Base Token locked in the contract\\n        uint256 totalBaseToken = baseToken.balanceOf(address(this));\\n        // Gets the amount of xTokens in existence\\n        uint256 totalShares = totalSupply();\\n        // If no xTokens exist, mint it 1:1 to the amount put in\\n        if (totalShares == 0 || totalBaseToken == 0) {\\n            _timelockMint(account, _amount, timelockLength);\\n            return _amount;\\n        }\\n        // Calculate and mint the amount of xTokens the base tokens are worth. The ratio will change overtime, as xTokens are burned/minted and base tokens deposited + gained from fees / withdrawn.\\n        else {\\n            uint256 what = (_amount * totalShares) / totalBaseToken;\\n            _timelockMint(account, what, timelockLength);\\n            return what;\\n        }\\n    }\\n\\n    function burnXTokens(address who, uint256 _share)\\n        external\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        // Gets the amount of xToken in existence\\n        uint256 totalShares = totalSupply();\\n        // Calculates the amount of base tokens the xToken is worth\\n        uint256 what = (_share * baseToken.balanceOf(address(this))) /\\n            totalShares;\\n        _burn(who, _share);\\n        baseToken.safeTransfer(who, what);\\n        return what;\\n    }\\n\\n    function timelockAccount(address account, uint256 timelockLength)\\n        public\\n        virtual\\n        onlyOwner\\n    {\\n        require(timelockLength < MAX_TIMELOCK, \\\"Too long lock\\\");\\n        uint256 timelockFinish = block.timestamp + timelockLength;\\n        if (timelockFinish > timelock[account]) {\\n            timelock[account] = timelockFinish;\\n            emit Timelocked(account, timelockFinish);\\n        }\\n    }\\n\\n    function _burn(address who, uint256 amount) internal override {\\n        require(block.timestamp > timelock[who], \\\"User locked\\\");\\n        super._burn(who, amount);\\n    }\\n\\n    function timelockUntil(address account) public view returns (uint256) {\\n        return timelock[account];\\n    }\\n\\n    function _timelockMint(\\n        address account,\\n        uint256 amount,\\n        uint256 timelockLength\\n    ) internal virtual {\\n        timelockAccount(account, timelockLength);\\n        _mint(account, amount);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal override {\\n        require(block.timestamp > timelock[from], \\\"User locked\\\");\\n        super._transfer(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0x70c6a4b592a7e1416a740ddfb2ae1a04ee369fd8c3a29cee1fc6a3d246fb0a67\",\"license\":\"MIT\"},\"contracts/solidity/util/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd38318b34491b4e11bab877e4dbafbf51111b69b09307b01ca952cf24e4229d0\",\"license\":\"MIT\"},\"contracts/solidity/util/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {}\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8d6fce5d0897740611b909a023e797e08d324503881d9839969124076fe9eb44\",\"license\":\"MIT\"},\"contracts/solidity/util/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Create2: insufficient balance\\\"\\n        );\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x89d6d519917c1fafc18dcb9325e19c3f5e3eaa5d566ce0fd9af0bb428dcf15fe\",\"license\":\"MIT\"},\"contracts/solidity/util/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../testing/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xa0dc63480490e75aa2677bc8dc5dd056b4e8a4507254ed442e9c49140c1950db\",\"license\":\"MIT\"},\"contracts/solidity/util/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x76303f728817d84e7de3b7bb8839a3b30f5e078e223c7dbbbcc45da3d4dc905c\",\"license\":\"MIT\"},\"contracts/solidity/util/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\n\\ncontract PausableUpgradeable is OwnableUpgradeable {\\n    function __Pausable_init() internal initializer {\\n        __Ownable_init();\\n    }\\n\\n    event SetPaused(uint256 lockId, bool paused);\\n    event SetIsGuardian(address addr, bool isGuardian);\\n\\n    mapping(address => bool) public isGuardian;\\n    mapping(uint256 => bool) public isPaused;\\n\\n    // 0 : createVault\\n    // 1 : mint\\n    // 2 : redeem\\n    // 3 : swap\\n    // 4 : flashloan\\n\\n    function onlyOwnerIfPaused(uint256 lockId) public view virtual {\\n        require(!isPaused[lockId] || msg.sender == owner(), \\\"Paused\\\");\\n    }\\n\\n    function unpause(uint256 lockId) public virtual onlyOwner {\\n        isPaused[lockId] = false;\\n        emit SetPaused(lockId, false);\\n    }\\n\\n    function pause(uint256 lockId) public virtual {\\n        require(isGuardian[msg.sender], \\\"Can't pause\\\");\\n        isPaused[lockId] = true;\\n        emit SetPaused(lockId, true);\\n    }\\n\\n    function setIsGuardian(address addr, bool _isGuardian)\\n        public\\n        virtual\\n        onlyOwner\\n    {\\n        isGuardian[addr] = _isGuardian;\\n        emit SetIsGuardian(addr, _isGuardian);\\n    }\\n}\\n\",\"keccak256\":\"0xd540474b3adf43fe5c4a47b11b89a452c1f16f36b05e3f4ca626b71a1e33b689\",\"license\":\"MIT\"},\"contracts/solidity/util/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x2c09a41d3d53e0fdd19581192917c2eb40d687608af6e59c99132199af4add38\",\"license\":\"MIT\"},\"contracts/solidity/util/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data)\\n        private\\n    {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x795b61b6dcbaad0d7c4c64c36c4a95a9be5e8786a31dae3200f80f11037b744e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060018055611ff0806100656000396000f3fe6080604052600436106100d65760003560e01c806378caec371161007f578063c0c65a4e11610059578063c0c65a4e14610229578063d8a06f7314610249578063f2fde38b14610269578063fa8afbd91461028957600080fd5b806378caec37146101cb578063839006f2146101eb5780638da5cb5b1461020b57600080fd5b80636d13582c116100b05780636d13582c14610176578063715018a61461019657806374a1b0b0146101ab57600080fd5b80630eb188ae146100e25780633ea7fbdb1461011c5780633fc8cef31461013e57600080fd5b366100dd57005b600080fd5b3480156100ee57600080fd5b506101026100fd366004611d5c565b61029c565b604080519283529015156020830152015b60405180910390f35b34801561012857600080fd5b5061013c610137366004611c2c565b61083f565b005b34801561014a57600080fd5b5060055461015e906001600160a01b031681565b6040516001600160a01b039091168152602001610113565b34801561018257600080fd5b5060045461015e906001600160a01b031681565b3480156101a257600080fd5b5061013c6108c0565b3480156101b757600080fd5b5060035461015e906001600160a01b031681565b3480156101d757600080fd5b5061013c6101e6366004611c2c565b610964565b3480156101f757600080fd5b5061013c610206366004611c2c565b610a83565b34801561021757600080fd5b506000546001600160a01b031661015e565b34801561023557600080fd5b5061013c610244366004611c2c565b610c3e565b34801561025557600080fd5b5060025461015e906001600160a01b031681565b34801561027557600080fd5b5061013c610284366004611c2c565b610cba565b61013c610297366004611d9d565b610deb565b6003546040517fc23c6da0000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b038481166024830152600092839242929091169063c23c6da09060440160206040518083038186803b15801561030857600080fd5b505afa15801561031c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103409190611d44565b111561035157506000905080610837565b6002546040516340d1b7db60e11b8152600481018790526000916001600160a01b0316906381a36fb69060240160206040518083038186803b15801561039657600080fd5b505afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190611c48565b60035460405163cda13d6760e01b81526001600160a01b0380841660048301529293506000929091169063cda13d679060240160206040518083038186803b15801561041957600080fd5b505afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104519190611c48565b6040516370a0823160e01b81526001600160a01b038881166004830152919250839183918891600091908416906370a082319060240160206040518083038186803b15801561049f57600080fd5b505afa1580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d79190611d44565b6003546040516321b1fe6960e11b8152600481018e90529192506000916001600160a01b0390911690634363fcd29060240160206040518083038186803b15801561052157600080fd5b505afa158015610535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105599190611d44565b90506000670de0b6b3a76400006105708385611f17565b61057a9190611ef7565b90506000670de0b6b3a76400006105918486611f17565b61059b9190611ef7565b6105a6906063611edf565b905060006105bc670de0b6b3a764000084611ef7565b905060006105d2670de0b6b3a764000084611ef7565b905081811115610821576040516370a0823160e01b81523360048201526063906001600160a01b038b16906370a082319060240160206040518083038186803b15801561061e57600080fd5b505afa158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190611d44565b101580156106e25750604051636eb1769f60e11b81523360048201523060248201526063906001600160a01b038b169063dd62ed3e9060440160206040518083038186803b1580156106a757600080fd5b505afa1580156106bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106df9190611d44565b10155b156106fd579b5060019a506108379950505050505050505050565b612710876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190611d44565b1061078c579b5060019a506108379950505050505050505050565b6040516370a0823160e01b81523060048201526063906001600160a01b038b16906370a082319060240160206040518083038186803b1580156107ce57600080fd5b505afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108069190611d44565b10610821579b5060019a506108379950505050505050505050565b509a506000995061083798505050505050505050565b935093915050565b6000546001600160a01b0316331461089e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461091a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610895565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146109be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610895565b600480546001600160a01b0319166001600160a01b0383169081178255604080517fad5c46480000000000000000000000000000000000000000000000000000000081529051919263ad5c4648928282019260209290829003018186803b158015610a2857600080fd5b505afa158015610a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a609190611c48565b600580546001600160a01b0319166001600160a01b039290921691909117905550565b6000546001600160a01b03163314610add5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610895565b6001600160a01b038116610bad57604051600090339047908381818185875af1925050503d8060008114610b2d576040519150601f19603f3d011682016040523d82523d6000602084013e610b32565b606091505b5050905080610ba95760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610895565b5050565b6040516370a0823160e01b8152306004820152610c3b9033906001600160a01b038416906370a082319060240160206040518083038186803b158015610bf257600080fd5b505afa158015610c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2a9190611d44565b6001600160a01b03841691906118b1565b50565b6000546001600160a01b03163314610c985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610895565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610d145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610895565b6001600160a01b038116610d905760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610895565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b670de0b6b3a7640000811115610e0057600080fd5b6002546040516340d1b7db60e11b8152600481018590526000916001600160a01b0316906381a36fb69060240160206040518083038186803b158015610e4557600080fd5b505afa158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d9190611c48565b60035460405163cda13d6760e01b81526001600160a01b0380841660048301529293506000929091169063cda13d679060240160206040518083038186803b158015610ec857600080fd5b505afa158015610edc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f009190611c48565b90506000610f1685670de0b6b3a7640000611f17565b6040516370a0823160e01b815233600482015290915060009081906001600160a01b038516906370a082319060240160206040518083038186803b158015610f5d57600080fd5b505afa158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f959190611d44565b905085670de0b6b3a76400001415610faf57809150611154565b6003546040516321b1fe6960e11b8152600481018a90526000916001600160a01b031690634363fcd29060240160206040518083038186803b158015610ff457600080fd5b505afa158015611008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102c9190611d44565b905060008161104386670de0b6b3a7640000611f17565b61104d9190611ef7565b905084670de0b6b3a76400006110638484611f17565b61106d9190611ef7565b10156110815761107e600182611edf565b90505b8083101561109157829350611151565b8761109e57809350611151565b6040516370a0823160e01b815233600482015260009082906001600160a01b038916906370a082319060240160206040518083038186803b1580156110e257600080fd5b505afa1580156110f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111a9190611d44565b6111249190611f36565b9050670de0b6b3a76400006111398a83611f17565b6111439190611ef7565b61114d9083611edf565b9450505b50505b6111696001600160a01b03851633308561195f565b600354604051636eb1769f60e11b81523060048201526001600160a01b039182166024820152839186169063dd62ed3e9060440160206040518083038186803b1580156111b557600080fd5b505afa1580156111c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ed9190611d44565b1015611295576003546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260001960248201529085169063095ea7b390604401602060405180830381600087803b15801561125b57600080fd5b505af115801561126f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112939190611d24565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a082319060240160206040518083038186803b1580156112d757600080fd5b505afa1580156112eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130f9190611d44565b6003546040517f441a3e70000000000000000000000000000000000000000000000000000000008152600481018c9052602481018690529192506001600160a01b03169063441a3e7090604401600060405180830381600087803b15801561137657600080fd5b505af115801561138a573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508391506001600160a01b038916906370a082319060240160206040518083038186803b1580156113d257600080fd5b505afa1580156113e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140a9190611d44565b6114149190611f36565b905060008582101561142d5761142a8287611f36565b90505b6064811061147d5760405162461bcd60e51b815260206004820152601260248201527f6e6f7420656e6f7567682076546f6b656e7300000000000000000000000000006044820152606401610895565b6000838211156116f9576040516370a0823160e01b815233600482015282906001600160a01b038b16906370a082319060240160206040518083038186803b1580156114c857600080fd5b505afa1580156114dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115009190611d44565b1015801561158b5750604051636eb1769f60e11b815233600482015230602482015282906001600160a01b038b169063dd62ed3e9060440160206040518083038186803b15801561155057600080fd5b505afa158015611564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115889190611d44565b10155b156115aa576115a56001600160a01b038a1633308561195f565b6116fc565b604080516002808252606082018352600092602083019080368337505060055482519293506001600160a01b0316918391506000906115f957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050898160018151811061163b57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152600480546040517ffb3bdb4100000000000000000000000000000000000000000000000000000000815292169163fb3bdb4191633b9aca009161169c91889187913091429101611e17565b6000604051808303818588803b1580156116b557600080fd5b505af11580156116c9573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526116f29190810190611c64565b50506116fc565b50805b8a156117af57604080516000815260208101918290527f9d54def6000000000000000000000000000000000000000000000000000000009091526001600160a01b038a1690639d54def690611757908e903360248201611e80565b600060405180830381600087803b15801561177157600080fd5b505af1158015611785573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117ad9190810190611c64565b505b60006117bb8286611f36565b6040516370a0823160e01b81523060048201526001600160a01b038c16906370a082319060240160206040518083038186803b1580156117fa57600080fd5b505afa15801561180e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118329190611d44565b61183c9190611f36565b9050606481111561185b5761185b6001600160a01b038b1633836118b1565b604080518e8152602081018990529081018d90523360608201527f2d80d681127a38ca715ea60cfd400ccbe674c857d140e3437d0da5dde6152fa39060800160405180910390a150505050505050505050505050565b6040516001600160a01b03831660248201526044810182905261195a9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526119b6565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526119b09085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016118f6565b50505050565b6000611a0b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a9b9092919063ffffffff16565b80519091501561195a5780806020019051810190611a299190611d24565b61195a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610895565b6060611aaa8484600085611ab4565b90505b9392505050565b606082471015611b2c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610895565b843b611b7a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610895565b600080866001600160a01b03168587604051611b969190611dc8565b60006040518083038185875af1925050503d8060008114611bd3576040519150601f19603f3d011682016040523d82523d6000602084013e611bd8565b606091505b5091509150611be8828286611bf3565b979650505050505050565b60608315611c02575081611aad565b825115611c125782518084602001fd5b8160405162461bcd60e51b81526004016108959190611de4565b600060208284031215611c3d578081fd5b8135611aad81611fa5565b600060208284031215611c59578081fd5b8151611aad81611fa5565b60006020808385031215611c76578182fd5b825167ffffffffffffffff80821115611c8d578384fd5b818501915085601f830112611ca0578384fd5b815181811115611cb257611cb2611f8f565b8060051b604051601f19603f83011681018181108582111715611cd757611cd7611f8f565b604052828152858101935084860182860187018a1015611cf5578788fd5b8795505b83861015611d17578051855260019590950194938601938601611cf9565b5098975050505050505050565b600060208284031215611d35578081fd5b81518015158114611aad578182fd5b600060208284031215611d55578081fd5b5051919050565b600080600060608486031215611d70578182fd5b833592506020840135611d8281611fa5565b91506040840135611d9281611fa5565b809150509250925092565b600080600060608486031215611db1578283fd5b505081359360208301359350604090920135919050565b60008251611dda818460208701611f4d565b9190910192915050565b6020815260008251806020840152611e03816040850160208701611f4d565b601f01601f19169190910160400192915050565b600060808201868352602060808185015281875180845260a0860191508289019350845b81811015611e605784516001600160a01b031683529383019391830191600101611e3b565b50506001600160a01b039690961660408501525050506060015292915050565b60006060820185835260206060818501528186518084526080860191508288019350845b81811015611ec057845183529383019391830191600101611ea4565b50508093505050506001600160a01b0383166040830152949350505050565b60008219821115611ef257611ef2611f79565b500190565b600082611f1257634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611f3157611f31611f79565b500290565b600082821015611f4857611f48611f79565b500390565b60005b83811015611f68578181015183820152602001611f50565b838111156119b05750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c3b57600080fdfea26469706673582212209c26d2d4ade512a6c82e6720e8049833e5baa1771cd64aa2d401d2fabe08d86564736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100d65760003560e01c806378caec371161007f578063c0c65a4e11610059578063c0c65a4e14610229578063d8a06f7314610249578063f2fde38b14610269578063fa8afbd91461028957600080fd5b806378caec37146101cb578063839006f2146101eb5780638da5cb5b1461020b57600080fd5b80636d13582c116100b05780636d13582c14610176578063715018a61461019657806374a1b0b0146101ab57600080fd5b80630eb188ae146100e25780633ea7fbdb1461011c5780633fc8cef31461013e57600080fd5b366100dd57005b600080fd5b3480156100ee57600080fd5b506101026100fd366004611d5c565b61029c565b604080519283529015156020830152015b60405180910390f35b34801561012857600080fd5b5061013c610137366004611c2c565b61083f565b005b34801561014a57600080fd5b5060055461015e906001600160a01b031681565b6040516001600160a01b039091168152602001610113565b34801561018257600080fd5b5060045461015e906001600160a01b031681565b3480156101a257600080fd5b5061013c6108c0565b3480156101b757600080fd5b5060035461015e906001600160a01b031681565b3480156101d757600080fd5b5061013c6101e6366004611c2c565b610964565b3480156101f757600080fd5b5061013c610206366004611c2c565b610a83565b34801561021757600080fd5b506000546001600160a01b031661015e565b34801561023557600080fd5b5061013c610244366004611c2c565b610c3e565b34801561025557600080fd5b5060025461015e906001600160a01b031681565b34801561027557600080fd5b5061013c610284366004611c2c565b610cba565b61013c610297366004611d9d565b610deb565b6003546040517fc23c6da0000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b038481166024830152600092839242929091169063c23c6da09060440160206040518083038186803b15801561030857600080fd5b505afa15801561031c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103409190611d44565b111561035157506000905080610837565b6002546040516340d1b7db60e11b8152600481018790526000916001600160a01b0316906381a36fb69060240160206040518083038186803b15801561039657600080fd5b505afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190611c48565b60035460405163cda13d6760e01b81526001600160a01b0380841660048301529293506000929091169063cda13d679060240160206040518083038186803b15801561041957600080fd5b505afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104519190611c48565b6040516370a0823160e01b81526001600160a01b038881166004830152919250839183918891600091908416906370a082319060240160206040518083038186803b15801561049f57600080fd5b505afa1580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d79190611d44565b6003546040516321b1fe6960e11b8152600481018e90529192506000916001600160a01b0390911690634363fcd29060240160206040518083038186803b15801561052157600080fd5b505afa158015610535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105599190611d44565b90506000670de0b6b3a76400006105708385611f17565b61057a9190611ef7565b90506000670de0b6b3a76400006105918486611f17565b61059b9190611ef7565b6105a6906063611edf565b905060006105bc670de0b6b3a764000084611ef7565b905060006105d2670de0b6b3a764000084611ef7565b905081811115610821576040516370a0823160e01b81523360048201526063906001600160a01b038b16906370a082319060240160206040518083038186803b15801561061e57600080fd5b505afa158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190611d44565b101580156106e25750604051636eb1769f60e11b81523360048201523060248201526063906001600160a01b038b169063dd62ed3e9060440160206040518083038186803b1580156106a757600080fd5b505afa1580156106bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106df9190611d44565b10155b156106fd579b5060019a506108379950505050505050505050565b612710876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190611d44565b1061078c579b5060019a506108379950505050505050505050565b6040516370a0823160e01b81523060048201526063906001600160a01b038b16906370a082319060240160206040518083038186803b1580156107ce57600080fd5b505afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108069190611d44565b10610821579b5060019a506108379950505050505050505050565b509a506000995061083798505050505050505050565b935093915050565b6000546001600160a01b0316331461089e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461091a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610895565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146109be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610895565b600480546001600160a01b0319166001600160a01b0383169081178255604080517fad5c46480000000000000000000000000000000000000000000000000000000081529051919263ad5c4648928282019260209290829003018186803b158015610a2857600080fd5b505afa158015610a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a609190611c48565b600580546001600160a01b0319166001600160a01b039290921691909117905550565b6000546001600160a01b03163314610add5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610895565b6001600160a01b038116610bad57604051600090339047908381818185875af1925050503d8060008114610b2d576040519150601f19603f3d011682016040523d82523d6000602084013e610b32565b606091505b5050905080610ba95760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610895565b5050565b6040516370a0823160e01b8152306004820152610c3b9033906001600160a01b038416906370a082319060240160206040518083038186803b158015610bf257600080fd5b505afa158015610c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2a9190611d44565b6001600160a01b03841691906118b1565b50565b6000546001600160a01b03163314610c985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610895565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610d145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610895565b6001600160a01b038116610d905760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610895565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b670de0b6b3a7640000811115610e0057600080fd5b6002546040516340d1b7db60e11b8152600481018590526000916001600160a01b0316906381a36fb69060240160206040518083038186803b158015610e4557600080fd5b505afa158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d9190611c48565b60035460405163cda13d6760e01b81526001600160a01b0380841660048301529293506000929091169063cda13d679060240160206040518083038186803b158015610ec857600080fd5b505afa158015610edc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f009190611c48565b90506000610f1685670de0b6b3a7640000611f17565b6040516370a0823160e01b815233600482015290915060009081906001600160a01b038516906370a082319060240160206040518083038186803b158015610f5d57600080fd5b505afa158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f959190611d44565b905085670de0b6b3a76400001415610faf57809150611154565b6003546040516321b1fe6960e11b8152600481018a90526000916001600160a01b031690634363fcd29060240160206040518083038186803b158015610ff457600080fd5b505afa158015611008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102c9190611d44565b905060008161104386670de0b6b3a7640000611f17565b61104d9190611ef7565b905084670de0b6b3a76400006110638484611f17565b61106d9190611ef7565b10156110815761107e600182611edf565b90505b8083101561109157829350611151565b8761109e57809350611151565b6040516370a0823160e01b815233600482015260009082906001600160a01b038916906370a082319060240160206040518083038186803b1580156110e257600080fd5b505afa1580156110f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111a9190611d44565b6111249190611f36565b9050670de0b6b3a76400006111398a83611f17565b6111439190611ef7565b61114d9083611edf565b9450505b50505b6111696001600160a01b03851633308561195f565b600354604051636eb1769f60e11b81523060048201526001600160a01b039182166024820152839186169063dd62ed3e9060440160206040518083038186803b1580156111b557600080fd5b505afa1580156111c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ed9190611d44565b1015611295576003546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260001960248201529085169063095ea7b390604401602060405180830381600087803b15801561125b57600080fd5b505af115801561126f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112939190611d24565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a082319060240160206040518083038186803b1580156112d757600080fd5b505afa1580156112eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130f9190611d44565b6003546040517f441a3e70000000000000000000000000000000000000000000000000000000008152600481018c9052602481018690529192506001600160a01b03169063441a3e7090604401600060405180830381600087803b15801561137657600080fd5b505af115801561138a573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508391506001600160a01b038916906370a082319060240160206040518083038186803b1580156113d257600080fd5b505afa1580156113e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140a9190611d44565b6114149190611f36565b905060008582101561142d5761142a8287611f36565b90505b6064811061147d5760405162461bcd60e51b815260206004820152601260248201527f6e6f7420656e6f7567682076546f6b656e7300000000000000000000000000006044820152606401610895565b6000838211156116f9576040516370a0823160e01b815233600482015282906001600160a01b038b16906370a082319060240160206040518083038186803b1580156114c857600080fd5b505afa1580156114dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115009190611d44565b1015801561158b5750604051636eb1769f60e11b815233600482015230602482015282906001600160a01b038b169063dd62ed3e9060440160206040518083038186803b15801561155057600080fd5b505afa158015611564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115889190611d44565b10155b156115aa576115a56001600160a01b038a1633308561195f565b6116fc565b604080516002808252606082018352600092602083019080368337505060055482519293506001600160a01b0316918391506000906115f957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050898160018151811061163b57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152600480546040517ffb3bdb4100000000000000000000000000000000000000000000000000000000815292169163fb3bdb4191633b9aca009161169c91889187913091429101611e17565b6000604051808303818588803b1580156116b557600080fd5b505af11580156116c9573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526116f29190810190611c64565b50506116fc565b50805b8a156117af57604080516000815260208101918290527f9d54def6000000000000000000000000000000000000000000000000000000009091526001600160a01b038a1690639d54def690611757908e903360248201611e80565b600060405180830381600087803b15801561177157600080fd5b505af1158015611785573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117ad9190810190611c64565b505b60006117bb8286611f36565b6040516370a0823160e01b81523060048201526001600160a01b038c16906370a082319060240160206040518083038186803b1580156117fa57600080fd5b505afa15801561180e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118329190611d44565b61183c9190611f36565b9050606481111561185b5761185b6001600160a01b038b1633836118b1565b604080518e8152602081018990529081018d90523360608201527f2d80d681127a38ca715ea60cfd400ccbe674c857d140e3437d0da5dde6152fa39060800160405180910390a150505050505050505050505050565b6040516001600160a01b03831660248201526044810182905261195a9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526119b6565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526119b09085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016118f6565b50505050565b6000611a0b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a9b9092919063ffffffff16565b80519091501561195a5780806020019051810190611a299190611d24565b61195a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610895565b6060611aaa8484600085611ab4565b90505b9392505050565b606082471015611b2c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610895565b843b611b7a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610895565b600080866001600160a01b03168587604051611b969190611dc8565b60006040518083038185875af1925050503d8060008114611bd3576040519150601f19603f3d011682016040523d82523d6000602084013e611bd8565b606091505b5091509150611be8828286611bf3565b979650505050505050565b60608315611c02575081611aad565b825115611c125782518084602001fd5b8160405162461bcd60e51b81526004016108959190611de4565b600060208284031215611c3d578081fd5b8135611aad81611fa5565b600060208284031215611c59578081fd5b8151611aad81611fa5565b60006020808385031215611c76578182fd5b825167ffffffffffffffff80821115611c8d578384fd5b818501915085601f830112611ca0578384fd5b815181811115611cb257611cb2611f8f565b8060051b604051601f19603f83011681018181108582111715611cd757611cd7611f8f565b604052828152858101935084860182860187018a1015611cf5578788fd5b8795505b83861015611d17578051855260019590950194938601938601611cf9565b5098975050505050505050565b600060208284031215611d35578081fd5b81518015158114611aad578182fd5b600060208284031215611d55578081fd5b5051919050565b600080600060608486031215611d70578182fd5b833592506020840135611d8281611fa5565b91506040840135611d9281611fa5565b809150509250925092565b600080600060608486031215611db1578283fd5b505081359360208301359350604090920135919050565b60008251611dda818460208701611f4d565b9190910192915050565b6020815260008251806020840152611e03816040850160208701611f4d565b601f01601f19169190910160400192915050565b600060808201868352602060808185015281875180845260a0860191508289019350845b81811015611e605784516001600160a01b031683529383019391830191600101611e3b565b50506001600160a01b039690961660408501525050506060015292915050565b60006060820185835260206060818501528186518084526080860191508288019350845b81811015611ec057845183529383019391830191600101611ea4565b50508093505050506001600160a01b0383166040830152949350505050565b60008219821115611ef257611ef2611f79565b500190565b600082611f1257634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611f3157611f31611f79565b500290565b600082821015611f4857611f48611f79565b500390565b60005b83811015611f68578181015183820152602001611f50565b838111156119b05750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c3b57600080fdfea26469706673582212209c26d2d4ade512a6c82e6720e8049833e5baa1771cd64aa2d401d2fabe08d86564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstakeInventory(uint256,uint256,uint256)": {
        "params": {
          "remainingPortionToUnstake": "Represents the ratio (in 1e18) of the remaining xTokens (left after claiming `numNfts`) balance of user to unstake if remainingPortionToUnstake = 1e18 => unstake entire user's balance if remainingPortionToUnstake = 0 => only unstake required xToken balance to claim `numNfts`, nothing extra"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4333,
        "contract": "contracts/solidity/NFTXUnstakingInventoryZap.sol:NFTXUnstakingInventoryZap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4696,
        "contract": "contracts/solidity/NFTXUnstakingInventoryZap.sol:NFTXUnstakingInventoryZap",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 796,
        "contract": "contracts/solidity/NFTXUnstakingInventoryZap.sol:NFTXUnstakingInventoryZap",
        "label": "vaultFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(INFTXVaultFactory)2248"
      },
      {
        "astId": 799,
        "contract": "contracts/solidity/NFTXUnstakingInventoryZap.sol:NFTXUnstakingInventoryZap",
        "label": "inventoryStaking",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(NFTXInventoryStaking)775"
      },
      {
        "astId": 802,
        "contract": "contracts/solidity/NFTXUnstakingInventoryZap.sol:NFTXUnstakingInventoryZap",
        "label": "sushiRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IUniswapV2Router01)2568"
      },
      {
        "astId": 805,
        "contract": "contracts/solidity/NFTXUnstakingInventoryZap.sol:NFTXUnstakingInventoryZap",
        "label": "weth",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IWETH)3578"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(INFTXVaultFactory)2248": {
        "encoding": "inplace",
        "label": "contract INFTXVaultFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router01)2568": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router01",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)3578": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_contract(NFTXInventoryStaking)775": {
        "encoding": "inplace",
        "label": "contract NFTXInventoryStaking",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}