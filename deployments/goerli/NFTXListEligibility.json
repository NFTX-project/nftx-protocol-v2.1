{
  "address": "0x9051DEe49745A48256c5c415FBbbF805FcffE8d9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "NFTXEligibilityInit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEligible",
          "type": "bool"
        }
      ],
      "name": "UniqueEligibilitiesSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "__NFTXEligibility_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_configData",
          "type": "bytes"
        }
      ],
      "name": "__NFTXEligibility_init_bytes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "afterMintHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "afterRedeemHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "beforeMintHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "beforeRedeemHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "checkAllEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "checkAllIneligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "checkEligible",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkIsEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isUniqueEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xd98ddc87a4e1d7f57c13f4326d871351ebfbd6c33f28366cecd8375dfd00b3ec",
  "receipt": {
    "to": null,
    "from": "0xDEA9196Dcdd2173D6E369c2AcC0faCc83fD9346a",
    "contractAddress": "0x9051DEe49745A48256c5c415FBbbF805FcffE8d9",
    "transactionIndex": 52,
    "gasUsed": "684515",
    "logsBloom": "0x
    "blockHash": "0x16e7567dbc9b23655d4b438b0c2943565a90a7ba37f838706576ea45099348fa",
    "transactionHash": "0xd98ddc87a4e1d7f57c13f4326d871351ebfbd6c33f28366cecd8375dfd00b3ec",
    "logs": [],
    "blockNumber": 8157560,
    "cumulativeGasUsed": "12145783",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9314967d8d06fb49ee455f51ac9f25c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"NFTXEligibilityInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEligible\",\"type\":\"bool\"}],\"name\":\"UniqueEligibilitiesSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"__NFTXEligibility_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_configData\",\"type\":\"bytes\"}],\"name\":\"__NFTXEligibility_init_bytes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"afterMintHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"afterRedeemHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"beforeMintHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"beforeRedeemHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"checkAllEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"checkAllIneligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"checkEligible\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkIsEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isUniqueEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/solidity/eligibility/NFTXListEligibility.sol\":\"NFTXListEligibility\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/solidity/eligibility/NFTXEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\nimport \\\"../interface/INFTXEligibility.sol\\\";\\n\\n// This is a contract meant to be inherited and overriden to implement eligibility modules. \\nabstract contract NFTXEligibility is INFTXEligibility, Initializable {\\n  function name() public pure override virtual returns (string memory);\\n  function finalized() public view override virtual returns (bool);\\n  function targetAsset() public pure override virtual returns (address);\\n  \\n  function __NFTXEligibility_init_bytes(bytes memory initData) public override virtual;\\n\\n  function checkIsEligible(uint256 tokenId) external view override virtual returns (bool) {\\n      return _checkIfEligible(tokenId);\\n  }\\n\\n  function checkEligible(uint256[] calldata tokenIds) external override virtual view returns (bool[] memory) {\\n      uint256 length = tokenIds.length;\\n      bool[] memory eligibile = new bool[](length);\\n      for (uint256 i; i < length; i++) {\\n          eligibile[i] = _checkIfEligible(tokenIds[i]);\\n      }\\n      return eligibile;\\n  }\\n\\n  function checkAllEligible(uint256[] calldata tokenIds) external override virtual view returns (bool) {\\n      uint256 length = tokenIds.length;\\n      for (uint256 i; i < length; i++) {\\n          // If any are not eligible, end the loop and return false.\\n          if (!_checkIfEligible(tokenIds[i])) {\\n              return false;\\n          }\\n      }\\n      return true;\\n  }\\n\\n  // Checks if all provided NFTs are NOT eligible. This is needed for mint requesting where all NFTs \\n  // provided must be ineligible.\\n  function checkAllIneligible(uint256[] calldata tokenIds) external override virtual view returns (bool) {\\n      uint256 length = tokenIds.length;\\n      for (uint256 i; i < length; i++) {\\n          // If any are eligible, end the loop and return false.\\n          if (_checkIfEligible(tokenIds[i])) {\\n              return false;\\n          }\\n      }\\n      return true;\\n  }\\n\\n  function beforeMintHook(uint256[] calldata tokenIds) external override virtual {}\\n  function afterMintHook(uint256[] calldata tokenIds) external override virtual {}\\n  function beforeRedeemHook(uint256[] calldata tokenIds) external override virtual {}\\n  function afterRedeemHook(uint256[] calldata tokenIds) external override virtual {}\\n\\n  // Override this to implement your module!\\n  function _checkIfEligible(uint256 _tokenId) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x3997ba7e9f970b2c66dbf97ae374ff9cfc38d8be87a35911df4fa91ad8710360\",\"license\":\"MIT\"},\"contracts/solidity/eligibility/NFTXListEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./UniqueEligibility.sol\\\";\\nimport \\\"./NFTXEligibility.sol\\\";\\n\\ncontract NFTXListEligibility is NFTXEligibility, UniqueEligibility {\\n    function name() public pure override virtual returns (string memory) {    \\n        return \\\"List\\\";\\n    }\\n\\n    function finalized() public view override virtual returns (bool) {    \\n        return true;\\n    }\\n\\n    function targetAsset() public pure override virtual returns (address) {\\n        return address(0);\\n    }\\n\\n    struct Config {\\n        uint256[] tokenIds;\\n    }\\n\\n    event NFTXEligibilityInit(uint256[] tokenIds);\\n\\n    function __NFTXEligibility_init_bytes(\\n        bytes memory _configData\\n    ) public override virtual initializer {\\n        (uint256[] memory _ids) = abi.decode(_configData, (uint256[]));\\n        __NFTXEligibility_init(_ids);\\n    }\\n\\n    function __NFTXEligibility_init(\\n        uint256[] memory tokenIds\\n    ) public initializer {\\n        _setUniqueEligibilities(tokenIds, true);\\n        emit NFTXEligibilityInit(tokenIds);\\n    }\\n\\n    function _checkIfEligible(\\n        uint256 _tokenId\\n    ) internal view override virtual returns (bool) {\\n        return isUniqueEligible(_tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xfcfdbdc91a315442beefc98ff612ae9c8b5d3ee2d24aa356c80a0415ad7fe915\",\"license\":\"MIT\"},\"contracts/solidity/eligibility/UniqueEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract UniqueEligibility {\\n    mapping(uint256 => uint256) eligibleBitMap;\\n\\n    event UniqueEligibilitiesSet(uint256[] tokenIds, bool isEligible);\\n\\n    function isUniqueEligible(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 wordIndex = tokenId / 256;\\n        uint256 bitMap = eligibleBitMap[wordIndex];\\n        return _getBit(bitMap, tokenId);\\n    }\\n\\n    function _setUniqueEligibilities(\\n        uint256[] memory tokenIds,\\n        bool _isEligible\\n    ) internal virtual {\\n        uint256 cachedWord = eligibleBitMap[0];\\n        uint256 cachedIndex = 0;\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 eligibilityWordIndex = tokenId / 256;\\n            if (eligibilityWordIndex != cachedIndex) {\\n                // Save the cached word.\\n                eligibleBitMap[cachedIndex] = cachedWord;\\n                // Cache the new one.\\n                cachedWord = eligibleBitMap[eligibilityWordIndex];\\n                cachedIndex = eligibilityWordIndex;\\n            }\\n            // Modify the cached word.\\n            cachedWord = _setBit(cachedWord, tokenId, _isEligible);\\n        }\\n        // Assign the last word since the loop is done.\\n        eligibleBitMap[cachedIndex] = cachedWord;\\n        emit UniqueEligibilitiesSet(tokenIds, _isEligible);\\n    }\\n\\n    function _setBit(uint256 bitMap, uint256 index, bool eligible)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 claimedBitIndex = index % 256;\\n        if (eligible) {\\n            return bitMap | (1 << claimedBitIndex);\\n        } else {\\n            return bitMap & ~(1 << claimedBitIndex);\\n        }\\n    }\\n\\n    function _getBit(uint256 bitMap, uint256 index)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        uint256 claimedBitIndex = index % 256;\\n        return uint8((bitMap >> claimedBitIndex) & 1) == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x15dff3c57a8c8bc1e05e7dae0ef259b604ba7fdcaa6c4250b3f6dacadffe1251\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXEligibility {\\n    // Read functions.\\n    function name() external pure returns (string memory);\\n\\n    function finalized() external view returns (bool);\\n\\n    function targetAsset() external pure returns (address);\\n\\n    function checkAllEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool[] memory);\\n\\n    function checkAllIneligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\\n\\n    // Write functions.\\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\\n\\n    function beforeMintHook(uint256[] calldata tokenIds) external;\\n\\n    function afterMintHook(uint256[] calldata tokenIds) external;\\n\\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\\n\\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xd932fdc4ea04b9d685f094b4405e64da8f3ab46cd701b22223f2a28d42973c70\",\"license\":\"MIT\"},\"contracts/solidity/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            _initializing || !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04ad3c77a6a5006b66f1642cc3353b8009215d734eb80f069ed42a6c09460391\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b6f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636cd912601161008c578063bd8affde11610066578063bd8affde14610137578063ca373f28146101ca578063d2a096e8146101dd578063facf895f146101f057600080fd5b80636cd912601461019057806384ca9f85146101b0578063b3f05b97146101c357600080fd5b80633d4403ac116100c85780633d4403ac1461016e5780634998b7f31461017d5780635e2f9b52146101375780636c47d5951461013757600080fd5b806306fdde03146100ef57806336eb0862146101375780633942cf361461014b575b600080fd5b604080518082018252600481527f4c697374000000000000000000000000000000000000000000000000000000006020820152905161012e9190610a16565b60405180910390f35b61014961014536600461072b565b5050565b005b61015e610159366004610947565b610203565b604051901515815260200161012e565b6040516000815260200161012e565b61014961018b3660046108ba565b610236565b6101a361019e36600461072b565b61031f565b60405161012e9190610999565b61015e6101be36600461072b565b6103fe565b600161015e565b61015e6101d836600461072b565b61045a565b61015e6101eb366004610947565b6104ac565b6101496101fe36600461079b565b6104b7565b60008061021261010084610abe565b60008181526001602052604090205490915061022e81856105bb565b949350505050565b600054610100900460ff168061024f575060005460ff16155b6102c65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff161580156102e8576000805461ffff19166101011790555b6000828060200190518101906102fe9190610833565b9050610309816104b7565b508015610145576000805461ff00191690555050565b60608160008167ffffffffffffffff81111561034b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610374578160200160208202803683370190505b50905060005b828110156103f3576103b18686838181106103a557634e487b7160e01b600052603260045260246000fd5b905060200201356105db565b8282815181106103d157634e487b7160e01b600052603260045260246000fd5b91151560209283029190910190910152806103eb81610ad2565b91505061037a565b509150505b92915050565b600081815b8181101561044f5761042e8585838181106103a557634e487b7160e01b600052603260045260246000fd5b61043d576000925050506103f8565b8061044781610ad2565b915050610403565b506001949350505050565b600081815b8181101561044f5761048a8585838181106103a557634e487b7160e01b600052603260045260246000fd5b1561049a576000925050506103f8565b806104a481610ad2565b91505061045f565b60006103f8826105db565b600054610100900460ff16806104d0575060005460ff16155b6105425760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016102bd565b600054610100900460ff16158015610564576000805461ffff19166101011790555b61056f8260016105e6565b7f57c1f3c63f373f6f173119ab80d232a4a8ca7449a0bdb2f33f6188847539e7458260405161059e91906109df565b60405180910390a18015610145576000805461ff00191690555050565b6000806105ca61010084610af9565b9390931c6001908116149392505050565b60006103f882610203565b600080805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb495490805b84518110156106a457600085828151811061064057634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006101008261065a9190610abe565b9050838114610682576000938452600160205260408085209590955580845293909220549291825b61068d8583886106f6565b94505050808061069c90610ad2565b915050610615565b5060008181526001602052604090819020839055517ffacde3821ab1224682dd0ab6a805f71860b6ca6982ad044c8c4927ea4c6f1401906106e890869086906109f2565b60405180910390a150505050565b60008061070561010085610af9565b9050821561071a576001901b84179050610724565b6001901b19841690505b9392505050565b6000806020838503121561073d578182fd5b823567ffffffffffffffff80821115610754578384fd5b818501915085601f830112610767578384fd5b813581811115610775578485fd5b8660208260051b8501011115610789578485fd5b60209290920196919550909350505050565b600060208083850312156107ad578182fd5b823567ffffffffffffffff8111156107c3578283fd5b8301601f810185136107d3578283fd5b80356107e66107e182610a9a565b610a69565b80828252848201915084840188868560051b8701011115610805578687fd5b8694505b83851015610827578035835260019490940193918501918501610809565b50979650505050505050565b60006020808385031215610845578182fd5b825167ffffffffffffffff81111561085b578283fd5b8301601f8101851361086b578283fd5b80516108796107e182610a9a565b80828252848201915084840188868560051b8701011115610898578687fd5b8694505b8385101561082757805183526001949094019391850191850161089c565b600060208083850312156108cc578182fd5b823567ffffffffffffffff808211156108e3578384fd5b818501915085601f8301126108f6578384fd5b81358181111561090857610908610b23565b61091a601f8201601f19168501610a69565b9150808252868482850101111561092f578485fd5b80848401858401378101909201929092529392505050565b600060208284031215610958578081fd5b5035919050565b6000815180845260208085019450808401835b8381101561098e57815187529582019590820190600101610972565b509495945050505050565b6020808252825182820181905260009190848201906040850190845b818110156109d35783511515835292840192918401916001016109b5565b50909695505050505050565b602081526000610724602083018461095f565b604081526000610a05604083018561095f565b905082151560208301529392505050565b6000602080835283518082850152825b81811015610a4257858101830151858201604001528201610a26565b81811115610a535783604083870101525b50601f01601f1916929092016040019392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610a9257610a92610b23565b604052919050565b600067ffffffffffffffff821115610ab457610ab4610b23565b5060051b60200190565b600082610acd57610acd610b0d565b500490565b6000600019821415610af257634e487b7160e01b81526011600452602481fd5b5060010190565b600082610b0857610b08610b0d565b500690565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207970ca0d75ef7bd669e49526fae47fc381886c8d455dbe27a8b0fa33051552ec64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636cd912601161008c578063bd8affde11610066578063bd8affde14610137578063ca373f28146101ca578063d2a096e8146101dd578063facf895f146101f057600080fd5b80636cd912601461019057806384ca9f85146101b0578063b3f05b97146101c357600080fd5b80633d4403ac116100c85780633d4403ac1461016e5780634998b7f31461017d5780635e2f9b52146101375780636c47d5951461013757600080fd5b806306fdde03146100ef57806336eb0862146101375780633942cf361461014b575b600080fd5b604080518082018252600481527f4c697374000000000000000000000000000000000000000000000000000000006020820152905161012e9190610a16565b60405180910390f35b61014961014536600461072b565b5050565b005b61015e610159366004610947565b610203565b604051901515815260200161012e565b6040516000815260200161012e565b61014961018b3660046108ba565b610236565b6101a361019e36600461072b565b61031f565b60405161012e9190610999565b61015e6101be36600461072b565b6103fe565b600161015e565b61015e6101d836600461072b565b61045a565b61015e6101eb366004610947565b6104ac565b6101496101fe36600461079b565b6104b7565b60008061021261010084610abe565b60008181526001602052604090205490915061022e81856105bb565b949350505050565b600054610100900460ff168061024f575060005460ff16155b6102c65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff161580156102e8576000805461ffff19166101011790555b6000828060200190518101906102fe9190610833565b9050610309816104b7565b508015610145576000805461ff00191690555050565b60608160008167ffffffffffffffff81111561034b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610374578160200160208202803683370190505b50905060005b828110156103f3576103b18686838181106103a557634e487b7160e01b600052603260045260246000fd5b905060200201356105db565b8282815181106103d157634e487b7160e01b600052603260045260246000fd5b91151560209283029190910190910152806103eb81610ad2565b91505061037a565b509150505b92915050565b600081815b8181101561044f5761042e8585838181106103a557634e487b7160e01b600052603260045260246000fd5b61043d576000925050506103f8565b8061044781610ad2565b915050610403565b506001949350505050565b600081815b8181101561044f5761048a8585838181106103a557634e487b7160e01b600052603260045260246000fd5b1561049a576000925050506103f8565b806104a481610ad2565b91505061045f565b60006103f8826105db565b600054610100900460ff16806104d0575060005460ff16155b6105425760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016102bd565b600054610100900460ff16158015610564576000805461ffff19166101011790555b61056f8260016105e6565b7f57c1f3c63f373f6f173119ab80d232a4a8ca7449a0bdb2f33f6188847539e7458260405161059e91906109df565b60405180910390a18015610145576000805461ff00191690555050565b6000806105ca61010084610af9565b9390931c6001908116149392505050565b60006103f882610203565b600080805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb495490805b84518110156106a457600085828151811061064057634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006101008261065a9190610abe565b9050838114610682576000938452600160205260408085209590955580845293909220549291825b61068d8583886106f6565b94505050808061069c90610ad2565b915050610615565b5060008181526001602052604090819020839055517ffacde3821ab1224682dd0ab6a805f71860b6ca6982ad044c8c4927ea4c6f1401906106e890869086906109f2565b60405180910390a150505050565b60008061070561010085610af9565b9050821561071a576001901b84179050610724565b6001901b19841690505b9392505050565b6000806020838503121561073d578182fd5b823567ffffffffffffffff80821115610754578384fd5b818501915085601f830112610767578384fd5b813581811115610775578485fd5b8660208260051b8501011115610789578485fd5b60209290920196919550909350505050565b600060208083850312156107ad578182fd5b823567ffffffffffffffff8111156107c3578283fd5b8301601f810185136107d3578283fd5b80356107e66107e182610a9a565b610a69565b80828252848201915084840188868560051b8701011115610805578687fd5b8694505b83851015610827578035835260019490940193918501918501610809565b50979650505050505050565b60006020808385031215610845578182fd5b825167ffffffffffffffff81111561085b578283fd5b8301601f8101851361086b578283fd5b80516108796107e182610a9a565b80828252848201915084840188868560051b8701011115610898578687fd5b8694505b8385101561082757805183526001949094019391850191850161089c565b600060208083850312156108cc578182fd5b823567ffffffffffffffff808211156108e3578384fd5b818501915085601f8301126108f6578384fd5b81358181111561090857610908610b23565b61091a601f8201601f19168501610a69565b9150808252868482850101111561092f578485fd5b80848401858401378101909201929092529392505050565b600060208284031215610958578081fd5b5035919050565b6000815180845260208085019450808401835b8381101561098e57815187529582019590820190600101610972565b509495945050505050565b6020808252825182820181905260009190848201906040850190845b818110156109d35783511515835292840192918401916001016109b5565b50909695505050505050565b602081526000610724602083018461095f565b604081526000610a05604083018561095f565b905082151560208301529392505050565b6000602080835283518082850152825b81811015610a4257858101830151858201604001528201610a26565b81811115610a535783604083870101525b50601f01601f1916929092016040019392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610a9257610a92610b23565b604052919050565b600067ffffffffffffffff821115610ab457610ab4610b23565b5060051b60200190565b600082610acd57610acd610b0d565b500490565b6000600019821415610af257634e487b7160e01b81526011600452602481fd5b5060010190565b600082610b0857610b08610b0d565b500690565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207970ca0d75ef7bd669e49526fae47fc381886c8d455dbe27a8b0fa33051552ec64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 587,
        "contract": "contracts/solidity/eligibility/NFTXListEligibility.sol:NFTXListEligibility",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 590,
        "contract": "contracts/solidity/eligibility/NFTXListEligibility.sol:NFTXListEligibility",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 321,
        "contract": "contracts/solidity/eligibility/NFTXListEligibility.sol:NFTXListEligibility",
        "label": "eligibleBitMap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}