{
  "address": "0xA50D1dba51bAc0dCc7a56fF186f366757c6fD806",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftxFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_swapTarget",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethSpent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "DustReturned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethReceived",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Sell",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethSpent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "specificIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "swapCallData",
          "type": "bytes"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "buyAndRedeem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "idsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "specificIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "swapCallData",
          "type": "bytes"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "buyAndSwap1155",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "idsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "specificIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "swapCallData",
          "type": "bytes"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "buyAndSwap721",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "swapCallData",
          "type": "bytes"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintAndSell1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "swapCallData",
          "type": "bytes"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintAndSell721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftxFactory",
      "outputs": [
        {
          "internalType": "contract INFTXVaultFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftxVaultAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "rescue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x96d629563efa3075e1fd317271975f02842de298355ba4575fb90637e87f4250",
  "receipt": {
    "to": null,
    "from": "0xDEA9196Dcdd2173D6E369c2AcC0faCc83fD9346a",
    "contractAddress": "0xA50D1dba51bAc0dCc7a56fF186f366757c6fD806",
    "transactionIndex": 16,
    "gasUsed": "3171561",
    "logsBloom": "0x00000000000001000000000000000000000000000000000000800000000020000000800000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb8c59117fab23e3bab884d82d1f8663cc42e153322d61ea68dca12301100cf84",
    "transactionHash": "0x96d629563efa3075e1fd317271975f02842de298355ba4575fb90637e87f4250",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 8282796,
        "transactionHash": "0x96d629563efa3075e1fd317271975f02842de298355ba4575fb90637e87f4250",
        "address": "0xA50D1dba51bAc0dCc7a56fF186f366757c6fD806",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dea9196dcdd2173d6e369c2acc0facc83fd9346a"
        ],
        "data": "0x",
        "logIndex": 95,
        "blockHash": "0xb8c59117fab23e3bab884d82d1f8663cc42e153322d61ea68dca12301100cf84"
      }
    ],
    "blockNumber": 8282796,
    "cumulativeGasUsed": "6691211",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1478bEB5D18B23d2bA90FcEe91d66460AC585e6b",
    "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
    "0xF91bB752490473B8342a3E964E855b9f9a2A668e"
  ],
  "numDeployments": 2,
  "solcInputHash": "cdac9771e564f53c5b7f0268fdf87f5f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftxFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_swapTarget\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"DustReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyAndRedeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyAndSwap1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyAndSwap721\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintAndSell1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintAndSell721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftxFactory\",\"outputs\":[{\"internalType\":\"contract INFTXVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftxVaultAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Twade\",\"events\":{\"Buy(uint256,uint256,address)\":{\"params\":{\"count\":\"The number of tokens affected by the event\",\"ethSpent\":\"The amount of ETH spent in the buy\",\"to\":\"The user affected by the event\"}},\"DustReturned(uint256,uint256,address)\":{\"params\":{\"ethAmount\":\"Amount of ETH returned to user\",\"to\":\"The user affected by the event\",\"vTokenAmount\":\"Amount of vToken returned to user\"}},\"Sell(uint256,uint256,address)\":{\"params\":{\"count\":\"The number of tokens affected by the event\",\"ethReceived\":\"The amount of ETH received in the sell\",\"to\":\"The user affected by the event\"}},\"Swap(uint256,uint256,address)\":{\"params\":{\"count\":\"The number of tokens affected by the event\",\"ethSpent\":\"The amount of ETH spent in the swap\",\"to\":\"The user affected by the event\"}}},\"kind\":\"dev\",\"methods\":{\"buyAndRedeem(uint256,uint256,uint256[],bytes,address)\":{\"params\":{\"amount\":\"The number of tokens to buy\",\"specificIds\":\"An array of any specific token IDs to be minted\",\"swapCallData\":\"The `data` field from the API response\",\"to\":\"The recipient of the token IDs from the tx\",\"vaultId\":\"The ID of the NFTX vault\"}},\"buyAndSwap1155(uint256,uint256[],uint256[],uint256[],bytes,address)\":{\"params\":{\"idsIn\":\"An array of random token IDs to be minted\",\"specificIds\":\"An array of any specific token IDs to be minted\",\"swapCallData\":\"The `data` field from the API response\",\"to\":\"The recipient of token IDs from the tx\",\"vaultId\":\"The ID of the NFTX vault\"}},\"buyAndSwap721(uint256,uint256[],uint256[],bytes,address)\":{\"params\":{\"idsIn\":\"An array of random token IDs to be minted\",\"specificIds\":\"An array of any specific token IDs to be minted\",\"swapCallData\":\"The `data` field from the API response\",\"to\":\"The recipient of the token IDs from the tx\",\"vaultId\":\"The ID of the NFTX vault\"}},\"constructor\":{\"params\":{\"_WETH\":\"WETH contract address\",\"_nftxFactory\":\"NFTX Vault Factory contract address\",\"_swapTarget\":\"The swap target specified by the 0x protocol\"}},\"mintAndSell1155(uint256,uint256[],uint256[],bytes,address)\":{\"params\":{\"amounts\":\"The number of the corresponding ID to be minted\",\"ids\":\"An array of token IDs to be minted\",\"swapCallData\":\"The `data` field from the API response\",\"to\":\"The recipient of ETH from the tx\",\"vaultId\":\"The ID of the NFTX vault\"}},\"mintAndSell721(uint256,uint256[],bytes,address)\":{\"params\":{\"ids\":\"An array of token IDs to be minted\",\"swapCallData\":\"The `data` field from the API response\",\"to\":\"The recipient of ETH from the tx\",\"vaultId\":\"The ID of the NFTX vault\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause(bool)\":{\"params\":{\"_paused\":\"New pause state\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescue(address)\":{\"params\":{\"token\":\"The address of the token to be rescued\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Buy(uint256,uint256,address)\":{\"notice\":\"Emitted by the `buyAndRedeem` function.\"},\"DustReturned(uint256,uint256,address)\":{\"notice\":\"Emitted when dust is returned after a transaction.\"},\"Sell(uint256,uint256,address)\":{\"notice\":\"Emitted by the `mintAndSell` functions.\"},\"Swap(uint256,uint256,address)\":{\"notice\":\"Emitted by the `buyAndSwap` functions.\"}},\"kind\":\"user\",\"methods\":{\"WETH()\":{\"notice\":\"An interface for the WETH contract\"},\"buyAndRedeem(uint256,uint256,uint256[],bytes,address)\":{\"notice\":\"Purchases vault tokens from 0x with WETH and then redeems the tokens for either random or specific token IDs from the vault. The specified recipient will receive the ERC721 tokens, as well as any WETH dust that is left over from the tx. \"},\"buyAndSwap1155(uint256,uint256[],uint256[],uint256[],bytes,address)\":{\"notice\":\"Purchases vault tokens from 0x with WETH and then swaps the tokens for either random or specific token IDs from the vault. The specified recipient will receive the ERC1155 tokens, as well as any WETH dust that is left over from the tx. \"},\"buyAndSwap721(uint256,uint256[],uint256[],bytes,address)\":{\"notice\":\"Purchases vault tokens from 0x with WETH and then swaps the tokens for either random or specific token IDs from the vault. The specified recipient will receive the ERC721 tokens, as well as any WETH dust that is left over from the tx. \"},\"constructor\":{\"notice\":\"Initialises our zap by setting contract addresses onto their respective interfaces. \"},\"mintAndSell1155(uint256,uint256[],uint256[],bytes,address)\":{\"notice\":\"Mints tokens from our NFTX vault and sells them on 0x. \"},\"mintAndSell721(uint256,uint256[],bytes,address)\":{\"notice\":\"Mints tokens from our NFTX vault and sells them on 0x. \"},\"nftxFactory()\":{\"notice\":\"An interface for the NFTX Vault Factory contract\"},\"nftxVaultAddresses(uint256)\":{\"notice\":\"A mapping of NFTX Vault IDs to their address corresponding vault contract address\"},\"pause(bool)\":{\"notice\":\"Allows our zap to be paused to prevent any processing. \"},\"paused()\":{\"notice\":\"Allows zap to be paused\"},\"rescue(address)\":{\"notice\":\"Allows our owner to withdraw and tokens in the contract. \"}},\"notice\":\"Sets up a marketplace zap to interact with the 0x protocol. The 0x contract that is hit later on handles the token conversion based on parameters that are sent from the frontend. \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/solidity/NFTXMarketplace0xZap.sol\":\"NFTXMarketplace0xZap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/solidity/NFTXMarketplace0xZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/INFTXVault.sol\\\";\\nimport \\\"./interface/INFTXVaultFactory.sol\\\";\\nimport \\\"./testing/IERC1155.sol\\\";\\nimport \\\"./testing/ERC721Holder.sol\\\";\\nimport \\\"./testing/ERC1155Holder.sol\\\";\\nimport \\\"./util/Ownable.sol\\\";\\nimport \\\"./util/ReentrancyGuard.sol\\\";\\nimport \\\"./util/SafeERC20.sol\\\";\\n\\n\\n/**\\n * @notice A partial ERC20 interface.\\n */\\n\\n\\n/**\\n * @notice A partial WETH interface.\\n */\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n  function transfer(address to, uint value) external returns (bool);\\n  function withdraw(uint) external;\\n  function balanceOf(address to) external view returns (uint256);\\n}\\n\\n\\n/**\\n * @notice Sets up a marketplace zap to interact with the 0x protocol. The 0x contract that\\n * is hit later on handles the token conversion based on parameters that are sent from the\\n * frontend.\\n * \\n * @author Twade\\n */\\n\\ncontract NFTXMarketplace0xZap is Ownable, ReentrancyGuard, ERC721Holder, ERC1155Holder {\\n\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice Allows zap to be paused\\n  bool public paused = false;\\n\\n  /// @notice Sets our 0x swap target\\n  address payable private immutable swapTarget;\\n  \\n  /// @notice An interface for the WETH contract\\n  IWETH public immutable WETH;\\n\\n  /// @notice An interface for the NFTX Vault Factory contract\\n  INFTXVaultFactory public immutable nftxFactory;\\n  address public immutable feeDistributor;\\n\\n  /// @notice A mapping of NFTX Vault IDs to their address corresponding vault contract address\\n  mapping(uint256 => address) public nftxVaultAddresses;\\n\\n  // Set a constant address for specific contracts that need special logic\\n  address constant CRYPTO_PUNKS = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n\\n  /// @notice Emitted by the `buyAndRedeem` function.\\n  /// @param count The number of tokens affected by the event\\n  /// @param ethSpent The amount of ETH spent in the buy\\n  /// @param to The user affected by the event\\n  event Buy(uint256 count, uint256 ethSpent, address to);\\n\\n  /// @notice Emitted by the `mintAndSell` functions.\\n  /// @param count The number of tokens affected by the event\\n  /// @param ethReceived The amount of ETH received in the sell\\n  /// @param to The user affected by the event\\n  event Sell(uint256 count, uint256 ethReceived, address to);\\n\\n  /// @notice Emitted by the `buyAndSwap` functions.\\n  /// @param count The number of tokens affected by the event\\n  /// @param ethSpent The amount of ETH spent in the swap\\n  /// @param to The user affected by the event\\n  event Swap(uint256 count, uint256 ethSpent, address to);\\n\\n  /// @notice Emitted when dust is returned after a transaction.\\n  /// @param ethAmount Amount of ETH returned to user\\n  /// @param vTokenAmount Amount of vToken returned to user\\n  /// @param to The user affected by the event\\n  event DustReturned(uint256 ethAmount, uint256 vTokenAmount, address to);\\n\\n\\n  /**\\n   * @notice Initialises our zap by setting contract addresses onto their\\n   * respective interfaces.\\n   * \\n   * @param _nftxFactory NFTX Vault Factory contract address\\n   * @param _WETH WETH contract address\\n   * @param _swapTarget The swap target specified by the 0x protocol\\n   */\\n\\n  constructor(address _nftxFactory, address _WETH, address payable _swapTarget) Ownable() ReentrancyGuard() {\\n    nftxFactory = INFTXVaultFactory(_nftxFactory);\\n    WETH = IWETH(_WETH);\\n    swapTarget = _swapTarget;\\n    feeDistributor = INFTXVaultFactory(_nftxFactory).feeDistributor();\\n  }\\n\\n\\n  /**\\n   * @notice Mints tokens from our NFTX vault and sells them on 0x.\\n   * \\n   * @param vaultId The ID of the NFTX vault\\n   * @param ids An array of token IDs to be minted\\n   * @param swapCallData The `data` field from the API response\\n   * @param to The recipient of ETH from the tx\\n   */\\n\\n  function mintAndSell721(\\n    uint256 vaultId,\\n    uint256[] calldata ids,\\n    bytes calldata swapCallData,\\n    address payable to\\n  ) external nonReentrant onlyOwnerIfPaused {\\n    // Check that we aren't burning tokens or sending to ourselves\\n    require(to != address(0) && to != address(this), 'Invalid recipient');\\n\\n    // Check that we have been provided IDs\\n    require(ids.length != 0, 'Must send IDs');\\n\\n    // Mint our 721s against the vault\\n    address vault = _mint721(vaultId, ids);\\n\\n    // Sell our vault token for WETH\\n    uint256 amount = _fillQuote(vault, address(WETH), swapCallData);\\n\\n    // convert WETH to ETH and send to `to`\\n    _transferAllWETH(to);\\n\\n    // Emit our sale event\\n    emit Sell(ids.length, amount, to);\\n\\n    // Transfer vault token dust to feeDistributor\\n    _transferDust(vault, false);\\n  }\\n\\n\\n  /**\\n   * @notice Purchases vault tokens from 0x with WETH and then swaps the tokens for\\n   * either random or specific token IDs from the vault. The specified recipient will\\n   * receive the ERC721 tokens, as well as any WETH dust that is left over from the tx.\\n   * \\n   * @param vaultId The ID of the NFTX vault\\n   * @param idsIn An array of random token IDs to be minted\\n   * @param specificIds An array of any specific token IDs to be minted\\n   * @param swapCallData The `data` field from the API response\\n   * @param to The recipient of the token IDs from the tx\\n   */\\n\\n  function buyAndSwap721(\\n    uint256 vaultId, \\n    uint256[] calldata idsIn, \\n    uint256[] calldata specificIds,\\n    bytes calldata swapCallData,\\n    address payable to\\n  ) external payable nonReentrant onlyOwnerIfPaused {\\n    // Check that we aren't burning tokens or sending to ourselves\\n    require(to != address(0) && to != address(this), 'Invalid recipient');\\n\\n    // Check that we have been provided IDs\\n    require(idsIn.length != 0, 'Must send IDs');\\n\\n    // Check that we have a message value sent\\n    require(msg.value > 0, 'Invalid amount');\\n\\n    // Wrap ETH into WETH for our contract from the sender\\n    WETH.deposit{value: msg.value}();\\n\\n    // Get our NFTX vault\\n    address vault = _vaultAddress(vaultId);\\n\\n    // Buy enough vault tokens to fuel our buy\\n    uint256 amount = _fillQuote(address(WETH), vault, swapCallData);\\n\\n    // Swap our tokens for the IDs requested\\n    _swap721(vaultId, idsIn, specificIds, to);\\n    emit Swap(idsIn.length, amount, to);\\n\\n    // Transfer dust ETH to sender and vault token dust to feeDistributor\\n    _transferDust(vault, true);\\n  }\\n\\n\\n  /**\\n   * @notice Purchases vault tokens from 0x with WETH and then redeems the tokens for\\n   * either random or specific token IDs from the vault. The specified recipient will\\n   * receive the ERC721 tokens, as well as any WETH dust that is left over from the tx.\\n   * \\n   * @param vaultId The ID of the NFTX vault\\n   * @param amount The number of tokens to buy\\n   * @param specificIds An array of any specific token IDs to be minted\\n   * @param swapCallData The `data` field from the API response\\n   * @param to The recipient of the token IDs from the tx\\n   */\\n\\n  function buyAndRedeem(\\n    uint256 vaultId,\\n    uint256 amount,\\n    uint256[] calldata specificIds, \\n    bytes calldata swapCallData,\\n    address payable to\\n  ) external payable nonReentrant onlyOwnerIfPaused {\\n    // Check that we aren't burning tokens or sending to ourselves\\n    require(to != address(0) && to != address(this), 'Invalid recipient');\\n\\n    // Check that we have an amount specified\\n    require(amount > 0, 'Must send amount');\\n\\n    // Wrap ETH into WETH for our contract from the sender\\n    WETH.deposit{value: msg.value}();\\n\\n    // Get our vault address information\\n    address vault = _vaultAddress(vaultId);\\n\\n    // Buy vault tokens that will cover our transaction\\n    uint256 quoteAmount = _fillQuote(address(WETH), vault, swapCallData);\\n\\n    // check if received sufficient vault tokens\\n    require(quoteAmount >= amount * 1e18, 'Insufficient vault tokens');\\n\\n    // Redeem token IDs from the vault\\n    _redeem(vaultId, amount, specificIds, to);\\n    emit Buy(amount, quoteAmount, to);\\n\\n    // Transfer dust ETH to sender and vault token dust to feeDistributor\\n    _transferDust(vault, true);\\n  }\\n\\n\\n  /**\\n   * @notice Mints tokens from our NFTX vault and sells them on 0x.\\n   * \\n   * @param vaultId The ID of the NFTX vault\\n   * @param ids An array of token IDs to be minted\\n   * @param amounts The number of the corresponding ID to be minted\\n   * @param swapCallData The `data` field from the API response\\n   * @param to The recipient of ETH from the tx\\n   */\\n\\n  function mintAndSell1155(\\n    uint256 vaultId,\\n    uint256[] calldata ids,\\n    uint256[] calldata amounts,\\n    bytes calldata swapCallData,\\n    address payable to\\n  ) external nonReentrant onlyOwnerIfPaused {\\n    // Check that we aren't burning tokens or sending to ourselves\\n    require(to != address(0) && to != address(this), 'Invalid recipient');\\n\\n    // Get a sum of the total number of IDs we have sent up, and validate that\\n    // the data sent through is valid.\\n    (, uint totalAmount) = _validate1155Ids(ids, amounts);\\n\\n    // Mint our 1155s against the vault\\n    address vault = _mint1155(vaultId, ids, amounts);\\n\\n    // Sell our vault token for WETH\\n    uint256 amount = _fillQuote(vault, address(WETH), swapCallData);\\n\\n    // convert WETH to ETH and send to `to`\\n    _transferAllWETH(to);\\n\\n    // Emit our sale event\\n    emit Sell(totalAmount, amount, to);\\n\\n    // Transfer vault token dust to feeDistributor\\n    _transferDust(vault, false);\\n  }\\n\\n\\n  /**\\n   * @notice Purchases vault tokens from 0x with WETH and then swaps the tokens for\\n   * either random or specific token IDs from the vault. The specified recipient will\\n   * receive the ERC1155 tokens, as well as any WETH dust that is left over from the tx.\\n   * \\n   * @param vaultId The ID of the NFTX vault\\n   * @param idsIn An array of random token IDs to be minted\\n   * @param specificIds An array of any specific token IDs to be minted\\n   * @param swapCallData The `data` field from the API response\\n   * @param to The recipient of token IDs from the tx\\n   */\\n\\n  function buyAndSwap1155(\\n    uint256 vaultId, \\n    uint256[] calldata idsIn,\\n    uint256[] calldata amounts,\\n    uint256[] calldata specificIds,\\n    bytes calldata swapCallData,\\n    address payable to\\n  ) external payable nonReentrant onlyOwnerIfPaused {\\n    // Check that we aren't burning tokens or sending to ourselves\\n    require(to != address(0) && to != address(this), 'Invalid recipient');\\n\\n    // Check that we have a message value sent\\n    require(msg.value > 0, 'Invalid amount');\\n\\n    // Get a sum of the total number of IDs we have sent up, and validate that\\n    // the data sent through is valid.\\n    (, uint totalAmount) = _validate1155Ids(idsIn, amounts);\\n\\n    // Wrap ETH into WETH for our contract from the sender\\n    WETH.deposit{value: msg.value}();\\n\\n    // Get our NFTX vault\\n    address vault = _vaultAddress(vaultId);\\n\\n    // Buy enough vault tokens to fuel our buy\\n    uint256 amount = _fillQuote(address(WETH), vault, swapCallData);\\n\\n    // Swap our tokens for the IDs requested\\n    _swap1155(vaultId, idsIn, amounts, specificIds, to);\\n    emit Swap(totalAmount, amount, to);\\n\\n    // Transfer dust ETH to sender and vault token dust to feeDistributor\\n    _transferDust(vault, true);\\n  }\\n\\n\\n  /**\\n   * @param vaultId The ID of the NFTX vault\\n   * @param ids An array of token IDs to be minted\\n   */\\n\\n  function _mint721(uint256 vaultId, uint256[] memory ids) internal returns (address) {\\n    // Get our vault address information\\n    address vault = _vaultAddress(vaultId);\\n\\n    // Transfer tokens from the message sender to the vault\\n    address assetAddress = INFTXVault(vault).assetAddress();\\n    uint256 length = ids.length;\\n\\n    for (uint256 i; i < length;) {\\n      transferFromERC721(assetAddress, ids[i], vault);\\n\\n      if (assetAddress == CRYPTO_PUNKS) {\\n        _approveERC721(assetAddress, ids[i], vault);\\n      }\\n\\n      unchecked { ++i; }\\n    }\\n\\n    // Mint our tokens from the vault to this contract\\n    uint256[] memory emptyIds;\\n    INFTXVault(vault).mint(ids, emptyIds);\\n\\n    return vault;\\n  }\\n\\n\\n  /**\\n   * @param vaultId The ID of the NFTX vault\\n   * @param ids An array of token IDs to be minted\\n   * @param amounts An array of amounts whose indexes map to the ids array\\n   */\\n\\n  function _mint1155(uint256 vaultId, uint256[] memory ids, uint256[] memory amounts) internal returns (address) {\\n    // Get our vault address information\\n    address vault = _vaultAddress(vaultId);\\n\\n    // Transfer tokens from the message sender to the vault\\n    address assetAddress = INFTXVault(vault).assetAddress();\\n    IERC1155(assetAddress).safeBatchTransferFrom(msg.sender, address(this), ids, amounts, \\\"\\\");\\n    IERC1155(assetAddress).setApprovalForAll(vault, true);\\n\\n    // Mint our tokens from the vault to this contract\\n    INFTXVault(vault).mint(ids, amounts);\\n\\n    return vault;\\n  }\\n\\n\\n  /**\\n   * \\n   * @param vaultId The ID of the NFTX vault\\n   * @param idsIn An array of token IDs to be minted\\n   * @param idsOut An array of token IDs to be redeemed\\n   * @param to The recipient of the idsOut from the tx\\n   */\\n\\n  function _swap721(\\n    uint256 vaultId, \\n    uint256[] memory idsIn,\\n    uint256[] memory idsOut,\\n    address to\\n  ) internal returns (address) {\\n    // Get our vault address information\\n    address vault = _vaultAddress(vaultId);\\n\\n    // Transfer tokens to zap\\n    address assetAddress = INFTXVault(vault).assetAddress();\\n    uint256 length = idsIn.length;\\n\\n    for (uint256 i; i < length;) {\\n      transferFromERC721(assetAddress, idsIn[i], vault);\\n\\n      if (assetAddress == CRYPTO_PUNKS) {\\n        _approveERC721(assetAddress, idsIn[i], vault);\\n      }\\n\\n      unchecked { ++i; }\\n    }\\n\\n    // Swap our tokens\\n    uint256[] memory emptyIds;\\n    INFTXVault(vault).swapTo(idsIn, emptyIds, idsOut, to);\\n\\n    return vault;\\n  }\\n\\n\\n  /**\\n   * @notice Swaps 1155 tokens, transferring them from the recipient to this contract, and\\n   * then sending them to the NFTX vault, that sends them to the recipient.\\n   * \\n   * @param vaultId The ID of the NFTX vault\\n   * @param idsIn The IDs owned by the sender to be swapped\\n   * @param amounts The number of each corresponding ID being swapped\\n   * @param idsOut The requested IDs to be swapped for\\n   * @param to The recipient of the swapped tokens\\n   * \\n   * @return address The address of the NFTX vault\\n   */\\n\\n  function _swap1155(\\n    uint256 vaultId, \\n    uint256[] memory idsIn,\\n    uint256[] memory amounts,\\n    uint256[] memory idsOut,\\n    address to\\n  ) internal returns (address) {\\n    // Get our vault address information\\n    address vault = _vaultAddress(vaultId);\\n\\n    // Transfer tokens to zap and mint to NFTX.\\n    address assetAddress = INFTXVault(vault).assetAddress();\\n    IERC1155(assetAddress).safeBatchTransferFrom(msg.sender, address(this), idsIn, amounts, \\\"\\\");\\n    IERC1155(assetAddress).setApprovalForAll(vault, true);\\n    INFTXVault(vault).swapTo(idsIn, amounts, idsOut, to);\\n    \\n    return vault;\\n  }\\n\\n\\n  /**\\n   * @notice Redeems tokens from a vault to a recipient.\\n   * \\n   * @param vaultId The ID of the NFTX vault\\n   * @param amount The number of tokens to be redeemed\\n   * @param specificIds Specified token IDs if desired, otherwise will be _random_\\n   * @param to The recipient of the token\\n   */\\n\\n  function _redeem(uint256 vaultId, uint256 amount, uint256[] memory specificIds, address to) internal {\\n    INFTXVault(_vaultAddress(vaultId)).redeemTo(amount, specificIds, to);\\n  }\\n\\n\\n  /**\\n   * @notice Transfers our ERC721 tokens to a specified recipient.\\n   * \\n   * @param assetAddr Address of the asset being transferred\\n   * @param tokenId The ID of the token being transferred\\n   * @param to The address the token is being transferred to\\n   */\\n\\n  function transferFromERC721(address assetAddr, uint256 tokenId, address to) internal virtual {\\n    bytes memory data;\\n\\n    if (assetAddr == CRYPTO_PUNKS) {\\n      // Fix here for frontrun attack.\\n      bytes memory punkIndexToAddress = abi.encodeWithSignature(\\\"punkIndexToAddress(uint256)\\\", tokenId);\\n      (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\\n      (address nftOwner) = abi.decode(result, (address));\\n      require(checkSuccess && nftOwner == msg.sender, \\\"Not the NFT owner\\\");\\n      data = abi.encodeWithSignature(\\\"buyPunk(uint256)\\\", tokenId);\\n    } else {\\n      // We push to the vault to avoid an unneeded transfer.\\n      data = abi.encodeWithSignature(\\\"safeTransferFrom(address,address,uint256)\\\", msg.sender, to, tokenId);\\n    }\\n\\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\\n    require(success, string(resultData));\\n  }\\n\\n\\n  /**\\n   * @notice Approves our ERC721 tokens to be transferred.\\n   * \\n   * @dev This is only required to provide special logic for Cryptopunks.\\n   * \\n   * @param assetAddr Address of the asset being transferred\\n   * @param tokenId The ID of the token being transferred\\n   * @param to The address the token is being transferred to\\n   */\\n\\n  function _approveERC721(address assetAddr, uint256 tokenId, address to) internal virtual {\\n    if (assetAddr != CRYPTO_PUNKS) {\\n      return;\\n    }\\n\\n    bytes memory data = abi.encodeWithSignature(\\\"offerPunkForSaleToAddress(uint256,uint256,address)\\\", tokenId, 0, to);\\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\\n    require(success, string(resultData));\\n  }\\n\\n\\n  /**\\n   * @notice Swaps ERC20->ERC20 tokens held by this contract using a 0x-API quote.\\n   * \\n   * @dev Must attach ETH equal to the `value` field from the API response.\\n   * \\n   * @param sellToken The `sellTokenAddress` field from the API response\\n   * @param buyToken The `buyTokenAddress` field from the API response\\n   * @param swapCallData The `data` field from the API response\\n   */\\n\\n  function _fillQuote(\\n    address sellToken,\\n    address buyToken,\\n    bytes calldata swapCallData\\n  ) internal returns (uint256) {\\n    // Track our balance of the buyToken to determine how much we've bought.\\n    uint256 boughtAmount = IERC20(buyToken).balanceOf(address(this));\\n\\n    // Give `swapTarget` an infinite allowance to spend this contract's `sellToken`.\\n    // Note that for some tokens (e.g., USDT, KNC), you must first reset any existing\\n    // allowance to 0 before being able to update it.\\n    require(IERC20(sellToken).approve(swapTarget, type(uint256).max), 'Unable to approve contract');\\n\\n    // Call the encoded swap function call on the contract at `swapTarget`\\n    (bool success,) = swapTarget.call(swapCallData);\\n    require(success, 'SWAP_CALL_FAILED');\\n\\n    // Use our current buyToken balance to determine how much we've bought.\\n    return IERC20(buyToken).balanceOf(address(this)) - boughtAmount;\\n  }\\n\\n\\n  /**\\n   * @notice Transfers remaining ETH to msg.sender and vault token dust to feeDistributor.\\n   * \\n   * @param vault Address of the vault token\\n   * @param isWETHDust Checks and transfers WETH dust if boolean is true\\n   */\\n\\n  function _transferDust(address vault, bool isWETHDust) internal {\\n    uint256 remaining;\\n    if(isWETHDust) {\\n      remaining = _transferAllWETH(msg.sender);\\n    }\\n\\n    uint dustBalance = IERC20(vault).balanceOf(address(this));\\n    if (dustBalance > 0) {\\n      IERC20(vault).transfer(feeDistributor, dustBalance);\\n    }\\n\\n    emit DustReturned(remaining, dustBalance, msg.sender);\\n  }\\n\\n  function _transferAllWETH(address recipient) internal returns(uint256 amount) {\\n    amount = WETH.balanceOf(address(this));\\n    if (amount > 0) {\\n      // Unwrap our WETH into ETH and transfer it to the recipient\\n      WETH.withdraw(amount);\\n      (bool success, ) = payable(recipient).call{value: amount}(\\\"\\\");\\n      require(success, \\\"Unable to send unwrapped WETH\\\");\\n    }\\n  }\\n\\n\\n  /**\\n   * @notice Allows 1155 IDs and amounts to be validated.\\n   * \\n   * @param ids The IDs of the 1155 tokens.\\n   * @param amounts The number of each corresponding token to process.\\n   * \\n   * @return totalIds The number of different IDs being sent.\\n   * @return totalAmount The total number of IDs being processed.\\n   */\\n\\n  function _validate1155Ids(\\n    uint[] calldata ids,\\n    uint[] calldata amounts\\n  ) internal pure returns (\\n    uint totalIds,\\n    uint totalAmount\\n  ) {\\n    totalIds = ids.length;\\n\\n    // Check that we have been provided IDs\\n    require(totalIds != 0, 'Must send IDs');\\n    require(totalIds <= amounts.length, 'Must define amounts against IDs');\\n\\n    // Sum the amounts for our emitted events\\n    for (uint i; i < totalIds;) {\\n      require(amounts[i] > 0, 'Invalid 1155 amount');\\n\\n      unchecked {\\n        totalAmount += amounts[i];\\n        ++i;\\n      }\\n    }\\n  }\\n\\n\\n  /**\\n   * @notice Maps a cached NFTX vault address against a vault ID.\\n   * \\n   * @param vaultId The ID of the NFTX vault\\n   */\\n\\n  function _vaultAddress(uint256 vaultId) internal returns (address) {\\n    if (nftxVaultAddresses[vaultId] == address(0)) {\\n      nftxVaultAddresses[vaultId] = nftxFactory.vault(vaultId);\\n    }\\n\\n    require(nftxVaultAddresses[vaultId] != address(0), 'Vault does not exist');\\n\\n    return nftxVaultAddresses[vaultId];\\n  }\\n\\n\\n  /**\\n   * @notice Allows our zap to be paused to prevent any processing.\\n   * \\n   * @param _paused New pause state\\n   */\\n\\n  function pause(bool _paused) external onlyOwner {\\n    paused = _paused;\\n  }\\n\\n\\n  /**\\n   * @notice Allows our owner to withdraw and tokens in the contract.\\n   * \\n   * @param token The address of the token to be rescued\\n   */\\n\\n  function rescue(address token) external onlyOwner {\\n    if (token == address(0)) {\\n      (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n      require(success, \\\"Address: unable to send value\\\");\\n    } else {\\n      IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\\n    }\\n  }\\n\\n\\n  /**\\n   * @notice A modifier that only allows the owner to interact with the function\\n   * if the contract is paused. If the contract is not paused then anyone can\\n   * interact with the function.\\n   */\\n\\n  modifier onlyOwnerIfPaused() {\\n    require(!paused || msg.sender == owner(), \\\"Zap is paused\\\");\\n    _;\\n  }\\n\\n\\n  /**\\n   * @notice Allows our contract to receive any assets.\\n   */\\n\\n  receive() external payable {}\\n\\n}\",\"keccak256\":\"0xe77ce704ee9d098e96c781f9e4d3315e69e0f31b337e88ea3e4f38acc5393218\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXEligibility {\\n    // Read functions.\\n    function name() external pure returns (string memory);\\n\\n    function finalized() external view returns (bool);\\n\\n    function targetAsset() external pure returns (address);\\n\\n    function checkAllEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool[] memory);\\n\\n    function checkAllIneligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\\n\\n    // Write functions.\\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\\n\\n    function beforeMintHook(uint256[] calldata tokenIds) external;\\n\\n    function afterMintHook(uint256[] calldata tokenIds) external;\\n\\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\\n\\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xd932fdc4ea04b9d685f094b4405e64da8f3ab46cd701b22223f2a28d42973c70\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\nimport \\\"./INFTXVaultFactory.sol\\\";\\nimport \\\"./INFTXEligibility.sol\\\";\\n\\ninterface INFTXVault is IERC20Upgradeable {\\n    function manager() external view returns (address);\\n\\n    function assetAddress() external view returns (address);\\n\\n    function vaultFactory() external view returns (INFTXVaultFactory);\\n\\n    function eligibilityStorage() external view returns (INFTXEligibility);\\n\\n    function is1155() external view returns (bool);\\n\\n    function allowAllItems() external view returns (bool);\\n\\n    function enableMint() external view returns (bool);\\n\\n    function enableRandomRedeem() external view returns (bool);\\n\\n    function enableTargetRedeem() external view returns (bool);\\n\\n    function enableRandomSwap() external view returns (bool);\\n\\n    function enableTargetSwap() external view returns (bool);\\n\\n    function vaultId() external view returns (uint256);\\n\\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\\n\\n    function allHoldings() external view returns (uint256[] memory);\\n\\n    function totalHoldings() external view returns (uint256);\\n\\n    function mintFee() external view returns (uint256);\\n\\n    function randomRedeemFee() external view returns (uint256);\\n\\n    function targetRedeemFee() external view returns (uint256);\\n\\n    function randomSwapFee() external view returns (uint256);\\n\\n    function targetSwapFee() external view returns (uint256);\\n\\n    function vaultFees()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    event VaultInit(\\n        uint256 indexed vaultId,\\n        address assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    );\\n\\n    event ManagerSet(address manager);\\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\\n    // event CustomEligibilityDeployed(address eligibilityAddr);\\n\\n    event EnableMintUpdated(bool enabled);\\n    event EnableRandomRedeemUpdated(bool enabled);\\n    event EnableTargetRedeemUpdated(bool enabled);\\n    event EnableRandomSwapUpdated(bool enabled);\\n    event EnableTargetSwapUpdated(bool enabled);\\n\\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\\n    event Swapped(\\n        uint256[] nftIds,\\n        uint256[] amounts,\\n        uint256[] specificIds,\\n        uint256[] redeemedIds,\\n        address to\\n    );\\n\\n    function __NFTXVault_init(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _assetAddress,\\n        bool _is1155,\\n        bool _allowAllItems\\n    ) external;\\n\\n    function finalizeVault() external;\\n\\n    function setVaultMetadata(string memory name_, string memory symbol_)\\n        external;\\n\\n    function setVaultFeatures(\\n        bool _enableMint,\\n        bool _enableRandomRedeem,\\n        bool _enableTargetRedeem,\\n        bool _enableRandomSwap,\\n        bool _enableTargetSwap\\n    ) external;\\n\\n    function setFees(\\n        uint256 _mintFee,\\n        uint256 _randomRedeemFee,\\n        uint256 _targetRedeemFee,\\n        uint256 _randomSwapFee,\\n        uint256 _targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees() external;\\n\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\n    // a similar interface.\\n    function deployEligibilityStorage(\\n        uint256 moduleIndex,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    // The manager has control over options like fees and features\\n    function setManager(address _manager) external;\\n\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\n    ) external returns (uint256);\\n\\n    function mintTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        address to\\n    ) external returns (uint256);\\n\\n    function redeem(uint256 amount, uint256[] calldata specificIds)\\n        external\\n        returns (uint256[] calldata);\\n\\n    function redeemTo(\\n        uint256 amount,\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function swap(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds\\n    ) external returns (uint256[] calldata);\\n\\n    function swapTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function allValidNFTs(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x2d3a6170188b0e18d6744b9ea5414e8f01946302b390b032bed94546ce3f5f41\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/IBeacon.sol\\\";\\n\\ninterface INFTXVaultFactory is IBeacon {\\n    // Read functions.\\n    function numVaults() external view returns (uint256);\\n\\n    function zapContract() external view returns (address);\\n\\n    function zapContracts(address addr) external view returns (bool);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function eligibilityManager() external view returns (address);\\n\\n    function vault(uint256 vaultId) external view returns (address);\\n\\n    function allVaults() external view returns (address[] memory);\\n\\n    function vaultsForAsset(address asset)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function isLocked(uint256 id) external view returns (bool);\\n\\n    function excludedFromFees(address addr) external view returns (bool);\\n\\n    function factoryMintFee() external view returns (uint64);\\n\\n    function factoryRandomRedeemFee() external view returns (uint64);\\n\\n    function factoryTargetRedeemFee() external view returns (uint64);\\n\\n    function factoryRandomSwapFee() external view returns (uint64);\\n\\n    function factoryTargetSwapFee() external view returns (uint64);\\n\\n    function vaultFees(uint256 vaultId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    event NewFeeDistributor(address oldDistributor, address newDistributor);\\n    event NewZapContract(address oldZap, address newZap);\\n    event UpdatedZapContract(address zap, bool excluded);\\n    event FeeExclusion(address feeExcluded, bool excluded);\\n    event NewEligibilityManager(address oldEligManager, address newEligManager);\\n    event NewVault(\\n        uint256 indexed vaultId,\\n        address vaultAddress,\\n        address assetAddress\\n    );\\n    event UpdateVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n    event DisableVaultFees(uint256 vaultId);\\n    event UpdateFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n\\n    // Write functions.\\n    function __NFTXVaultFactory_init(\\n        address _vaultImpl,\\n        address _feeDistributor\\n    ) external;\\n\\n    function createVault(\\n        string calldata name,\\n        string calldata symbol,\\n        address _assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    ) external returns (uint256);\\n\\n    function setFeeDistributor(address _feeDistributor) external;\\n\\n    function setEligibilityManager(address _eligibilityManager) external;\\n\\n    function setZapContract(address _zapContract, bool _excluded) external;\\n\\n    function setFeeExclusion(address _excludedAddr, bool excluded) external;\\n\\n    function setFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function setVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees(uint256 vaultId) external;\\n}\\n\",\"keccak256\":\"0xb6d64ca7f387cb11b1a345add3556c21d2b3c9fa9b8d8645a3312bcbb33ce9bb\",\"license\":\"MIT\"},\"contracts/solidity/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function childImplementation() external view returns (address);\\n\\n    function upgradeChildTo(address newImplementation) external;\\n}\\n\",\"keccak256\":\"0xd9b361e1d9b9a4bde9801abb5692e9fd7018cb52505d3a47dc7b5dd968bcad28\",\"license\":\"MIT\"},\"contracts/solidity/testing/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/solidity/testing/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"contracts/solidity/testing/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x33993037906cd4700dd7d2012b4f7a32a08ed449ff50505c92e5f70de1139315\",\"license\":\"MIT\"},\"contracts/solidity/testing/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\",\"keccak256\":\"0x0969c3b761eb3af95a44d2c5b89822572d87441f2ca64d9fa80d7cbab667e42b\",\"license\":\"MIT\"},\"contracts/solidity/testing/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc0d66cdc5470ad105dde9be35f4af26aa761b82c33a98defccf3f690ead0a495\",\"license\":\"MIT\"},\"contracts/solidity/testing/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc5940db78cbc7beb72edebf412e53dc80845b50a08767316dfa61e768fb6de4a\",\"license\":\"MIT\"},\"contracts/solidity/testing/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x37012a2803c5b59a18b826987198d7e72a2a558cdf426e2e21d44a5b89190115\",\"license\":\"MIT\"},\"contracts/solidity/testing/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/solidity/testing/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2d15296ca79a3ab4ec9476e0aa6f4fd27eb56cc192c67e372bff46f14ed72542\",\"license\":\"MIT\"},\"contracts/solidity/testing/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x35e258421ae206f3db37281cea70871b4c3553914734aa76139a41af60ac1abb\",\"license\":\"MIT\"},\"contracts/solidity/testing/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x57ee5f4c65fa0d2e023e97cb265784084412c700117cac90cfe29bf4bab3c7fc\",\"license\":\"MIT\"},\"contracts/solidity/util/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd38318b34491b4e11bab877e4dbafbf51111b69b09307b01ca952cf24e4229d0\",\"license\":\"MIT\"},\"contracts/solidity/util/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../testing/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xa0dc63480490e75aa2677bc8dc5dd056b4e8a4507254ed442e9c49140c1950db\",\"license\":\"MIT\"},\"contracts/solidity/util/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x2c09a41d3d53e0fdd19581192917c2eb40d687608af6e59c99132199af4add38\",\"license\":\"MIT\"},\"contracts/solidity/util/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../testing/IERC20.sol\\\";\\nimport \\\"../testing/IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(\\n            nonceAfter == nonceBefore + 1,\\n            \\\"SafeERC20: permit did not succeed\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x368f57bccda60b860e6c9a9207ef5f478fd188ff051868229793b1bff51f2562\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040526002805460ff191690553480156200001c57600080fd5b50604051620039c6380380620039c68339810160408190526200003f9162000162565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180556001600160601b0319606084811b821660c05283811b821660a05282901b1660805260408051630d43e8ad60e01b815290516001600160a01b03851691630d43e8ad916004808301926020929190829003018186803b158015620000e757600080fd5b505afa158015620000fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012291906200013c565b60601b6001600160601b03191660e05250620001ce915050565b6000602082840312156200014e578081fd5b81516200015b81620001b5565b9392505050565b60008060006060848603121562000177578182fd5b83516200018481620001b5565b60208501519093506200019781620001b5565b6040850151909250620001aa81620001b5565b809150509250925092565b6001600160a01b0381168114620001cb57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6137576200026f600039600081816101bd0152611c700152600081816102c9015261170d015260008181610370015281816106c00152818161074601528181610c5401528181610e81015281816111c60152818161124c0152818161153f015281816115c5015281816120d901526121920152600081816118f501526119d501526137576000f3fe6080604052600436106101485760003560e01c8063839006f2116100c0578063bc197c8111610074578063f2fde38b11610059578063f2fde38b1461043c578063f733dd7e1461045c578063fa4573601461046f57600080fd5b8063bc197c81146103b2578063f23a6e61146103f757600080fd5b80638da5cb5b116100a55780638da5cb5b14610340578063ad5c46481461035e578063bb23db721461039257600080fd5b8063839006f2146103005780638be3a0fb1461032057600080fd5b806336fa8b65116101175780635c975abb116100fc5780635c975abb1461029d5780635ee50f88146102b7578063715018a6146102eb57600080fd5b806336fa8b65146102545780634d3f078a1461028a57600080fd5b806301ffc9a71461015457806302329a29146101895780630d43e8ad146101ab578063150b7a02146101f757600080fd5b3661014f57005b600080fd5b34801561016057600080fd5b5061017461016f366004613171565b610482565b60405190151581526020015b60405180910390f35b34801561019557600080fd5b506101a96101a4366004613139565b6104eb565b005b3480156101b757600080fd5b506101df7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610180565b34801561020357600080fd5b5061023b610212366004612fd5565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516001600160e01b03199091168152602001610180565b34801561026057600080fd5b506101df61026f366004613199565b6003602052600090815260409020546001600160a01b031681565b6101a96102983660046133de565b61055d565b3480156102a957600080fd5b506002546101749060ff1681565b3480156102c357600080fd5b506101df7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102f757600080fd5b506101a9610872565b34801561030c57600080fd5b506101a961031b366004612ef3565b610923565b34801561032c57600080fd5b506101a961033b3660046132a2565b610ab8565b34801561034c57600080fd5b506000546001600160a01b03166101df565b34801561036a57600080fd5b506101df7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039e57600080fd5b506101a96103ad366004613355565b610cea565b3480156103be57600080fd5b5061023b6103cd366004612f2b565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b34801561040357600080fd5b5061023b61041236600461303f565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b34801561044857600080fd5b506101a9610457366004612ef3565b610f14565b6101a961046a3660046131c9565b611052565b6101a961047d3660046132a2565b61139f565b60006001600160e01b031982167f4e2312e00000000000000000000000000000000000000000000000000000000014806104e557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6000546001600160a01b0316331461054a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6002805460ff1916911515919091179055565b600260015414156105b05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610541565b600260018190555460ff1615806105d157506000546001600160a01b031633145b61060d5760405162461bcd60e51b815260206004820152600d60248201526c16985c081a5cc81c185d5cd959609a1b6044820152606401610541565b6001600160a01b0381161580159061062e57506001600160a01b0381163014155b61066e5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610541565b600086116106be5760405162461bcd60e51b815260206004820152601060248201527f4d7573742073656e6420616d6f756e74000000000000000000000000000000006044820152606401610541565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561071957600080fd5b505af115801561072d573d6000803e3d6000fd5b5050505050600061073d886116c2565b9050600061076d7f0000000000000000000000000000000000000000000000000000000000000000838787611849565b905061078188670de0b6b3a764000061366c565b8110156107d05760405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e74207661756c7420746f6b656e73000000000000006044820152606401610541565b6108108989898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611b2e915050565b60408051898152602081018390526001600160a01b0385168183015290517ff7735c8cb2a65788ca663fc8415b7c6a66cd6847d58346d8334e8d52a599d3df9181900360600190a1610863826001611bc3565b50506001805550505050505050565b6000546001600160a01b031633146108cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610541565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b0316331461097d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610541565b6001600160a01b038116610a2757604051600090339047908381818185875af1925050503d80600081146109cd576040519150601f19603f3d011682016040523d82523d6000602084013e6109d2565b606091505b5050905080610a235760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75650000006044820152606401610541565b5050565b6040516370a0823160e01b8152306004820152610ab59033906001600160a01b038416906370a082319060240160206040518083038186803b158015610a6c57600080fd5b505afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa491906131b1565b6001600160a01b0384169190611d42565b50565b60026001541415610b0b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610541565b600260018190555460ff161580610b2c57506000546001600160a01b031633145b610b685760405162461bcd60e51b815260206004820152600d60248201526c16985c081a5cc81c185d5cd959609a1b6044820152606401610541565b6001600160a01b03811615801590610b8957506001600160a01b0381163014155b610bc95760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610541565b6000610bd788888888611d99565b9150506000610c4a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c918291850190849080828437600092019190915250611eea92505050565b90506000610c7a827f00000000000000000000000000000000000000000000000000000000000000008888611849565b9050610c85846120c1565b5060408051848152602081018390526001600160a01b0386168183015290517f1cdb5ee3c47e1a706ac452b89698e5e3f2ff4f835ca72dde8936d0f4fcf37d819181900360600190a1610cd9826000611bc3565b505060018055505050505050505050565b60026001541415610d3d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610541565b600260018190555460ff161580610d5e57506000546001600160a01b031633145b610d9a5760405162461bcd60e51b815260206004820152600d60248201526c16985c081a5cc81c185d5cd959609a1b6044820152606401610541565b6001600160a01b03811615801590610dbb57506001600160a01b0381163014155b610dfb5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610541565b83610e385760405162461bcd60e51b815260206004820152600d60248201526c4d7573742073656e642049447360981b6044820152606401610541565b6000610e77878787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506122a092505050565b90506000610ea7827f00000000000000000000000000000000000000000000000000000000000000008787611849565b9050610eb2836120c1565b5060408051878152602081018390526001600160a01b0385168183015290517f1cdb5ee3c47e1a706ac452b89698e5e3f2ff4f835ca72dde8936d0f4fcf37d819181900360600190a1610f06826000611bc3565b505060018055505050505050565b6000546001600160a01b03163314610f6e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610541565b6001600160a01b038116610fea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610541565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600260015414156110a55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610541565b600260018190555460ff1615806110c657506000546001600160a01b031633145b6111025760405162461bcd60e51b815260206004820152600d60248201526c16985c081a5cc81c185d5cd959609a1b6044820152606401610541565b6001600160a01b0381161580159061112357506001600160a01b0381163014155b6111635760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610541565b600034116111b35760405162461bcd60e51b815260206004820152600e60248201527f496e76616c696420616d6f756e740000000000000000000000000000000000006044820152606401610541565b60006111c18a8a8a8a611d99565b9150507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561121f57600080fd5b505af1158015611233573d6000803e3d6000fd5b505050505060006112438c6116c2565b905060006112737f0000000000000000000000000000000000000000000000000000000000000000838888611849565b90506113388d8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b9250612452915050565b5060408051848152602081018390526001600160a01b0386168183015290517f7af2bc3f8ec800c569b6555feaf16589d96a9d04a49d1645fd456d75fa0b372b9181900360600190a161138c826001611bc3565b5050600180555050505050505050505050565b600260015414156113f25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610541565b600260018190555460ff16158061141357506000546001600160a01b031633145b61144f5760405162461bcd60e51b815260206004820152600d60248201526c16985c081a5cc81c185d5cd959609a1b6044820152606401610541565b6001600160a01b0381161580159061147057506001600160a01b0381163014155b6114b05760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610541565b856114ed5760405162461bcd60e51b815260206004820152600d60248201526c4d7573742073656e642049447360981b6044820152606401610541565b6000341161153d5760405162461bcd60e51b815260206004820152600e60248201527f496e76616c696420616d6f756e740000000000000000000000000000000000006044820152606401610541565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561159857600080fd5b505af11580156115ac573d6000803e3d6000fd5b505050505060006115bc896116c2565b905060006115ec7f0000000000000000000000000000000000000000000000000000000000000000838787611849565b905061165e8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c918291850190849080828437600092019190915250899250612631915050565b5060408051898152602081018390526001600160a01b0385168183015290517f7af2bc3f8ec800c569b6555feaf16589d96a9d04a49d1645fd456d75fa0b372b9181900360600190a16116b2826001611bc3565b5050600180555050505050505050565b6000818152600360205260408120546001600160a01b03166117c9576040517f81a36fb6000000000000000000000000000000000000000000000000000000008152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906381a36fb69060240160206040518083038186803b15801561175757600080fd5b505afa15801561176b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178f9190612f0f565b6000838152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555b6000828152600360205260409020546001600160a01b031661182d5760405162461bcd60e51b815260206004820152601460248201527f5661756c7420646f6573206e6f742065786973740000000000000000000000006044820152606401610541565b506000908152600360205260409020546001600160a01b031690565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a082319060240160206040518083038186803b15801561188d57600080fd5b505afa1580156118a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c591906131b1565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301529192509087169063095ea7b390604401602060405180830381600087803b15801561194d57600080fd5b505af1158015611961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119859190613155565b6119d15760405162461bcd60e51b815260206004820152601a60248201527f556e61626c6520746f20617070726f766520636f6e74726163740000000000006044820152606401610541565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168585604051611a0d9291906134ac565b6000604051808303816000865af19150503d8060008114611a4a576040519150601f19603f3d011682016040523d82523d6000602084013e611a4f565b606091505b5050905080611aa05760405162461bcd60e51b815260206004820152601060248201527f535741505f43414c4c5f4641494c4544000000000000000000000000000000006044820152606401610541565b6040516370a0823160e01b815230600482015282906001600160a01b038816906370a082319060240160206040518083038186803b158015611ae157600080fd5b505afa158015611af5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1991906131b1565b611b23919061368b565b979650505050505050565b611b37846116c2565b6001600160a01b0316639d54def68484846040518463ffffffff1660e01b8152600401611b66939291906135e5565b600060405180830381600087803b158015611b8057600080fd5b505af1158015611b94573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bbc91908101906130a6565b5050505050565b60008115611bd757611bd4336120c1565b90505b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b158015611c1957600080fd5b505afa158015611c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5191906131b1565b90508015611cfd5760405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905285169063a9059cbb90604401602060405180830381600087803b158015611cc357600080fd5b505af1158015611cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfb9190613155565b505b6040805183815260208101839052338183015290517fd9b066a634638844b3b4701f7bfb9d8791265979e46666f7d7bc04cf4c06c9709181900360600190a150505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611d949084906127d1565b505050565b82600081611dd95760405162461bcd60e51b815260206004820152600d60248201526c4d7573742073656e642049447360981b6044820152606401610541565b82821115611e295760405162461bcd60e51b815260206004820152601f60248201527f4d75737420646566696e6520616d6f756e747320616761696e737420494473006044820152606401610541565b60005b82811015611ee0576000858583818110611e5657634e487b7160e01b600052603260045260246000fd5b9050602002013511611eaa5760405162461bcd60e51b815260206004820152601360248201527f496e76616c6964203131353520616d6f756e74000000000000000000000000006044820152606401610541565b848482818110611eca57634e487b7160e01b600052603260045260246000fd5b9050602002013582019150806001019050611e2c565b5094509492505050565b600080611ef6856116c2565b90506000816001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f3357600080fd5b505afa158015611f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6b9190612f0f565b604051631759616b60e11b81529091506001600160a01b03821690632eb2c2d690611fa090339030908a908a906004016134d8565b600060405180830381600087803b158015611fba57600080fd5b505af1158015611fce573d6000803e3d6000fd5b505060405163a22cb46560e01b81526001600160a01b038581166004830152600160248301528416925063a22cb4659150604401600060405180830381600087803b15801561201c57600080fd5b505af1158015612030573d6000803e3d6000fd5b5050604051630f57464360e21b81526001600160a01b0385169250633d5d190c91506120629088908890600401613530565b602060405180830381600087803b15801561207c57600080fd5b505af1158015612090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b491906131b1565b50909150505b9392505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561212357600080fd5b505afa158015612137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215b91906131b1565b9050801561229b576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156121de57600080fd5b505af11580156121f2573d6000803e3d6000fd5b505050506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612243576040519150601f19603f3d011682016040523d82523d6000602084013e612248565b606091505b50509050806122995760405162461bcd60e51b815260206004820152601d60248201527f556e61626c6520746f2073656e6420756e7772617070656420574554480000006044820152606401610541565b505b919050565b6000806122ac846116c2565b90506000816001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122e957600080fd5b505afa1580156122fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123219190612f0f565b845190915060005b818110156123c2576123638387838151811061235557634e487b7160e01b600052603260045260246000fd5b6020026020010151866128b6565b6001600160a01b03831673b47e3cd837ddf8e4c57f05d70ab865de6e193bbb14156123ba576123ba838783815181106123ac57634e487b7160e01b600052603260045260246000fd5b602002602001015186612b61565b600101612329565b50604051630f57464360e21b81526060906001600160a01b03851690633d5d190c906123f49089908590600401613530565b602060405180830381600087803b15801561240e57600080fd5b505af1158015612422573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244691906131b1565b50929695505050505050565b60008061245e876116c2565b90506000816001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561249b57600080fd5b505afa1580156124af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d39190612f0f565b604051631759616b60e11b81529091506001600160a01b03821690632eb2c2d69061250890339030908c908c906004016134d8565b600060405180830381600087803b15801561252257600080fd5b505af1158015612536573d6000803e3d6000fd5b505060405163a22cb46560e01b81526001600160a01b038581166004830152600160248301528416925063a22cb4659150604401600060405180830381600087803b15801561258457600080fd5b505af1158015612598573d6000803e3d6000fd5b5050604051632321420560e21b81526001600160a01b0385169250638c85081491506125ce908a908a908a908a9060040161355e565b600060405180830381600087803b1580156125e857600080fd5b505af11580156125fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261262491908101906130a6565b5090979650505050505050565b60008061263d866116c2565b90506000816001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561267a57600080fd5b505afa15801561268e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b29190612f0f565b865190915060005b81811015612737576126e68389838151811061235557634e487b7160e01b600052603260045260246000fd5b6001600160a01b03831673b47e3cd837ddf8e4c57f05d70ab865de6e193bbb141561272f5761272f838983815181106123ac57634e487b7160e01b600052603260045260246000fd5b6001016126ba565b50604051632321420560e21b81526060906001600160a01b03851690638c8508149061276d908b9085908c908c9060040161355e565b600060405180830381600087803b15801561278757600080fd5b505af115801561279b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127c391908101906130a6565b509298975050505050505050565b6000612826826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612c129092919063ffffffff16565b805190915015611d9457808060200190518101906128449190613155565b611d945760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610541565b60606001600160a01b03841673b47e3cd837ddf8e4c57f05d70ab865de6e193bbb1415612a6e576000836040516024016128f291815260200190565b60408051601f198184030181529181526020820180516001600160e01b03167f58178168000000000000000000000000000000000000000000000000000000001790525190915060009081906001600160a01b038816906129549085906134bc565b600060405180830381855afa9150503d806000811461298f576040519150601f19603f3d011682016040523d82523d6000602084013e612994565b606091505b50915091506000818060200190518101906129af9190612f0f565b90508280156129c657506001600160a01b03811633145b612a125760405162461bcd60e51b815260206004820152601160248201527f4e6f7420746865204e4654206f776e65720000000000000000000000000000006044820152606401610541565b6040516024810188905260440160408051601f198184030181529190526020810180516001600160e01b03167f8264fe98000000000000000000000000000000000000000000000000000000001790529450612ad69350505050565b6040513360248201526001600160a01b03831660448201526064810184905260840160408051601f198184030181529190526020810180516001600160e01b03167f42842e0e0000000000000000000000000000000000000000000000000000000017905290505b600080856001600160a01b031683604051612af191906134bc565b6000604051808303816000865af19150503d8060008114612b2e576040519150601f19603f3d011682016040523d82523d6000602084013e612b33565b606091505b5091509150818190612b585760405162461bcd60e51b815260040161054191906135b2565b50505050505050565b6001600160a01b03831673b47e3cd837ddf8e4c57f05d70ab865de6e193bbb14612b8a57505050565b604051602481018390526000604482018190526001600160a01b03831660648301529060840160408051601f198184030181529181526020820180516001600160e01b03167fbf31196f000000000000000000000000000000000000000000000000000000001790525190915060009081906001600160a01b03871690612af19085906134bc565b6060612c218484600085612c29565b949350505050565b606082471015612ca15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610541565b843b612cef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610541565b600080866001600160a01b03168587604051612d0b91906134bc565b60006040518083038185875af1925050503d8060008114612d48576040519150601f19603f3d011682016040523d82523d6000602084013e612d4d565b606091505b5091509150611b2382828660608315612d675750816120ba565b825115612d775782518084602001fd5b8160405162461bcd60e51b815260040161054191906135b2565b803561229b816136fe565b60008083601f840112612dad578182fd5b50813567ffffffffffffffff811115612dc4578182fd5b6020830191508360208260051b8501011115612ddf57600080fd5b9250929050565b600082601f830112612df6578081fd5b81356020612e0b612e0683613648565b613617565b80838252828201915082860187848660051b8901011115612e2a578586fd5b855b8581101561262457813584529284019290840190600101612e2c565b60008083601f840112612e59578182fd5b50813567ffffffffffffffff811115612e70578182fd5b602083019150836020828501011115612ddf57600080fd5b600082601f830112612e98578081fd5b813567ffffffffffffffff811115612eb257612eb26136e8565b612ec5601f8201601f1916602001613617565b818152846020838601011115612ed9578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612f04578081fd5b81356120ba816136fe565b600060208284031215612f20578081fd5b81516120ba816136fe565b600080600080600060a08688031215612f42578081fd5b8535612f4d816136fe565b94506020860135612f5d816136fe565b9350604086013567ffffffffffffffff80821115612f79578283fd5b612f8589838a01612de6565b94506060880135915080821115612f9a578283fd5b612fa689838a01612de6565b93506080880135915080821115612fbb578283fd5b50612fc888828901612e88565b9150509295509295909350565b60008060008060808587031215612fea578384fd5b8435612ff5816136fe565b93506020850135613005816136fe565b925060408501359150606085013567ffffffffffffffff811115613027578182fd5b61303387828801612e88565b91505092959194509250565b600080600080600060a08688031215613056578081fd5b8535613061816136fe565b94506020860135613071816136fe565b93506040860135925060608601359150608086013567ffffffffffffffff81111561309a578182fd5b612fc888828901612e88565b600060208083850312156130b8578182fd5b825167ffffffffffffffff8111156130ce578283fd5b8301601f810185136130de578283fd5b80516130ec612e0682613648565b80828252848201915084840188868560051b870101111561310b578687fd5b8694505b8385101561312d57805183526001949094019391850191850161310f565b50979650505050505050565b60006020828403121561314a578081fd5b81356120ba81613713565b600060208284031215613166578081fd5b81516120ba81613713565b600060208284031215613182578081fd5b81356001600160e01b0319811681146120ba578182fd5b6000602082840312156131aa578081fd5b5035919050565b6000602082840312156131c2578081fd5b5051919050565b60008060008060008060008060008060c08b8d0312156131e7578788fd5b8a35995060208b013567ffffffffffffffff8082111561320557898afd5b6132118e838f01612d9c565b909b50995060408d0135915080821115613229578687fd5b6132358e838f01612d9c565b909950975060608d013591508082111561324d578687fd5b6132598e838f01612d9c565b909750955060808d0135915080821115613271578485fd5b5061327e8d828e01612e48565b9094509250613291905060a08c01612d91565b90509295989b9194979a5092959850565b60008060008060008060008060a0898b0312156132bd578182fd5b88359750602089013567ffffffffffffffff808211156132db578384fd5b6132e78c838d01612d9c565b909950975060408b01359150808211156132ff578384fd5b61330b8c838d01612d9c565b909750955060608b0135915080821115613323578384fd5b506133308b828c01612e48565b9094509250506080890135613344816136fe565b809150509295985092959890939650565b6000806000806000806080878903121561336d578384fd5b86359550602087013567ffffffffffffffff8082111561338b578586fd5b6133978a838b01612d9c565b909750955060408901359150808211156133af578384fd5b506133bc89828a01612e48565b90945092505060608701356133d0816136fe565b809150509295509295509295565b600080600080600080600060a0888a0312156133f8578081fd5b8735965060208801359550604088013567ffffffffffffffff8082111561341d578283fd5b6134298b838c01612d9c565b909750955060608a0135915080821115613441578283fd5b5061344e8a828b01612e48565b9094509250506080880135613462816136fe565b8091505092959891949750929550565b6000815180845260208085019450808401835b838110156134a157815187529582019590820190600101613485565b509495945050505050565b8183823760009101908152919050565b600082516134ce8184602087016136a2565b9190910192915050565b60006001600160a01b03808716835280861660208401525060a0604083015261350460a0830185613472565b82810360608401526135168185613472565b838103608090940193909352508152602001949350505050565b6040815260006135436040830185613472565b82810360208401526135558185613472565b95945050505050565b6080815260006135716080830187613472565b82810360208401526135838187613472565b905082810360408401526135978186613472565b9150506001600160a01b038316606083015295945050505050565b60208152600082518060208401526135d18160408501602087016136a2565b601f01601f19169190910160400192915050565b8381526060602082015260006135fe6060830185613472565b90506001600160a01b0383166040830152949350505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613640576136406136e8565b604052919050565b600067ffffffffffffffff821115613662576136626136e8565b5060051b60200190565b6000816000190483118215151615613686576136866136d2565b500290565b60008282101561369d5761369d6136d2565b500390565b60005b838110156136bd5781810151838201526020016136a5565b838111156136cc576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ab557600080fd5b8015158114610ab557600080fdfea26469706673582212203b79ae78e1c7bd95a2c68a75d928b0525eddd473282869477eeb64391b367d7064736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101485760003560e01c8063839006f2116100c0578063bc197c8111610074578063f2fde38b11610059578063f2fde38b1461043c578063f733dd7e1461045c578063fa4573601461046f57600080fd5b8063bc197c81146103b2578063f23a6e61146103f757600080fd5b80638da5cb5b116100a55780638da5cb5b14610340578063ad5c46481461035e578063bb23db721461039257600080fd5b8063839006f2146103005780638be3a0fb1461032057600080fd5b806336fa8b65116101175780635c975abb116100fc5780635c975abb1461029d5780635ee50f88146102b7578063715018a6146102eb57600080fd5b806336fa8b65146102545780634d3f078a1461028a57600080fd5b806301ffc9a71461015457806302329a29146101895780630d43e8ad146101ab578063150b7a02146101f757600080fd5b3661014f57005b600080fd5b34801561016057600080fd5b5061017461016f366004613171565b610482565b60405190151581526020015b60405180910390f35b34801561019557600080fd5b506101a96101a4366004613139565b6104eb565b005b3480156101b757600080fd5b506101df7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610180565b34801561020357600080fd5b5061023b610212366004612fd5565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516001600160e01b03199091168152602001610180565b34801561026057600080fd5b506101df61026f366004613199565b6003602052600090815260409020546001600160a01b031681565b6101a96102983660046133de565b61055d565b3480156102a957600080fd5b506002546101749060ff1681565b3480156102c357600080fd5b506101df7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102f757600080fd5b506101a9610872565b34801561030c57600080fd5b506101a961031b366004612ef3565b610923565b34801561032c57600080fd5b506101a961033b3660046132a2565b610ab8565b34801561034c57600080fd5b506000546001600160a01b03166101df565b34801561036a57600080fd5b506101df7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039e57600080fd5b506101a96103ad366004613355565b610cea565b3480156103be57600080fd5b5061023b6103cd366004612f2b565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b34801561040357600080fd5b5061023b61041236600461303f565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b34801561044857600080fd5b506101a9610457366004612ef3565b610f14565b6101a961046a3660046131c9565b611052565b6101a961047d3660046132a2565b61139f565b60006001600160e01b031982167f4e2312e00000000000000000000000000000000000000000000000000000000014806104e557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6000546001600160a01b0316331461054a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6002805460ff1916911515919091179055565b600260015414156105b05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610541565b600260018190555460ff1615806105d157506000546001600160a01b031633145b61060d5760405162461bcd60e51b815260206004820152600d60248201526c16985c081a5cc81c185d5cd959609a1b6044820152606401610541565b6001600160a01b0381161580159061062e57506001600160a01b0381163014155b61066e5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610541565b600086116106be5760405162461bcd60e51b815260206004820152601060248201527f4d7573742073656e6420616d6f756e74000000000000000000000000000000006044820152606401610541565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561071957600080fd5b505af115801561072d573d6000803e3d6000fd5b5050505050600061073d886116c2565b9050600061076d7f0000000000000000000000000000000000000000000000000000000000000000838787611849565b905061078188670de0b6b3a764000061366c565b8110156107d05760405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e74207661756c7420746f6b656e73000000000000006044820152606401610541565b6108108989898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611b2e915050565b60408051898152602081018390526001600160a01b0385168183015290517ff7735c8cb2a65788ca663fc8415b7c6a66cd6847d58346d8334e8d52a599d3df9181900360600190a1610863826001611bc3565b50506001805550505050505050565b6000546001600160a01b031633146108cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610541565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b0316331461097d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610541565b6001600160a01b038116610a2757604051600090339047908381818185875af1925050503d80600081146109cd576040519150601f19603f3d011682016040523d82523d6000602084013e6109d2565b606091505b5050905080610a235760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75650000006044820152606401610541565b5050565b6040516370a0823160e01b8152306004820152610ab59033906001600160a01b038416906370a082319060240160206040518083038186803b158015610a6c57600080fd5b505afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa491906131b1565b6001600160a01b0384169190611d42565b50565b60026001541415610b0b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610541565b600260018190555460ff161580610b2c57506000546001600160a01b031633145b610b685760405162461bcd60e51b815260206004820152600d60248201526c16985c081a5cc81c185d5cd959609a1b6044820152606401610541565b6001600160a01b03811615801590610b8957506001600160a01b0381163014155b610bc95760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610541565b6000610bd788888888611d99565b9150506000610c4a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c918291850190849080828437600092019190915250611eea92505050565b90506000610c7a827f00000000000000000000000000000000000000000000000000000000000000008888611849565b9050610c85846120c1565b5060408051848152602081018390526001600160a01b0386168183015290517f1cdb5ee3c47e1a706ac452b89698e5e3f2ff4f835ca72dde8936d0f4fcf37d819181900360600190a1610cd9826000611bc3565b505060018055505050505050505050565b60026001541415610d3d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610541565b600260018190555460ff161580610d5e57506000546001600160a01b031633145b610d9a5760405162461bcd60e51b815260206004820152600d60248201526c16985c081a5cc81c185d5cd959609a1b6044820152606401610541565b6001600160a01b03811615801590610dbb57506001600160a01b0381163014155b610dfb5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610541565b83610e385760405162461bcd60e51b815260206004820152600d60248201526c4d7573742073656e642049447360981b6044820152606401610541565b6000610e77878787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506122a092505050565b90506000610ea7827f00000000000000000000000000000000000000000000000000000000000000008787611849565b9050610eb2836120c1565b5060408051878152602081018390526001600160a01b0385168183015290517f1cdb5ee3c47e1a706ac452b89698e5e3f2ff4f835ca72dde8936d0f4fcf37d819181900360600190a1610f06826000611bc3565b505060018055505050505050565b6000546001600160a01b03163314610f6e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610541565b6001600160a01b038116610fea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610541565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600260015414156110a55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610541565b600260018190555460ff1615806110c657506000546001600160a01b031633145b6111025760405162461bcd60e51b815260206004820152600d60248201526c16985c081a5cc81c185d5cd959609a1b6044820152606401610541565b6001600160a01b0381161580159061112357506001600160a01b0381163014155b6111635760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610541565b600034116111b35760405162461bcd60e51b815260206004820152600e60248201527f496e76616c696420616d6f756e740000000000000000000000000000000000006044820152606401610541565b60006111c18a8a8a8a611d99565b9150507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561121f57600080fd5b505af1158015611233573d6000803e3d6000fd5b505050505060006112438c6116c2565b905060006112737f0000000000000000000000000000000000000000000000000000000000000000838888611849565b90506113388d8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b9250612452915050565b5060408051848152602081018390526001600160a01b0386168183015290517f7af2bc3f8ec800c569b6555feaf16589d96a9d04a49d1645fd456d75fa0b372b9181900360600190a161138c826001611bc3565b5050600180555050505050505050505050565b600260015414156113f25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610541565b600260018190555460ff16158061141357506000546001600160a01b031633145b61144f5760405162461bcd60e51b815260206004820152600d60248201526c16985c081a5cc81c185d5cd959609a1b6044820152606401610541565b6001600160a01b0381161580159061147057506001600160a01b0381163014155b6114b05760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610541565b856114ed5760405162461bcd60e51b815260206004820152600d60248201526c4d7573742073656e642049447360981b6044820152606401610541565b6000341161153d5760405162461bcd60e51b815260206004820152600e60248201527f496e76616c696420616d6f756e740000000000000000000000000000000000006044820152606401610541565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561159857600080fd5b505af11580156115ac573d6000803e3d6000fd5b505050505060006115bc896116c2565b905060006115ec7f0000000000000000000000000000000000000000000000000000000000000000838787611849565b905061165e8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c918291850190849080828437600092019190915250899250612631915050565b5060408051898152602081018390526001600160a01b0385168183015290517f7af2bc3f8ec800c569b6555feaf16589d96a9d04a49d1645fd456d75fa0b372b9181900360600190a16116b2826001611bc3565b5050600180555050505050505050565b6000818152600360205260408120546001600160a01b03166117c9576040517f81a36fb6000000000000000000000000000000000000000000000000000000008152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906381a36fb69060240160206040518083038186803b15801561175757600080fd5b505afa15801561176b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178f9190612f0f565b6000838152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555b6000828152600360205260409020546001600160a01b031661182d5760405162461bcd60e51b815260206004820152601460248201527f5661756c7420646f6573206e6f742065786973740000000000000000000000006044820152606401610541565b506000908152600360205260409020546001600160a01b031690565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a082319060240160206040518083038186803b15801561188d57600080fd5b505afa1580156118a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c591906131b1565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301529192509087169063095ea7b390604401602060405180830381600087803b15801561194d57600080fd5b505af1158015611961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119859190613155565b6119d15760405162461bcd60e51b815260206004820152601a60248201527f556e61626c6520746f20617070726f766520636f6e74726163740000000000006044820152606401610541565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168585604051611a0d9291906134ac565b6000604051808303816000865af19150503d8060008114611a4a576040519150601f19603f3d011682016040523d82523d6000602084013e611a4f565b606091505b5050905080611aa05760405162461bcd60e51b815260206004820152601060248201527f535741505f43414c4c5f4641494c4544000000000000000000000000000000006044820152606401610541565b6040516370a0823160e01b815230600482015282906001600160a01b038816906370a082319060240160206040518083038186803b158015611ae157600080fd5b505afa158015611af5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1991906131b1565b611b23919061368b565b979650505050505050565b611b37846116c2565b6001600160a01b0316639d54def68484846040518463ffffffff1660e01b8152600401611b66939291906135e5565b600060405180830381600087803b158015611b8057600080fd5b505af1158015611b94573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bbc91908101906130a6565b5050505050565b60008115611bd757611bd4336120c1565b90505b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b158015611c1957600080fd5b505afa158015611c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5191906131b1565b90508015611cfd5760405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905285169063a9059cbb90604401602060405180830381600087803b158015611cc357600080fd5b505af1158015611cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfb9190613155565b505b6040805183815260208101839052338183015290517fd9b066a634638844b3b4701f7bfb9d8791265979e46666f7d7bc04cf4c06c9709181900360600190a150505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611d949084906127d1565b505050565b82600081611dd95760405162461bcd60e51b815260206004820152600d60248201526c4d7573742073656e642049447360981b6044820152606401610541565b82821115611e295760405162461bcd60e51b815260206004820152601f60248201527f4d75737420646566696e6520616d6f756e747320616761696e737420494473006044820152606401610541565b60005b82811015611ee0576000858583818110611e5657634e487b7160e01b600052603260045260246000fd5b9050602002013511611eaa5760405162461bcd60e51b815260206004820152601360248201527f496e76616c6964203131353520616d6f756e74000000000000000000000000006044820152606401610541565b848482818110611eca57634e487b7160e01b600052603260045260246000fd5b9050602002013582019150806001019050611e2c565b5094509492505050565b600080611ef6856116c2565b90506000816001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f3357600080fd5b505afa158015611f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6b9190612f0f565b604051631759616b60e11b81529091506001600160a01b03821690632eb2c2d690611fa090339030908a908a906004016134d8565b600060405180830381600087803b158015611fba57600080fd5b505af1158015611fce573d6000803e3d6000fd5b505060405163a22cb46560e01b81526001600160a01b038581166004830152600160248301528416925063a22cb4659150604401600060405180830381600087803b15801561201c57600080fd5b505af1158015612030573d6000803e3d6000fd5b5050604051630f57464360e21b81526001600160a01b0385169250633d5d190c91506120629088908890600401613530565b602060405180830381600087803b15801561207c57600080fd5b505af1158015612090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b491906131b1565b50909150505b9392505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561212357600080fd5b505afa158015612137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215b91906131b1565b9050801561229b576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156121de57600080fd5b505af11580156121f2573d6000803e3d6000fd5b505050506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612243576040519150601f19603f3d011682016040523d82523d6000602084013e612248565b606091505b50509050806122995760405162461bcd60e51b815260206004820152601d60248201527f556e61626c6520746f2073656e6420756e7772617070656420574554480000006044820152606401610541565b505b919050565b6000806122ac846116c2565b90506000816001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122e957600080fd5b505afa1580156122fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123219190612f0f565b845190915060005b818110156123c2576123638387838151811061235557634e487b7160e01b600052603260045260246000fd5b6020026020010151866128b6565b6001600160a01b03831673b47e3cd837ddf8e4c57f05d70ab865de6e193bbb14156123ba576123ba838783815181106123ac57634e487b7160e01b600052603260045260246000fd5b602002602001015186612b61565b600101612329565b50604051630f57464360e21b81526060906001600160a01b03851690633d5d190c906123f49089908590600401613530565b602060405180830381600087803b15801561240e57600080fd5b505af1158015612422573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244691906131b1565b50929695505050505050565b60008061245e876116c2565b90506000816001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561249b57600080fd5b505afa1580156124af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d39190612f0f565b604051631759616b60e11b81529091506001600160a01b03821690632eb2c2d69061250890339030908c908c906004016134d8565b600060405180830381600087803b15801561252257600080fd5b505af1158015612536573d6000803e3d6000fd5b505060405163a22cb46560e01b81526001600160a01b038581166004830152600160248301528416925063a22cb4659150604401600060405180830381600087803b15801561258457600080fd5b505af1158015612598573d6000803e3d6000fd5b5050604051632321420560e21b81526001600160a01b0385169250638c85081491506125ce908a908a908a908a9060040161355e565b600060405180830381600087803b1580156125e857600080fd5b505af11580156125fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261262491908101906130a6565b5090979650505050505050565b60008061263d866116c2565b90506000816001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561267a57600080fd5b505afa15801561268e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b29190612f0f565b865190915060005b81811015612737576126e68389838151811061235557634e487b7160e01b600052603260045260246000fd5b6001600160a01b03831673b47e3cd837ddf8e4c57f05d70ab865de6e193bbb141561272f5761272f838983815181106123ac57634e487b7160e01b600052603260045260246000fd5b6001016126ba565b50604051632321420560e21b81526060906001600160a01b03851690638c8508149061276d908b9085908c908c9060040161355e565b600060405180830381600087803b15801561278757600080fd5b505af115801561279b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127c391908101906130a6565b509298975050505050505050565b6000612826826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612c129092919063ffffffff16565b805190915015611d9457808060200190518101906128449190613155565b611d945760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610541565b60606001600160a01b03841673b47e3cd837ddf8e4c57f05d70ab865de6e193bbb1415612a6e576000836040516024016128f291815260200190565b60408051601f198184030181529181526020820180516001600160e01b03167f58178168000000000000000000000000000000000000000000000000000000001790525190915060009081906001600160a01b038816906129549085906134bc565b600060405180830381855afa9150503d806000811461298f576040519150601f19603f3d011682016040523d82523d6000602084013e612994565b606091505b50915091506000818060200190518101906129af9190612f0f565b90508280156129c657506001600160a01b03811633145b612a125760405162461bcd60e51b815260206004820152601160248201527f4e6f7420746865204e4654206f776e65720000000000000000000000000000006044820152606401610541565b6040516024810188905260440160408051601f198184030181529190526020810180516001600160e01b03167f8264fe98000000000000000000000000000000000000000000000000000000001790529450612ad69350505050565b6040513360248201526001600160a01b03831660448201526064810184905260840160408051601f198184030181529190526020810180516001600160e01b03167f42842e0e0000000000000000000000000000000000000000000000000000000017905290505b600080856001600160a01b031683604051612af191906134bc565b6000604051808303816000865af19150503d8060008114612b2e576040519150601f19603f3d011682016040523d82523d6000602084013e612b33565b606091505b5091509150818190612b585760405162461bcd60e51b815260040161054191906135b2565b50505050505050565b6001600160a01b03831673b47e3cd837ddf8e4c57f05d70ab865de6e193bbb14612b8a57505050565b604051602481018390526000604482018190526001600160a01b03831660648301529060840160408051601f198184030181529181526020820180516001600160e01b03167fbf31196f000000000000000000000000000000000000000000000000000000001790525190915060009081906001600160a01b03871690612af19085906134bc565b6060612c218484600085612c29565b949350505050565b606082471015612ca15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610541565b843b612cef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610541565b600080866001600160a01b03168587604051612d0b91906134bc565b60006040518083038185875af1925050503d8060008114612d48576040519150601f19603f3d011682016040523d82523d6000602084013e612d4d565b606091505b5091509150611b2382828660608315612d675750816120ba565b825115612d775782518084602001fd5b8160405162461bcd60e51b815260040161054191906135b2565b803561229b816136fe565b60008083601f840112612dad578182fd5b50813567ffffffffffffffff811115612dc4578182fd5b6020830191508360208260051b8501011115612ddf57600080fd5b9250929050565b600082601f830112612df6578081fd5b81356020612e0b612e0683613648565b613617565b80838252828201915082860187848660051b8901011115612e2a578586fd5b855b8581101561262457813584529284019290840190600101612e2c565b60008083601f840112612e59578182fd5b50813567ffffffffffffffff811115612e70578182fd5b602083019150836020828501011115612ddf57600080fd5b600082601f830112612e98578081fd5b813567ffffffffffffffff811115612eb257612eb26136e8565b612ec5601f8201601f1916602001613617565b818152846020838601011115612ed9578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612f04578081fd5b81356120ba816136fe565b600060208284031215612f20578081fd5b81516120ba816136fe565b600080600080600060a08688031215612f42578081fd5b8535612f4d816136fe565b94506020860135612f5d816136fe565b9350604086013567ffffffffffffffff80821115612f79578283fd5b612f8589838a01612de6565b94506060880135915080821115612f9a578283fd5b612fa689838a01612de6565b93506080880135915080821115612fbb578283fd5b50612fc888828901612e88565b9150509295509295909350565b60008060008060808587031215612fea578384fd5b8435612ff5816136fe565b93506020850135613005816136fe565b925060408501359150606085013567ffffffffffffffff811115613027578182fd5b61303387828801612e88565b91505092959194509250565b600080600080600060a08688031215613056578081fd5b8535613061816136fe565b94506020860135613071816136fe565b93506040860135925060608601359150608086013567ffffffffffffffff81111561309a578182fd5b612fc888828901612e88565b600060208083850312156130b8578182fd5b825167ffffffffffffffff8111156130ce578283fd5b8301601f810185136130de578283fd5b80516130ec612e0682613648565b80828252848201915084840188868560051b870101111561310b578687fd5b8694505b8385101561312d57805183526001949094019391850191850161310f565b50979650505050505050565b60006020828403121561314a578081fd5b81356120ba81613713565b600060208284031215613166578081fd5b81516120ba81613713565b600060208284031215613182578081fd5b81356001600160e01b0319811681146120ba578182fd5b6000602082840312156131aa578081fd5b5035919050565b6000602082840312156131c2578081fd5b5051919050565b60008060008060008060008060008060c08b8d0312156131e7578788fd5b8a35995060208b013567ffffffffffffffff8082111561320557898afd5b6132118e838f01612d9c565b909b50995060408d0135915080821115613229578687fd5b6132358e838f01612d9c565b909950975060608d013591508082111561324d578687fd5b6132598e838f01612d9c565b909750955060808d0135915080821115613271578485fd5b5061327e8d828e01612e48565b9094509250613291905060a08c01612d91565b90509295989b9194979a5092959850565b60008060008060008060008060a0898b0312156132bd578182fd5b88359750602089013567ffffffffffffffff808211156132db578384fd5b6132e78c838d01612d9c565b909950975060408b01359150808211156132ff578384fd5b61330b8c838d01612d9c565b909750955060608b0135915080821115613323578384fd5b506133308b828c01612e48565b9094509250506080890135613344816136fe565b809150509295985092959890939650565b6000806000806000806080878903121561336d578384fd5b86359550602087013567ffffffffffffffff8082111561338b578586fd5b6133978a838b01612d9c565b909750955060408901359150808211156133af578384fd5b506133bc89828a01612e48565b90945092505060608701356133d0816136fe565b809150509295509295509295565b600080600080600080600060a0888a0312156133f8578081fd5b8735965060208801359550604088013567ffffffffffffffff8082111561341d578283fd5b6134298b838c01612d9c565b909750955060608a0135915080821115613441578283fd5b5061344e8a828b01612e48565b9094509250506080880135613462816136fe565b8091505092959891949750929550565b6000815180845260208085019450808401835b838110156134a157815187529582019590820190600101613485565b509495945050505050565b8183823760009101908152919050565b600082516134ce8184602087016136a2565b9190910192915050565b60006001600160a01b03808716835280861660208401525060a0604083015261350460a0830185613472565b82810360608401526135168185613472565b838103608090940193909352508152602001949350505050565b6040815260006135436040830185613472565b82810360208401526135558185613472565b95945050505050565b6080815260006135716080830187613472565b82810360208401526135838187613472565b905082810360408401526135978186613472565b9150506001600160a01b038316606083015295945050505050565b60208152600082518060208401526135d18160408501602087016136a2565b601f01601f19169190910160400192915050565b8381526060602082015260006135fe6060830185613472565b90506001600160a01b0383166040830152949350505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613640576136406136e8565b604052919050565b600067ffffffffffffffff821115613662576136626136e8565b5060051b60200190565b6000816000190483118215151615613686576136866136d2565b500290565b60008282101561369d5761369d6136d2565b500390565b60005b838110156136bd5781810151838201526020016136a5565b838111156136cc576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ab557600080fd5b8015158114610ab557600080fdfea26469706673582212203b79ae78e1c7bd95a2c68a75d928b0525eddd473282869477eeb64391b367d7064736f6c63430008040033",
  "devdoc": {
    "author": "Twade",
    "events": {
      "Buy(uint256,uint256,address)": {
        "params": {
          "count": "The number of tokens affected by the event",
          "ethSpent": "The amount of ETH spent in the buy",
          "to": "The user affected by the event"
        }
      },
      "DustReturned(uint256,uint256,address)": {
        "params": {
          "ethAmount": "Amount of ETH returned to user",
          "to": "The user affected by the event",
          "vTokenAmount": "Amount of vToken returned to user"
        }
      },
      "Sell(uint256,uint256,address)": {
        "params": {
          "count": "The number of tokens affected by the event",
          "ethReceived": "The amount of ETH received in the sell",
          "to": "The user affected by the event"
        }
      },
      "Swap(uint256,uint256,address)": {
        "params": {
          "count": "The number of tokens affected by the event",
          "ethSpent": "The amount of ETH spent in the swap",
          "to": "The user affected by the event"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "buyAndRedeem(uint256,uint256,uint256[],bytes,address)": {
        "params": {
          "amount": "The number of tokens to buy",
          "specificIds": "An array of any specific token IDs to be minted",
          "swapCallData": "The `data` field from the API response",
          "to": "The recipient of the token IDs from the tx",
          "vaultId": "The ID of the NFTX vault"
        }
      },
      "buyAndSwap1155(uint256,uint256[],uint256[],uint256[],bytes,address)": {
        "params": {
          "idsIn": "An array of random token IDs to be minted",
          "specificIds": "An array of any specific token IDs to be minted",
          "swapCallData": "The `data` field from the API response",
          "to": "The recipient of token IDs from the tx",
          "vaultId": "The ID of the NFTX vault"
        }
      },
      "buyAndSwap721(uint256,uint256[],uint256[],bytes,address)": {
        "params": {
          "idsIn": "An array of random token IDs to be minted",
          "specificIds": "An array of any specific token IDs to be minted",
          "swapCallData": "The `data` field from the API response",
          "to": "The recipient of the token IDs from the tx",
          "vaultId": "The ID of the NFTX vault"
        }
      },
      "constructor": {
        "params": {
          "_WETH": "WETH contract address",
          "_nftxFactory": "NFTX Vault Factory contract address",
          "_swapTarget": "The swap target specified by the 0x protocol"
        }
      },
      "mintAndSell1155(uint256,uint256[],uint256[],bytes,address)": {
        "params": {
          "amounts": "The number of the corresponding ID to be minted",
          "ids": "An array of token IDs to be minted",
          "swapCallData": "The `data` field from the API response",
          "to": "The recipient of ETH from the tx",
          "vaultId": "The ID of the NFTX vault"
        }
      },
      "mintAndSell721(uint256,uint256[],bytes,address)": {
        "params": {
          "ids": "An array of token IDs to be minted",
          "swapCallData": "The `data` field from the API response",
          "to": "The recipient of ETH from the tx",
          "vaultId": "The ID of the NFTX vault"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause(bool)": {
        "params": {
          "_paused": "New pause state"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescue(address)": {
        "params": {
          "token": "The address of the token to be rescued"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Buy(uint256,uint256,address)": {
        "notice": "Emitted by the `buyAndRedeem` function."
      },
      "DustReturned(uint256,uint256,address)": {
        "notice": "Emitted when dust is returned after a transaction."
      },
      "Sell(uint256,uint256,address)": {
        "notice": "Emitted by the `mintAndSell` functions."
      },
      "Swap(uint256,uint256,address)": {
        "notice": "Emitted by the `buyAndSwap` functions."
      }
    },
    "kind": "user",
    "methods": {
      "WETH()": {
        "notice": "An interface for the WETH contract"
      },
      "buyAndRedeem(uint256,uint256,uint256[],bytes,address)": {
        "notice": "Purchases vault tokens from 0x with WETH and then redeems the tokens for either random or specific token IDs from the vault. The specified recipient will receive the ERC721 tokens, as well as any WETH dust that is left over from the tx. "
      },
      "buyAndSwap1155(uint256,uint256[],uint256[],uint256[],bytes,address)": {
        "notice": "Purchases vault tokens from 0x with WETH and then swaps the tokens for either random or specific token IDs from the vault. The specified recipient will receive the ERC1155 tokens, as well as any WETH dust that is left over from the tx. "
      },
      "buyAndSwap721(uint256,uint256[],uint256[],bytes,address)": {
        "notice": "Purchases vault tokens from 0x with WETH and then swaps the tokens for either random or specific token IDs from the vault. The specified recipient will receive the ERC721 tokens, as well as any WETH dust that is left over from the tx. "
      },
      "constructor": {
        "notice": "Initialises our zap by setting contract addresses onto their respective interfaces. "
      },
      "mintAndSell1155(uint256,uint256[],uint256[],bytes,address)": {
        "notice": "Mints tokens from our NFTX vault and sells them on 0x. "
      },
      "mintAndSell721(uint256,uint256[],bytes,address)": {
        "notice": "Mints tokens from our NFTX vault and sells them on 0x. "
      },
      "nftxFactory()": {
        "notice": "An interface for the NFTX Vault Factory contract"
      },
      "nftxVaultAddresses(uint256)": {
        "notice": "A mapping of NFTX Vault IDs to their address corresponding vault contract address"
      },
      "pause(bool)": {
        "notice": "Allows our zap to be paused to prevent any processing. "
      },
      "paused()": {
        "notice": "Allows zap to be paused"
      },
      "rescue(address)": {
        "notice": "Allows our owner to withdraw and tokens in the contract. "
      }
    },
    "notice": "Sets up a marketplace zap to interact with the 0x protocol. The 0x contract that is hit later on handles the token conversion based on parameters that are sent from the frontend. ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2983,
        "contract": "contracts/solidity/NFTXMarketplace0xZap.sol:NFTXMarketplace0xZap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3095,
        "contract": "contracts/solidity/NFTXMarketplace0xZap.sol:NFTXMarketplace0xZap",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 52,
        "contract": "contracts/solidity/NFTXMarketplace0xZap.sol:NFTXMarketplace0xZap",
        "label": "paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 70,
        "contract": "contracts/solidity/NFTXMarketplace0xZap.sol:NFTXMarketplace0xZap",
        "label": "nftxVaultAddresses",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}