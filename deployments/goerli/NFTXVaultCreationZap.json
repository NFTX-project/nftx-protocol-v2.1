{
  "address": "0xD2066db5F318996D09a7cF3E7e5Cac5A4503cd4D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_inventoryStaking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpStaking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sushiRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sushiHelper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "is1155",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowAllItems",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct NFTXVaultCreationZap.vaultInfo",
          "name": "vaultData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "vaultFeatures",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "mintFee",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "randomRedeemFee",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "targetRedeemFee",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "randomSwapFee",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "targetSwapFee",
              "type": "uint32"
            }
          ],
          "internalType": "struct NFTXVaultCreationZap.vaultFeesConfig",
          "name": "vaultFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "moduleIndex",
              "type": "int256"
            },
            {
              "internalType": "bytes",
              "name": "initData",
              "type": "bytes"
            }
          ],
          "internalType": "struct NFTXVaultCreationZap.vaultEligibilityStorage",
          "name": "eligibilityStorage",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "assetTokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "assetTokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "minTokenIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minWethIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wethIn",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFTXVaultCreationZap.vaultTokens",
          "name": "assetTokens",
          "type": "tuple"
        }
      ],
      "name": "createVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "vaultId_",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inventoryStaking",
      "outputs": [
        {
          "internalType": "contract INFTXInventoryStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpStaking",
      "outputs": [
        {
          "internalType": "contract INFTXLPStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultFactory",
      "outputs": [
        {
          "internalType": "contract INFTXVaultFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb27672fcf3f159f20c2be86a58348417f5c2d9f143befbac69a59119f51d5543",
  "receipt": {
    "to": null,
    "from": "0xDEA9196Dcdd2173D6E369c2AcC0faCc83fD9346a",
    "contractAddress": "0xD2066db5F318996D09a7cF3E7e5Cac5A4503cd4D",
    "transactionIndex": 58,
    "gasUsed": "2382290",
    "logsBloom": "0x
    "blockHash": "0xbfdf58ad6a144a067e614eab9d1ff3a51a6ca77378b93c3072f02e380b4f37ce",
    "transactionHash": "0xb27672fcf3f159f20c2be86a58348417f5c2d9f143befbac69a59119f51d5543",
    "logs": [
      {
        "transactionIndex": 58,
        "blockNumber": 8123428,
        "transactionHash": "0xb27672fcf3f159f20c2be86a58348417f5c2d9f143befbac69a59119f51d5543",
        "address": "0xD2066db5F318996D09a7cF3E7e5Cac5A4503cd4D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dea9196dcdd2173d6e369c2acc0facc83fd9346a"
        ],
        "data": "0x",
        "logIndex": 133,
        "blockHash": "0xbfdf58ad6a144a067e614eab9d1ff3a51a6ca77378b93c3072f02e380b4f37ce"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 8123428,
        "transactionHash": "0xb27672fcf3f159f20c2be86a58348417f5c2d9f143befbac69a59119f51d5543",
        "address": "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d2066db5f318996d09a7cf3e7e5cac5a4503cd4d",
          "0x0000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b47997506"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 134,
        "blockHash": "0xbfdf58ad6a144a067e614eab9d1ff3a51a6ca77378b93c3072f02e380b4f37ce"
      }
    ],
    "blockNumber": 8123428,
    "cumulativeGasUsed": "12492021",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1478bEB5D18B23d2bA90FcEe91d66460AC585e6b",
    "0x6e91A3f27cE6753f47C66B76B03E6A7bFdDB605B",
    "0xAfC303423580239653aFB6fb06d37D666ea0f5cA",
    "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506",
    "0xdA190E1c7b35B0A4d12420A6789e3B212f896eF1",
    "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6"
  ],
  "numDeployments": 1,
  "solcInputHash": "fd5de7ae3c04dbfc1278b9b56b87daf9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inventoryStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiHelper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"is1155\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowAllItems\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct NFTXVaultCreationZap.vaultInfo\",\"name\":\"vaultData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"vaultFeatures\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"mintFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"randomRedeemFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"targetRedeemFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"randomSwapFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"targetSwapFee\",\"type\":\"uint32\"}],\"internalType\":\"struct NFTXVaultCreationZap.vaultFeesConfig\",\"name\":\"vaultFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"moduleIndex\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"internalType\":\"struct NFTXVaultCreationZap.vaultEligibilityStorage\",\"name\":\"eligibilityStorage\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"assetTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"assetTokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethIn\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTXVaultCreationZap.vaultTokens\",\"name\":\"assetTokens\",\"type\":\"tuple\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inventoryStaking\",\"outputs\":[{\"internalType\":\"contract INFTXInventoryStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStaking\",\"outputs\":[{\"internalType\":\"contract INFTXLPStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFactory\",\"outputs\":[{\"internalType\":\"contract INFTXVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Twade\",\"kind\":\"dev\",\"methods\":{\"createVault((address,bool,bool,string,string),uint256,(uint32,uint32,uint32,uint32,uint32),(int256,bytes),(uint256[],uint256[],uint256,uint256,uint256))\":{\"details\":\"Tokens are deposited into the vault prior to fees being sent. \",\"params\":{\"assetTokens\":\"Tokens to be transferred to the vault in exchange for vault tokens \",\"eligibilityStorage\":\"Eligibility implementation, stored in a `vaultEligibilityStorage` struct\",\"vaultData\":\"Basic information about the vault stored in `vaultInfo` struct\",\"vaultFeatures\":\"A numeric representation of boolean values for features on the vault\",\"vaultFees\":\"Fee definitions stored in a `vaultFeesConfig` struct\"},\"returns\":{\"vaultId_\":\"The numeric ID of the NFTX vault\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause(bool)\":{\"params\":{\"_paused\":\"New pause state\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"WETH()\":{\"notice\":\"An interface for the WETH contract\"},\"constructor\":{\"notice\":\"Initialises our zap by setting contract addresses onto their respective interfaces.\"},\"createVault((address,bool,bool,string,string),uint256,(uint32,uint32,uint32,uint32,uint32),(int256,bytes),(uint256[],uint256[],uint256,uint256,uint256))\":{\"notice\":\"Creates an NFTX vault, handling any desired settings and tokens. \"},\"inventoryStaking()\":{\"notice\":\"An interface for the NFTX Vault Factory contract\"},\"pause(bool)\":{\"notice\":\"Allows our zap to be paused to prevent any processing. \"},\"paused()\":{\"notice\":\"Allows zap to be paused\"},\"sushiRouter()\":{\"notice\":\"Holds the mapping of our sushi router\"},\"vaultFactory()\":{\"notice\":\"An interface for the NFTX Vault Factory contract\"}},\"notice\":\"An amalgomation of vault creation steps, merged and optimised in a single contract call in an attempt reduce gas costs to the end-user. \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/solidity/zaps/VaultCreationZap.sol\":\"NFTXVaultCreationZap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/solidity/interface/INFTXEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXEligibility {\\n    // Read functions.\\n    function name() external pure returns (string memory);\\n\\n    function finalized() external view returns (bool);\\n\\n    function targetAsset() external pure returns (address);\\n\\n    function checkAllEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool[] memory);\\n\\n    function checkAllIneligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\\n\\n    // Write functions.\\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\\n\\n    function beforeMintHook(uint256[] calldata tokenIds) external;\\n\\n    function afterMintHook(uint256[] calldata tokenIds) external;\\n\\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\\n\\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xd932fdc4ea04b9d685f094b4405e64da8f3ab46cd701b22223f2a28d42973c70\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXInventoryStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./INFTXVaultFactory.sol\\\";\\n\\ninterface INFTXInventoryStaking {\\n    function nftxVaultFactory() external view returns (INFTXVaultFactory);\\n\\n    function vaultXToken(uint256 vaultId) external view returns (address);\\n\\n    function xTokenAddr(address baseToken) external view returns (address);\\n\\n    function xTokenShareValue(uint256 vaultId) external view returns (uint256);\\n\\n    function __NFTXInventoryStaking_init(address nftxFactory) external;\\n\\n    function deployXTokenForVault(uint256 vaultId) external;\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function timelockMintFor(\\n        uint256 vaultId,\\n        uint256 amount,\\n        address to,\\n        uint256 timelockLength\\n    ) external returns (uint256);\\n\\n    function deposit(uint256 vaultId, uint256 _amount) external;\\n\\n    function withdraw(uint256 vaultId, uint256 _share) external;\\n}\\n\",\"keccak256\":\"0x80540f3c1ec01c54afc55dd9343e9973e8ea4f11ac12e2129d3cb088f8380649\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXLPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXLPStaking {\\n    function nftxVaultFactory() external view returns (address);\\n\\n    function rewardDistTokenImpl() external view returns (address);\\n\\n    function stakingTokenProvider() external view returns (address);\\n\\n    function vaultToken(address _stakingToken) external view returns (address);\\n\\n    function stakingToken(address _vaultToken) external view returns (address);\\n\\n    function rewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function newRewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function oldRewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function unusedRewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function rewardDistributionTokenAddr(\\n        address stakedToken,\\n        address rewardToken\\n    ) external view returns (address);\\n\\n    // Write functions.\\n    function __NFTXLPStaking__init(address _stakingTokenProvider) external;\\n\\n    function setNFTXVaultFactory(address newFactory) external;\\n\\n    function setStakingTokenProvider(address newProvider) external;\\n\\n    function addPoolForVault(uint256 vaultId) external;\\n\\n    function updatePoolForVault(uint256 vaultId) external;\\n\\n    function updatePoolForVaults(uint256[] calldata vaultId) external;\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function deposit(uint256 vaultId, uint256 amount) external;\\n\\n    function timelockDepositFor(\\n        uint256 vaultId,\\n        address account,\\n        uint256 amount,\\n        uint256 timelockLength\\n    ) external;\\n\\n    function exit(uint256 vaultId, uint256 amount) external;\\n\\n    function rescue(uint256 vaultId) external;\\n\\n    function withdraw(uint256 vaultId, uint256 amount) external;\\n\\n    function claimRewards(uint256 vaultId) external;\\n}\\n\",\"keccak256\":\"0x8060d654324a6785929a06f45ffe9f4d2944eeca59b050ba66faf9af70e19861\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\nimport \\\"./INFTXVaultFactory.sol\\\";\\nimport \\\"./INFTXEligibility.sol\\\";\\n\\ninterface INFTXVault is IERC20Upgradeable {\\n    function manager() external view returns (address);\\n\\n    function assetAddress() external view returns (address);\\n\\n    function vaultFactory() external view returns (INFTXVaultFactory);\\n\\n    function eligibilityStorage() external view returns (INFTXEligibility);\\n\\n    function is1155() external view returns (bool);\\n\\n    function allowAllItems() external view returns (bool);\\n\\n    function enableMint() external view returns (bool);\\n\\n    function enableRandomRedeem() external view returns (bool);\\n\\n    function enableTargetRedeem() external view returns (bool);\\n\\n    function enableRandomSwap() external view returns (bool);\\n\\n    function enableTargetSwap() external view returns (bool);\\n\\n    function vaultId() external view returns (uint256);\\n\\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\\n\\n    function allHoldings() external view returns (uint256[] memory);\\n\\n    function totalHoldings() external view returns (uint256);\\n\\n    function mintFee() external view returns (uint256);\\n\\n    function randomRedeemFee() external view returns (uint256);\\n\\n    function targetRedeemFee() external view returns (uint256);\\n\\n    function randomSwapFee() external view returns (uint256);\\n\\n    function targetSwapFee() external view returns (uint256);\\n\\n    function vaultFees()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    event VaultInit(\\n        uint256 indexed vaultId,\\n        address assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    );\\n\\n    event ManagerSet(address manager);\\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\\n    // event CustomEligibilityDeployed(address eligibilityAddr);\\n\\n    event EnableMintUpdated(bool enabled);\\n    event EnableRandomRedeemUpdated(bool enabled);\\n    event EnableTargetRedeemUpdated(bool enabled);\\n    event EnableRandomSwapUpdated(bool enabled);\\n    event EnableTargetSwapUpdated(bool enabled);\\n\\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\\n    event Swapped(\\n        uint256[] nftIds,\\n        uint256[] amounts,\\n        uint256[] specificIds,\\n        uint256[] redeemedIds,\\n        address to\\n    );\\n\\n    function __NFTXVault_init(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _assetAddress,\\n        bool _is1155,\\n        bool _allowAllItems\\n    ) external;\\n\\n    function finalizeVault() external;\\n\\n    function setVaultMetadata(string memory name_, string memory symbol_)\\n        external;\\n\\n    function setVaultFeatures(\\n        bool _enableMint,\\n        bool _enableRandomRedeem,\\n        bool _enableTargetRedeem,\\n        bool _enableRandomSwap,\\n        bool _enableTargetSwap\\n    ) external;\\n\\n    function setFees(\\n        uint256 _mintFee,\\n        uint256 _randomRedeemFee,\\n        uint256 _targetRedeemFee,\\n        uint256 _randomSwapFee,\\n        uint256 _targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees() external;\\n\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\n    // a similar interface.\\n    function deployEligibilityStorage(\\n        uint256 moduleIndex,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    // The manager has control over options like fees and features\\n    function setManager(address _manager) external;\\n\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\n    ) external returns (uint256);\\n\\n    function mintTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        address to\\n    ) external returns (uint256);\\n\\n    function redeem(uint256 amount, uint256[] calldata specificIds)\\n        external\\n        returns (uint256[] calldata);\\n\\n    function redeemTo(\\n        uint256 amount,\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function swap(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds\\n    ) external returns (uint256[] calldata);\\n\\n    function swapTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function allValidNFTs(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x2d3a6170188b0e18d6744b9ea5414e8f01946302b390b032bed94546ce3f5f41\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/IBeacon.sol\\\";\\n\\ninterface INFTXVaultFactory is IBeacon {\\n    // Read functions.\\n    function numVaults() external view returns (uint256);\\n\\n    function zapContract() external view returns (address);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function eligibilityManager() external view returns (address);\\n\\n    function vault(uint256 vaultId) external view returns (address);\\n\\n    function allVaults() external view returns (address[] memory);\\n\\n    function vaultsForAsset(address asset)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function isLocked(uint256 id) external view returns (bool);\\n\\n    function excludedFromFees(address addr) external view returns (bool);\\n\\n    function factoryMintFee() external view returns (uint64);\\n\\n    function factoryRandomRedeemFee() external view returns (uint64);\\n\\n    function factoryTargetRedeemFee() external view returns (uint64);\\n\\n    function factoryRandomSwapFee() external view returns (uint64);\\n\\n    function factoryTargetSwapFee() external view returns (uint64);\\n\\n    function vaultFees(uint256 vaultId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    event NewFeeDistributor(address oldDistributor, address newDistributor);\\n    event NewZapContract(address oldZap, address newZap);\\n    event FeeExclusion(address feeExcluded, bool excluded);\\n    event NewEligibilityManager(address oldEligManager, address newEligManager);\\n    event NewVault(\\n        uint256 indexed vaultId,\\n        address vaultAddress,\\n        address assetAddress\\n    );\\n    event UpdateVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n    event DisableVaultFees(uint256 vaultId);\\n    event UpdateFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n\\n    // Write functions.\\n    function __NFTXVaultFactory_init(\\n        address _vaultImpl,\\n        address _feeDistributor\\n    ) external;\\n\\n    function createVault(\\n        string calldata name,\\n        string calldata symbol,\\n        address _assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    ) external returns (uint256);\\n\\n    function setFeeDistributor(address _feeDistributor) external;\\n\\n    function setEligibilityManager(address _eligibilityManager) external;\\n\\n    function setZapContract(address _zapContract) external;\\n\\n    function setFeeExclusion(address _excludedAddr, bool excluded) external;\\n\\n    function setFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function setVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees(uint256 vaultId) external;\\n}\\n\",\"keccak256\":\"0x9780b597cd74ef0cf4db1084f8b8f96dd6b643645cddf70d5c81a6caf372057a\",\"license\":\"MIT\"},\"contracts/solidity/interface/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x9d9507bd23206f8914e46b21966e1a06659a2b98741d91cf200e000ffc6b0f9c\",\"license\":\"MIT\"},\"contracts/solidity/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function childImplementation() external view returns (address);\\n\\n    function upgradeChildTo(address newImplementation) external;\\n}\\n\",\"keccak256\":\"0xd9b361e1d9b9a4bde9801abb5692e9fd7018cb52505d3a47dc7b5dd968bcad28\",\"license\":\"MIT\"},\"contracts/solidity/testing/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/solidity/testing/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"contracts/solidity/testing/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x33993037906cd4700dd7d2012b4f7a32a08ed449ff50505c92e5f70de1139315\",\"license\":\"MIT\"},\"contracts/solidity/testing/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\",\"keccak256\":\"0x0969c3b761eb3af95a44d2c5b89822572d87441f2ca64d9fa80d7cbab667e42b\",\"license\":\"MIT\"},\"contracts/solidity/testing/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc5940db78cbc7beb72edebf412e53dc80845b50a08767316dfa61e768fb6de4a\",\"license\":\"MIT\"},\"contracts/solidity/testing/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x37012a2803c5b59a18b826987198d7e72a2a558cdf426e2e21d44a5b89190115\",\"license\":\"MIT\"},\"contracts/solidity/testing/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/solidity/testing/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2d15296ca79a3ab4ec9476e0aa6f4fd27eb56cc192c67e372bff46f14ed72542\",\"license\":\"MIT\"},\"contracts/solidity/testing/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x35e258421ae206f3db37281cea70871b4c3553914734aa76139a41af60ac1abb\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x57ee5f4c65fa0d2e023e97cb265784084412c700117cac90cfe29bf4bab3c7fc\",\"license\":\"MIT\"},\"contracts/solidity/util/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd38318b34491b4e11bab877e4dbafbf51111b69b09307b01ca952cf24e4229d0\",\"license\":\"MIT\"},\"contracts/solidity/util/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../testing/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xa0dc63480490e75aa2677bc8dc5dd056b4e8a4507254ed442e9c49140c1950db\",\"license\":\"MIT\"},\"contracts/solidity/util/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x2c09a41d3d53e0fdd19581192917c2eb40d687608af6e59c99132199af4add38\",\"license\":\"MIT\"},\"contracts/solidity/util/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../testing/IERC20.sol\\\";\\nimport \\\"../testing/IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(\\n            nonceAfter == nonceBefore + 1,\\n            \\\"SafeERC20: permit did not succeed\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x368f57bccda60b860e6c9a9207ef5f478fd188ff051868229793b1bff51f2562\",\"license\":\"MIT\"},\"contracts/solidity/util/SushiHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ncontract SushiHelper {\\n\\n  /**\\n   * @notice Calculates the CREATE2 address for a sushi pair without making any\\n   * external calls.\\n   * \\n   * @return pair Address of our token pair\\n   */\\n\\n  function pairFor(address sushiRouterFactory, address tokenA, address tokenB) external view returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = address(uint160(uint256(keccak256(abi.encodePacked(\\n      hex'ff',\\n      sushiRouterFactory,\\n      keccak256(abi.encodePacked(token0, token1)),\\n      hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\\n    )))));\\n  }\\n\\n\\n  /**\\n   * @notice Returns sorted token addresses, used to handle return values from pairs sorted in\\n   * this order.\\n   */\\n\\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n      require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n      (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n      require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n  }\\n\\n}\\n\",\"keccak256\":\"0x977efbc5b30528023d80a5f349b746d71440c3751312d0f1cc0cbcb86be0d8af\",\"license\":\"MIT\"},\"contracts/solidity/zaps/VaultCreationZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/INFTXInventoryStaking.sol\\\";\\nimport \\\"../interface/INFTXLPStaking.sol\\\";\\nimport \\\"../interface/IUniswapV2Router01.sol\\\";\\nimport \\\"../interface/INFTXVault.sol\\\";\\nimport \\\"../interface/INFTXVaultFactory.sol\\\";\\nimport \\\"../testing/IERC1155.sol\\\";\\nimport \\\"../testing/ERC1155Holder.sol\\\";\\nimport \\\"../util/Ownable.sol\\\";\\nimport \\\"../util/ReentrancyGuard.sol\\\";\\nimport \\\"../util/SafeERC20.sol\\\";\\nimport \\\"../util/SushiHelper.sol\\\";\\n\\n\\n/**\\n * @notice A partial WETH interface.\\n */\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n  function transfer(address to, uint value) external returns (bool);\\n  function withdraw(uint) external;\\n  function balanceOf(address to) external view returns (uint256);\\n  function approve(address guy, uint wad) external returns (bool);\\n}\\n\\n\\n/**\\n * @notice An amalgomation of vault creation steps, merged and optimised in\\n * a single contract call in an attempt reduce gas costs to the end-user.\\n * \\n * @author Twade\\n */\\n\\ncontract NFTXVaultCreationZap is Ownable, ReentrancyGuard, ERC1155Holder {\\n\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice Allows zap to be paused\\n  bool public paused = false;\\n\\n  /// @notice An interface for the NFTX Vault Factory contract\\n  INFTXVaultFactory public immutable vaultFactory;\\n\\n  /// @notice Holds the mapping of our sushi router\\n  IUniswapV2Router01 public immutable sushiRouter;\\n  SushiHelper internal immutable sushiHelper;\\n\\n  /// @notice An interface for the WETH contract\\n  IWETH public immutable WETH;\\n\\n  /// @notice An interface for the NFTX Vault Factory contract\\n  INFTXInventoryStaking public immutable inventoryStaking;\\n  INFTXLPStaking public immutable lpStaking;\\n\\n  // Set a constant address for specific contracts that need special logic\\n  address constant CRYPTO_PUNKS = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n\\n  /// @notice Basic information pertaining to the vault\\n  struct vaultInfo {\\n    address assetAddress;      // 20/32\\n    bool is1155;               // 21/32\\n    bool allowAllItems;        // 22/32\\n    string name;               // ??/32\\n    string symbol;             // ??/32\\n  }\\n\\n  /// @notice Fee information in 9-decimal format\\n  struct vaultFeesConfig {\\n    uint32 mintFee;\\n    uint32 randomRedeemFee;\\n    uint32 targetRedeemFee;\\n    uint32 randomSwapFee;\\n    uint32 targetSwapFee;\\n  }\\n\\n  /// @notice Reference to the vault's eligibility implementation\\n  struct vaultEligibilityStorage {\\n    int moduleIndex;\\n    bytes initData;\\n  }\\n\\n  /// @notice Valid tokens to be transferred to the vault on creation\\n  struct vaultTokens {\\n    uint[] assetTokenIds;\\n    uint[] assetTokenAmounts;\\n\\n    // Sushiswap integration for liquidity\\n    uint minTokenIn;\\n    uint minWethIn;\\n    uint wethIn;\\n  }\\n\\n\\n  /**\\n   * @notice Initialises our zap by setting contract addresses onto their\\n   * respective interfaces.\\n   */\\n\\n  constructor(\\n    address _vaultFactory,\\n    address _inventoryStaking,\\n    address _lpStaking,\\n    address _sushiRouter,\\n    address _sushiHelper,\\n    address _weth\\n  ) Ownable() ReentrancyGuard() {\\n    // Set our staking contracts\\n    inventoryStaking = INFTXInventoryStaking(_inventoryStaking);\\n    lpStaking = INFTXLPStaking(_lpStaking);\\n\\n    // Set our NFTX factory contract\\n    vaultFactory = INFTXVaultFactory(_vaultFactory);\\n\\n    // Set our Sushi Router used for liquidity\\n    sushiRouter = IUniswapV2Router01(_sushiRouter);\\n    sushiHelper = SushiHelper(_sushiHelper);\\n\\n    // Set our chain's WETH contract\\n    WETH = IWETH(_weth);\\n    // setting infinite approval here to save on subsequent gas costs\\n    IWETH(_weth).approve(_sushiRouter, type(uint256).max);\\n  }\\n\\n\\n  /**\\n   * @notice Creates an NFTX vault, handling any desired settings and tokens.\\n   * \\n   * @dev Tokens are deposited into the vault prior to fees being sent.\\n   * \\n   * @param vaultData Basic information about the vault stored in `vaultInfo` struct\\n   * @param vaultFeatures A numeric representation of boolean values for features on the vault\\n   * @param vaultFees Fee definitions stored in a `vaultFeesConfig` struct\\n   * @param eligibilityStorage Eligibility implementation, stored in a `vaultEligibilityStorage` struct\\n   * @param assetTokens Tokens to be transferred to the vault in exchange for vault tokens\\n   * \\n   * @return vaultId_ The numeric ID of the NFTX vault\\n   */\\n\\n  function createVault(\\n    vaultInfo calldata vaultData,\\n    uint vaultFeatures,\\n    vaultFeesConfig calldata vaultFees,\\n    vaultEligibilityStorage calldata eligibilityStorage,\\n    vaultTokens calldata assetTokens\\n  ) external nonReentrant payable returns (uint vaultId_) {\\n    // Ensure our zap is not paused\\n    require(!paused, 'Zap is paused');\\n\\n    // Get the amount of starting ETH in the contract\\n    uint startingWeth = WETH.balanceOf(address(this));\\n\\n    // Create our vault skeleton\\n    vaultId_ = vaultFactory.createVault(\\n      vaultData.name,\\n      vaultData.symbol,\\n      vaultData.assetAddress,\\n      vaultData.is1155,\\n      vaultData.allowAllItems\\n    );\\n\\n    // Deploy our vault's xToken\\n    inventoryStaking.deployXTokenForVault(vaultId_);\\n\\n    // Build our vault interface\\n    INFTXVault vault = INFTXVault(vaultFactory.vault(vaultId_));\\n\\n    // If we have a specified eligibility storage, add that on\\n    if (eligibilityStorage.moduleIndex >= 0) {\\n      vault.deployEligibilityStorage(\\n        uint256(eligibilityStorage.moduleIndex),\\n        eligibilityStorage.initData\\n      );\\n    }\\n\\n    // Mint and stake liquidity into the vault\\n    uint length = assetTokens.assetTokenIds.length;\\n\\n    // If we don't have any tokens to send, we can skip our transfers\\n    if (length > 0) {\\n      // Determine the token type to alternate our transfer logic\\n      if (!vaultData.is1155) {\\n        // Iterate over our 721 tokens to transfer them all to our vault\\n        for (uint i; i < length;) {\\n          _transferFromERC721(vaultData.assetAddress, assetTokens.assetTokenIds[i], address(vault));\\n\\n          if(vaultData.assetAddress == CRYPTO_PUNKS) {\\n            bytes memory data = abi.encodeWithSignature(\\n                \\\"offerPunkForSaleToAddress(uint256,uint256,address)\\\",\\n                assetTokens.assetTokenIds[i],\\n                0,\\n                address(vault)\\n            );\\n            (bool success, bytes memory resultData) = vaultData.assetAddress.call(data);\\n            require(success, string(resultData));\\n          }\\n\\n          unchecked { ++i; }\\n        }\\n      } else {\\n        // Transfer all of our 1155 tokens to our zap, as the `mintTo` call on our\\n        // vault requires the call sender to hold the ERC1155 token.\\n        IERC1155(vaultData.assetAddress).safeBatchTransferFrom(\\n          msg.sender,\\n          address(this),\\n          assetTokens.assetTokenIds,\\n          assetTokens.assetTokenAmounts,\\n          \\\"\\\"\\n        );\\n\\n        // Approve our vault to play with our 1155 tokens\\n        IERC1155(vaultData.assetAddress).setApprovalForAll(address(vault), true);\\n      }\\n\\n      // We can now mint our asset tokens, giving the vault our tokens and storing them\\n      // inside our zap, as we will shortly be staking them. Our zap is excluded from fees,\\n      // so there should be no loss in the amount returned.\\n      vault.mintTo(assetTokens.assetTokenIds, assetTokens.assetTokenAmounts, address(this));\\n\\n      // We now have tokens against our provided NFTs that we can now stake through either\\n      // inventory or liquidity.\\n\\n      // Get our vaults base staking token. This is used to calculate the xToken\\n      address baseToken = address(vault);\\n\\n      // We first want to set up our liquidity, as the returned values will be variable\\n      if (assetTokens.minTokenIn > 0) {\\n        require(msg.value > assetTokens.wethIn, 'Insufficient vault sent for liquidity');\\n\\n        // Wrap ETH into WETH for our contract from the sender\\n        WETH.deposit{value: msg.value}();\\n\\n        // Convert WETH to vault token\\n        require(IERC20(baseToken).balanceOf(address(this)) >= assetTokens.minTokenIn, 'Insufficient tokens acquired for liquidity');\\n\\n        // Provide liquidity to sushiswap, using the vault tokens and pairing it with the\\n        // liquidity amount specified in the call.\\n        IERC20(baseToken).safeApprove(address(sushiRouter), assetTokens.minTokenIn);\\n        (,, uint256 liquidity) = sushiRouter.addLiquidity(\\n          baseToken,\\n          address(WETH),\\n          assetTokens.minTokenIn,\\n          assetTokens.wethIn,\\n          assetTokens.minTokenIn,\\n          assetTokens.minWethIn,\\n          address(this),\\n          block.timestamp\\n        );\\n        IERC20(baseToken).safeApprove(address(sushiRouter), 0);\\n\\n        // Stake in LP rewards contract \\n        address lpToken = sushiHelper.pairFor(sushiRouter.factory(), baseToken, address(WETH));\\n        IERC20(lpToken).safeApprove(address(lpStaking), liquidity);\\n        lpStaking.timelockDepositFor(vaultId_, msg.sender, liquidity, 48 hours);\\n      }\\n\\n      // Return any token dust to the caller\\n      uint256 remainingTokens = IERC20(baseToken).balanceOf(address(this));\\n\\n      // Any tokens that we have remaining after our liquidity staking are thrown into\\n      // inventory to ensure what we don't have any token dust remaining.\\n      if (remainingTokens > 0) {\\n        // Make a direct timelock mint using the default timelock duration. This sends directly\\n        // to our user, rather than via the zap, to avoid the timelock locking the tx.\\n        IERC20(baseToken).transfer(inventoryStaking.vaultXToken(vaultId_), remainingTokens);\\n        inventoryStaking.timelockMintFor(vaultId_, remainingTokens, msg.sender, 2);\\n      }\\n    }\\n\\n    // If we have specified vault features that aren't the default (all enabled)\\n    // then update them\\n    if (vaultFeatures < 31) {\\n      vault.setVaultFeatures(\\n        _getBoolean(vaultFeatures, 4),\\n        _getBoolean(vaultFeatures, 3),\\n        _getBoolean(vaultFeatures, 2),\\n        _getBoolean(vaultFeatures, 1),\\n        _getBoolean(vaultFeatures, 0)\\n      );\\n    }\\n\\n    // Set our vault fees, converting our 9-decimal to 18-decimal\\n    vault.setFees(\\n      uint256(vaultFees.mintFee) * 10e9,\\n      uint256(vaultFees.randomRedeemFee) * 10e9,\\n      uint256(vaultFees.targetRedeemFee) * 10e9,\\n      uint256(vaultFees.randomSwapFee) * 10e9,\\n      uint256(vaultFees.targetSwapFee) * 10e9\\n    );\\n\\n    // Finalise our vault, preventing further edits\\n    vault.finalizeVault();\\n\\n    // Now that all transactions are finished we can return any ETH dust left over\\n    // from our liquidity staking.\\n    uint remainingWEth = WETH.balanceOf(address(this)) - startingWeth;\\n    if (remainingWEth > 0) {\\n      WETH.withdraw(remainingWEth);\\n      bool sent = payable(msg.sender).send(remainingWEth);\\n      require(sent, \\\"Failed to send Ether\\\");\\n    }\\n  }\\n\\n\\n  /**\\n   * @notice Transfers our ERC721 tokens to a specified recipient.\\n   * \\n   * @param assetAddr Address of the asset being transferred\\n   * @param tokenId The ID of the token being transferred\\n   * @param to The address the token is being transferred to\\n   */\\n\\n  function _transferFromERC721(address assetAddr, uint256 tokenId, address to) internal virtual {\\n    bytes memory data;\\n\\n    if (assetAddr == CRYPTO_PUNKS) {\\n      // Fix here for frontrun attack.\\n      bytes memory punkIndexToAddress = abi.encodeWithSignature(\\\"punkIndexToAddress(uint256)\\\", tokenId);\\n      (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\\n      (address nftOwner) = abi.decode(result, (address));\\n      require(checkSuccess && nftOwner == msg.sender, \\\"Not the NFT owner\\\");\\n      data = abi.encodeWithSignature(\\\"buyPunk(uint256)\\\", tokenId);\\n    } else {\\n      // We push to the vault to avoid an unneeded transfer.\\n      data = abi.encodeWithSignature(\\\"safeTransferFrom(address,address,uint256)\\\", msg.sender, to, tokenId);\\n    }\\n\\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\\n    require(success, string(resultData));\\n  }\\n\\n\\n  /**\\n   * @notice Reads a boolean at a set character index of a uint.\\n   * \\n   * @dev 0 and 1 define false and true respectively.\\n   * \\n   * @param _packedBools A numeric representation of a series of boolean values\\n   * @param _boolNumber The character index of the boolean we are looking up\\n   *\\n   * @return bool The representation of the boolean value\\n   */\\n\\n  function _getBoolean(uint256 _packedBools, uint256 _boolNumber) internal pure returns(bool) {\\n    uint256 flag = (_packedBools >> _boolNumber) & uint256(1);\\n    return (flag == 1 ? true : false);\\n  }\\n\\n\\n  /**\\n   * @notice Allows our zap to be paused to prevent any processing.\\n   * \\n   * @param _paused New pause state\\n   */\\n\\n  function pause(bool _paused) external onlyOwner {\\n    paused = _paused;\\n  }\\n\\n  receive() external payable {\\n    require(msg.sender == address(WETH), \\\"Only WETH\\\");\\n  }\\n\\n}\\n\",\"keccak256\":\"0x60e92dd7be0fc4caf25ecdec9e76a57dbb2e5a31db44f72824eb5be50d33999b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040526002805460ff191690553480156200001c57600080fd5b5060405162002bca38038062002bca8339810160408190526200003f9162000171565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180556001600160601b0319606086811b82166101005285811b82166101205287811b821660805284811b821660a05283811b821660c05282901b1660e05260405163095ea7b360e01b81526001600160a01b038085166004830152600019602483015282169063095ea7b390604401602060405180830381600087803b1580156200010c57600080fd5b505af115801562000121573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001479190620001f1565b505050505050506200021a565b80516001600160a01b03811681146200016c57600080fd5b919050565b60008060008060008060c087890312156200018a578182fd5b620001958762000154565b9550620001a56020880162000154565b9450620001b56040880162000154565b9350620001c56060880162000154565b9250620001d56080880162000154565b9150620001e560a0880162000154565b90509295509295509295565b60006020828403121562000203578081fd5b8151801515811462000213578182fd5b9392505050565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6128d1620002f96000396000818161029e0152818161136c01526113d601526000818161024c0152818161093c01528181611500015261163e01526000818160f1015281816102d20152818161079601528181610f0b015281816110df015281816112e10152818161192b01526119e6015260006111f50152600081816101eb0152818161107d0152818161113a015281816111cb01526112240152600081816103640152818161082401526109d101526128d16000f3fe6080604052600436106100e15760003560e01c80639bf1401c1161007f578063d8a06f7311610059578063d8a06f7314610352578063f23a6e6114610386578063f2fde38b146103cb578063f3e301cf146103eb57600080fd5b80639bf1401c1461028c578063ad5c4648146102c0578063bc197c81146102f457600080fd5b80636d13582c116100bb5780636d13582c146101d9578063715018a61461022557806374a1b0b01461023a5780638da5cb5b1461026e57600080fd5b806301ffc9a71461016a57806302329a291461019f5780635c975abb146101bf57600080fd5b3661016557336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101635760405162461bcd60e51b815260206004820152600960248201527f4f6e6c792057455448000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b005b600080fd5b34801561017657600080fd5b5061018a610185366004612418565b61040c565b60405190151581526020015b60405180910390f35b3480156101ab57600080fd5b506101636101ba3660046123e0565b610475565b3480156101cb57600080fd5b5060025461018a9060ff1681565b3480156101e557600080fd5b5061020d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610196565b34801561023157600080fd5b506101636104e2565b34801561024657600080fd5b5061020d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561027a57600080fd5b506000546001600160a01b031661020d565b34801561029857600080fd5b5061020d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102cc57600080fd5b5061020d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561030057600080fd5b5061033961030f3660046122cf565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6040516001600160e01b03199091168152602001610196565b34801561035e57600080fd5b5061020d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039257600080fd5b506103396103a1366004612379565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b3480156103d757600080fd5b506101636103e6366004612297565b610593565b6103fe6103f9366004612440565b6106d1565b604051908152602001610196565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061046f57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6000546001600160a01b031633146104cf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015a565b6002805460ff1916911515919091179055565b6000546001600160a01b0316331461053c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b031633146105ed5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015a565b6001600160a01b0381166106695760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161015a565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000600260015414156107265760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161015a565b600260018190555460ff161561077e5760405162461bcd60e51b815260206004820152600d60248201527f5a61702069732070617573656400000000000000000000000000000000000000604482015260640161015a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156107e057600080fd5b505afa1580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081891906124dc565b90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663ef8658db61085660608a018a61276d565b61086360808c018c61276d565b61087060208e018e612297565b8d602001602081019061088391906123e0565b8e604001602081019061089691906123e0565b6040518863ffffffff1660e01b81526004016108b89796959493929190612676565b602060405180830381600087803b1580156108d257600080fd5b505af11580156108e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090a91906124dc565b6040517ff0f2a4d7000000000000000000000000000000000000000000000000000000008152600481018290529092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f0f2a4d790602401600060405180830381600087803b15801561098857600080fd5b505af115801561099c573d6000803e3d6000fd5b50506040517f81a36fb600000000000000000000000000000000000000000000000000000000815260048101859052600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506381a36fb69060240160206040518083038186803b158015610a1c57600080fd5b505afa158015610a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5491906122b3565b90506000853512610aef576001600160a01b038116635877aee68635610a7d602089018961276d565b6040518463ffffffff1660e01b8152600401610a9b939291906126fb565b602060405180830381600087803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed91906122b3565b505b6000610afb858061271e565b91505080156116c757610b1460408a0160208b016123e0565b610cd85760005b81811015610cd257610b68610b3360208c018c612297565b610b3d888061271e565b84818110610b5b57634e487b7160e01b600052603260045260246000fd5b9050602002013585611acb565b73b47e3cd837ddf8e4c57f05d70ab865de6e193bbb610b8a60208c018c612297565b6001600160a01b03161415610cca576000610ba5878061271e565b83818110610bc357634e487b7160e01b600052603260045260246000fd5b60405160209091029290920135602483015250600060448201526001600160a01b038516606482015260840160408051601f19818403018152919052602080820180516001600160e01b03167fbf31196f000000000000000000000000000000000000000000000000000000001790529091506000908190610c47908e018e612297565b6001600160a01b031683604051610c5e91906125bb565b6000604051808303816000865af19150503d8060008114610c9b576040519150601f19603f3d011682016040523d82523d6000602084013e610ca0565b606091505b5091509150818190610cc55760405162461bcd60e51b815260040161015a91906126c8565b505050505b600101610b1b565b50610deb565b610ce560208a018a612297565b6001600160a01b0316632eb2c2d63330610cff898061271e565b610d0c60208c018c61271e565b6040518763ffffffff1660e01b8152600401610d2d969594939291906125d7565b600060405180830381600087803b158015610d4757600080fd5b505af1158015610d5b573d6000803e3d6000fd5b50610d6d9250505060208a018a612297565b6040517fa22cb4650000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260016024830152919091169063a22cb46590604401600060405180830381600087803b158015610dd257600080fd5b505af1158015610de6573d6000803e3d6000fd5b505050505b6001600160a01b03821663b10402ea610e04878061271e565b610e1160208a018a61271e565b306040518663ffffffff1660e01b8152600401610e32959493929190612633565b602060405180830381600087803b158015610e4c57600080fd5b505af1158015610e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8491906124dc565b508160408601351561143d5785608001353411610f095760405162461bcd60e51b815260206004820152602560248201527f496e73756666696369656e74207661756c742073656e7420666f72206c69717560448201527f6964697479000000000000000000000000000000000000000000000000000000606482015260840161015a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f6457600080fd5b505af1158015610f78573d6000803e3d6000fd5b5050604080516370a0823160e01b8152306004820152908a013593506001600160a01b03851692506370a08231915060240160206040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa91906124dc565b101561106e5760405162461bcd60e51b815260206004820152602a60248201527f496e73756666696369656e7420746f6b656e7320616371756972656420666f7260448201527f206c697175696469747900000000000000000000000000000000000000000000606482015260840161015a565b6110a66001600160a01b0382167f00000000000000000000000000000000000000000000000000000000000000006040890135611d76565b604080517fe8e337000000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301529188013560448201819052608089013560648301526084820152606088013560a48201523060c48201524260e48201526000917f0000000000000000000000000000000000000000000000000000000000000000169063e8e337009061010401606060405180830381600087803b15801561117f57600080fd5b505af1158015611193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b791906124f4565b92506111f19150506001600160a01b0383167f00000000000000000000000000000000000000000000000000000000000000006000611d76565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636d91c0e27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561127b57600080fd5b505afa15801561128f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b391906122b3565b60405160e083901b6001600160e01b03191681526001600160a01b03918216600482015286821660248201527f0000000000000000000000000000000000000000000000000000000000000000909116604482015260640160206040518083038186803b15801561132357600080fd5b505afa158015611337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135b91906122b3565b90506113916001600160a01b0382167f000000000000000000000000000000000000000000000000000000000000000084611d76565b6040517f6c9b958800000000000000000000000000000000000000000000000000000000815260048101889052336024820152604481018390526202a30060648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636c9b958890608401600060405180830381600087803b15801561142257600080fd5b505af1158015611436573d6000803e3d6000fd5b5050505050505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561147f57600080fd5b505afa158015611493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b791906124dc565b905080156116c4576040517f034fc83c000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b038084169163a9059cbb917f0000000000000000000000000000000000000000000000000000000000000000169063034fc83c9060240160206040518083038186803b15801561154257600080fd5b505afa158015611556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157a91906122b3565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b1580156115c257600080fd5b505af11580156115d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fa91906123fc565b506040517f2699f55a0000000000000000000000000000000000000000000000000000000081526004810187905260248101829052336044820152600260648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632699f55a90608401602060405180830381600087803b15801561168a57600080fd5b505af115801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c291906124dc565b505b50505b601f88101561178657816001600160a01b0316630d636a096116ea8a6004611efa565b6116f58b6003611efa565b6117008c6002611efa565b61170b8d6001611efa565b6117168e6000611efa565b6040516001600160e01b031960e088901b168152941515600486015292151560248501529015156044840152151560648301521515608482015260a401600060405180830381600087803b15801561176d57600080fd5b505af1158015611781573d6000803e3d6000fd5b505050505b6001600160a01b0382166304a66b486117a260208a018a612521565b6117b79063ffffffff166402540be4006127e3565b6117c760408b0160208c01612521565b6117dc9063ffffffff166402540be4006127e3565b6117ec60608c0160408d01612521565b6118019063ffffffff166402540be4006127e3565b61181160808d0160608e01612521565b6118269063ffffffff166402540be4006127e3565b61183660a08e0160808f01612521565b61184b9063ffffffff166402540be4006127e3565b6040516001600160e01b031960e088901b1681526004810195909552602485019390935260448401919091526064830152608482015260a401600060405180830381600087803b15801561189e57600080fd5b505af11580156118b2573d6000803e3d6000fd5b50505050816001600160a01b031663c3cb8c146040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156118f157600080fd5b505af1158015611905573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508591506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561196d57600080fd5b505afa158015611981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a591906124dc565b6119af9190612802565b90508015611ab9576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611a3257600080fd5b505af1158015611a46573d6000803e3d6000fd5b50506040516000925033915083156108fc0290849084818181858888f19350505050905080611ab75760405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e64204574686572000000000000000000000000604482015260640161015a565b505b50506001805550909695505050505050565b60606001600160a01b03841673b47e3cd837ddf8e4c57f05d70ab865de6e193bbb1415611c8357600083604051602401611b0791815260200190565b60408051601f198184030181529181526020820180516001600160e01b03167f58178168000000000000000000000000000000000000000000000000000000001790525190915060009081906001600160a01b03881690611b699085906125bb565b600060405180830381855afa9150503d8060008114611ba4576040519150601f19603f3d011682016040523d82523d6000602084013e611ba9565b606091505b5091509150600081806020019051810190611bc491906122b3565b9050828015611bdb57506001600160a01b03811633145b611c275760405162461bcd60e51b815260206004820152601160248201527f4e6f7420746865204e4654206f776e6572000000000000000000000000000000604482015260640161015a565b6040516024810188905260440160408051601f198184030181529190526020810180516001600160e01b03167f8264fe98000000000000000000000000000000000000000000000000000000001790529450611ceb9350505050565b6040513360248201526001600160a01b03831660448201526064810184905260840160408051601f198184030181529190526020810180516001600160e01b03167f42842e0e0000000000000000000000000000000000000000000000000000000017905290505b600080856001600160a01b031683604051611d0691906125bb565b6000604051808303816000865af19150503d8060008114611d43576040519150601f19603f3d011682016040523d82523d6000602084013e611d48565b606091505b5091509150818190611d6d5760405162461bcd60e51b815260040161015a91906126c8565b50505050505050565b801580611e1857506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611dde57600080fd5b505afa158015611df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1691906124dc565b155b611e8a5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161015a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b03167f095ea7b300000000000000000000000000000000000000000000000000000000179052611ef5908490611f1c565b505050565b6000600183831c8116908114611f11576000611f14565b60015b949350505050565b6000611f71826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120019092919063ffffffff16565b805190915015611ef55780806020019051810190611f8f91906123fc565b611ef55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161015a565b6060612010848460008561201a565b90505b9392505050565b6060824710156120925760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161015a565b843b6120e05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161015a565b600080866001600160a01b031685876040516120fc91906125bb565b60006040518083038185875af1925050503d8060008114612139576040519150601f19603f3d011682016040523d82523d6000602084013e61213e565b606091505b509150915061214e828286612159565b979650505050505050565b60608315612168575081612013565b8251156121785782518084602001fd5b8160405162461bcd60e51b815260040161015a91906126c8565b600082601f8301126121a2578081fd5b8135602067ffffffffffffffff8211156121be576121be61285f565b8160051b6121cd8282016127b2565b8381528281019086840183880185018910156121e7578687fd5b8693505b858410156122095780358352600193909301929184019184016121eb565b50979650505050505050565b600082601f830112612225578081fd5b813567ffffffffffffffff81111561223f5761223f61285f565b612252601f8201601f19166020016127b2565b818152846020838601011115612266578283fd5b816020850160208301379081016020019190915292915050565b600060a08284031215612291578081fd5b50919050565b6000602082840312156122a8578081fd5b813561201381612875565b6000602082840312156122c4578081fd5b815161201381612875565b600080600080600060a086880312156122e6578081fd5b85356122f181612875565b9450602086013561230181612875565b9350604086013567ffffffffffffffff8082111561231d578283fd5b61232989838a01612192565b9450606088013591508082111561233e578283fd5b61234a89838a01612192565b9350608088013591508082111561235f578283fd5b5061236c88828901612215565b9150509295509295909350565b600080600080600060a08688031215612390578081fd5b853561239b81612875565b945060208601356123ab81612875565b93506040860135925060608601359150608086013567ffffffffffffffff8111156123d4578182fd5b61236c88828901612215565b6000602082840312156123f1578081fd5b81356120138161288d565b60006020828403121561240d578081fd5b81516120138161288d565b600060208284031215612429578081fd5b81356001600160e01b031981168114612013578182fd5b60008060008060006101208688031215612458578081fd5b853567ffffffffffffffff8082111561246f578283fd5b61247b89838a01612280565b9650602088013595506124918960408a01612280565b945060e08801359150808211156124a6578283fd5b908701906040828a0312156124b9578283fd5b90925061010087013590808211156124cf578283fd5b5061236c88828901612280565b6000602082840312156124ed578081fd5b5051919050565b600080600060608486031215612508578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215612532578081fd5b813563ffffffff81168114612013578182fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612576578081fd5b8260051b80836020870137939093016020019283525090919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600082516125cd818460208701612819565b9190910192915050565b60006001600160a01b03808916835280881660208401525060a0604083015261260460a083018688612545565b8281036060840152612617818587612545565b8381036080909401939093525081526020019695505050505050565b606081526000612647606083018789612545565b828103602084015261265a818688612545565b9150506001600160a01b03831660408301529695505050505050565b60a08152600061268a60a08301898b612592565b828103602084015261269d81888a612592565b6001600160a01b03969096166040840152505091151560608301521515608090910152949350505050565b60208152600082518060208401526126e7816040850160208701612819565b601f01601f19169190910160400192915050565b838152604060208201526000612715604083018486612592565b95945050505050565b6000808335601e19843603018112612734578283fd5b83018035915067ffffffffffffffff82111561274e578283fd5b6020019150600581901b360382131561276657600080fd5b9250929050565b6000808335601e19843603018112612783578283fd5b83018035915067ffffffffffffffff82111561279d578283fd5b60200191503681900382131561276657600080fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156127db576127db61285f565b604052919050565b60008160001904831182151516156127fd576127fd612849565b500290565b60008282101561281457612814612849565b500390565b60005b8381101561283457818101518382015260200161281c565b83811115612843576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461288a57600080fd5b50565b801515811461288a57600080fdfea26469706673582212207c3c33e25b4ca2b8a242a7b3030a40488ba04a38cf081996ee2d76fec9d1c68a64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c80639bf1401c1161007f578063d8a06f7311610059578063d8a06f7314610352578063f23a6e6114610386578063f2fde38b146103cb578063f3e301cf146103eb57600080fd5b80639bf1401c1461028c578063ad5c4648146102c0578063bc197c81146102f457600080fd5b80636d13582c116100bb5780636d13582c146101d9578063715018a61461022557806374a1b0b01461023a5780638da5cb5b1461026e57600080fd5b806301ffc9a71461016a57806302329a291461019f5780635c975abb146101bf57600080fd5b3661016557336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101635760405162461bcd60e51b815260206004820152600960248201527f4f6e6c792057455448000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b005b600080fd5b34801561017657600080fd5b5061018a610185366004612418565b61040c565b60405190151581526020015b60405180910390f35b3480156101ab57600080fd5b506101636101ba3660046123e0565b610475565b3480156101cb57600080fd5b5060025461018a9060ff1681565b3480156101e557600080fd5b5061020d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610196565b34801561023157600080fd5b506101636104e2565b34801561024657600080fd5b5061020d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561027a57600080fd5b506000546001600160a01b031661020d565b34801561029857600080fd5b5061020d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102cc57600080fd5b5061020d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561030057600080fd5b5061033961030f3660046122cf565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6040516001600160e01b03199091168152602001610196565b34801561035e57600080fd5b5061020d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039257600080fd5b506103396103a1366004612379565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b3480156103d757600080fd5b506101636103e6366004612297565b610593565b6103fe6103f9366004612440565b6106d1565b604051908152602001610196565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061046f57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6000546001600160a01b031633146104cf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015a565b6002805460ff1916911515919091179055565b6000546001600160a01b0316331461053c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b031633146105ed5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015a565b6001600160a01b0381166106695760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161015a565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000600260015414156107265760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161015a565b600260018190555460ff161561077e5760405162461bcd60e51b815260206004820152600d60248201527f5a61702069732070617573656400000000000000000000000000000000000000604482015260640161015a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156107e057600080fd5b505afa1580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081891906124dc565b90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663ef8658db61085660608a018a61276d565b61086360808c018c61276d565b61087060208e018e612297565b8d602001602081019061088391906123e0565b8e604001602081019061089691906123e0565b6040518863ffffffff1660e01b81526004016108b89796959493929190612676565b602060405180830381600087803b1580156108d257600080fd5b505af11580156108e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090a91906124dc565b6040517ff0f2a4d7000000000000000000000000000000000000000000000000000000008152600481018290529092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f0f2a4d790602401600060405180830381600087803b15801561098857600080fd5b505af115801561099c573d6000803e3d6000fd5b50506040517f81a36fb600000000000000000000000000000000000000000000000000000000815260048101859052600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506381a36fb69060240160206040518083038186803b158015610a1c57600080fd5b505afa158015610a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5491906122b3565b90506000853512610aef576001600160a01b038116635877aee68635610a7d602089018961276d565b6040518463ffffffff1660e01b8152600401610a9b939291906126fb565b602060405180830381600087803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed91906122b3565b505b6000610afb858061271e565b91505080156116c757610b1460408a0160208b016123e0565b610cd85760005b81811015610cd257610b68610b3360208c018c612297565b610b3d888061271e565b84818110610b5b57634e487b7160e01b600052603260045260246000fd5b9050602002013585611acb565b73b47e3cd837ddf8e4c57f05d70ab865de6e193bbb610b8a60208c018c612297565b6001600160a01b03161415610cca576000610ba5878061271e565b83818110610bc357634e487b7160e01b600052603260045260246000fd5b60405160209091029290920135602483015250600060448201526001600160a01b038516606482015260840160408051601f19818403018152919052602080820180516001600160e01b03167fbf31196f000000000000000000000000000000000000000000000000000000001790529091506000908190610c47908e018e612297565b6001600160a01b031683604051610c5e91906125bb565b6000604051808303816000865af19150503d8060008114610c9b576040519150601f19603f3d011682016040523d82523d6000602084013e610ca0565b606091505b5091509150818190610cc55760405162461bcd60e51b815260040161015a91906126c8565b505050505b600101610b1b565b50610deb565b610ce560208a018a612297565b6001600160a01b0316632eb2c2d63330610cff898061271e565b610d0c60208c018c61271e565b6040518763ffffffff1660e01b8152600401610d2d969594939291906125d7565b600060405180830381600087803b158015610d4757600080fd5b505af1158015610d5b573d6000803e3d6000fd5b50610d6d9250505060208a018a612297565b6040517fa22cb4650000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260016024830152919091169063a22cb46590604401600060405180830381600087803b158015610dd257600080fd5b505af1158015610de6573d6000803e3d6000fd5b505050505b6001600160a01b03821663b10402ea610e04878061271e565b610e1160208a018a61271e565b306040518663ffffffff1660e01b8152600401610e32959493929190612633565b602060405180830381600087803b158015610e4c57600080fd5b505af1158015610e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8491906124dc565b508160408601351561143d5785608001353411610f095760405162461bcd60e51b815260206004820152602560248201527f496e73756666696369656e74207661756c742073656e7420666f72206c69717560448201527f6964697479000000000000000000000000000000000000000000000000000000606482015260840161015a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f6457600080fd5b505af1158015610f78573d6000803e3d6000fd5b5050604080516370a0823160e01b8152306004820152908a013593506001600160a01b03851692506370a08231915060240160206040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa91906124dc565b101561106e5760405162461bcd60e51b815260206004820152602a60248201527f496e73756666696369656e7420746f6b656e7320616371756972656420666f7260448201527f206c697175696469747900000000000000000000000000000000000000000000606482015260840161015a565b6110a66001600160a01b0382167f00000000000000000000000000000000000000000000000000000000000000006040890135611d76565b604080517fe8e337000000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301529188013560448201819052608089013560648301526084820152606088013560a48201523060c48201524260e48201526000917f0000000000000000000000000000000000000000000000000000000000000000169063e8e337009061010401606060405180830381600087803b15801561117f57600080fd5b505af1158015611193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b791906124f4565b92506111f19150506001600160a01b0383167f00000000000000000000000000000000000000000000000000000000000000006000611d76565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636d91c0e27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561127b57600080fd5b505afa15801561128f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b391906122b3565b60405160e083901b6001600160e01b03191681526001600160a01b03918216600482015286821660248201527f0000000000000000000000000000000000000000000000000000000000000000909116604482015260640160206040518083038186803b15801561132357600080fd5b505afa158015611337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135b91906122b3565b90506113916001600160a01b0382167f000000000000000000000000000000000000000000000000000000000000000084611d76565b6040517f6c9b958800000000000000000000000000000000000000000000000000000000815260048101889052336024820152604481018390526202a30060648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636c9b958890608401600060405180830381600087803b15801561142257600080fd5b505af1158015611436573d6000803e3d6000fd5b5050505050505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561147f57600080fd5b505afa158015611493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b791906124dc565b905080156116c4576040517f034fc83c000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b038084169163a9059cbb917f0000000000000000000000000000000000000000000000000000000000000000169063034fc83c9060240160206040518083038186803b15801561154257600080fd5b505afa158015611556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157a91906122b3565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b1580156115c257600080fd5b505af11580156115d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fa91906123fc565b506040517f2699f55a0000000000000000000000000000000000000000000000000000000081526004810187905260248101829052336044820152600260648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632699f55a90608401602060405180830381600087803b15801561168a57600080fd5b505af115801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c291906124dc565b505b50505b601f88101561178657816001600160a01b0316630d636a096116ea8a6004611efa565b6116f58b6003611efa565b6117008c6002611efa565b61170b8d6001611efa565b6117168e6000611efa565b6040516001600160e01b031960e088901b168152941515600486015292151560248501529015156044840152151560648301521515608482015260a401600060405180830381600087803b15801561176d57600080fd5b505af1158015611781573d6000803e3d6000fd5b505050505b6001600160a01b0382166304a66b486117a260208a018a612521565b6117b79063ffffffff166402540be4006127e3565b6117c760408b0160208c01612521565b6117dc9063ffffffff166402540be4006127e3565b6117ec60608c0160408d01612521565b6118019063ffffffff166402540be4006127e3565b61181160808d0160608e01612521565b6118269063ffffffff166402540be4006127e3565b61183660a08e0160808f01612521565b61184b9063ffffffff166402540be4006127e3565b6040516001600160e01b031960e088901b1681526004810195909552602485019390935260448401919091526064830152608482015260a401600060405180830381600087803b15801561189e57600080fd5b505af11580156118b2573d6000803e3d6000fd5b50505050816001600160a01b031663c3cb8c146040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156118f157600080fd5b505af1158015611905573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508591506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561196d57600080fd5b505afa158015611981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a591906124dc565b6119af9190612802565b90508015611ab9576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611a3257600080fd5b505af1158015611a46573d6000803e3d6000fd5b50506040516000925033915083156108fc0290849084818181858888f19350505050905080611ab75760405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e64204574686572000000000000000000000000604482015260640161015a565b505b50506001805550909695505050505050565b60606001600160a01b03841673b47e3cd837ddf8e4c57f05d70ab865de6e193bbb1415611c8357600083604051602401611b0791815260200190565b60408051601f198184030181529181526020820180516001600160e01b03167f58178168000000000000000000000000000000000000000000000000000000001790525190915060009081906001600160a01b03881690611b699085906125bb565b600060405180830381855afa9150503d8060008114611ba4576040519150601f19603f3d011682016040523d82523d6000602084013e611ba9565b606091505b5091509150600081806020019051810190611bc491906122b3565b9050828015611bdb57506001600160a01b03811633145b611c275760405162461bcd60e51b815260206004820152601160248201527f4e6f7420746865204e4654206f776e6572000000000000000000000000000000604482015260640161015a565b6040516024810188905260440160408051601f198184030181529190526020810180516001600160e01b03167f8264fe98000000000000000000000000000000000000000000000000000000001790529450611ceb9350505050565b6040513360248201526001600160a01b03831660448201526064810184905260840160408051601f198184030181529190526020810180516001600160e01b03167f42842e0e0000000000000000000000000000000000000000000000000000000017905290505b600080856001600160a01b031683604051611d0691906125bb565b6000604051808303816000865af19150503d8060008114611d43576040519150601f19603f3d011682016040523d82523d6000602084013e611d48565b606091505b5091509150818190611d6d5760405162461bcd60e51b815260040161015a91906126c8565b50505050505050565b801580611e1857506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611dde57600080fd5b505afa158015611df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1691906124dc565b155b611e8a5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161015a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b03167f095ea7b300000000000000000000000000000000000000000000000000000000179052611ef5908490611f1c565b505050565b6000600183831c8116908114611f11576000611f14565b60015b949350505050565b6000611f71826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120019092919063ffffffff16565b805190915015611ef55780806020019051810190611f8f91906123fc565b611ef55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161015a565b6060612010848460008561201a565b90505b9392505050565b6060824710156120925760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161015a565b843b6120e05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161015a565b600080866001600160a01b031685876040516120fc91906125bb565b60006040518083038185875af1925050503d8060008114612139576040519150601f19603f3d011682016040523d82523d6000602084013e61213e565b606091505b509150915061214e828286612159565b979650505050505050565b60608315612168575081612013565b8251156121785782518084602001fd5b8160405162461bcd60e51b815260040161015a91906126c8565b600082601f8301126121a2578081fd5b8135602067ffffffffffffffff8211156121be576121be61285f565b8160051b6121cd8282016127b2565b8381528281019086840183880185018910156121e7578687fd5b8693505b858410156122095780358352600193909301929184019184016121eb565b50979650505050505050565b600082601f830112612225578081fd5b813567ffffffffffffffff81111561223f5761223f61285f565b612252601f8201601f19166020016127b2565b818152846020838601011115612266578283fd5b816020850160208301379081016020019190915292915050565b600060a08284031215612291578081fd5b50919050565b6000602082840312156122a8578081fd5b813561201381612875565b6000602082840312156122c4578081fd5b815161201381612875565b600080600080600060a086880312156122e6578081fd5b85356122f181612875565b9450602086013561230181612875565b9350604086013567ffffffffffffffff8082111561231d578283fd5b61232989838a01612192565b9450606088013591508082111561233e578283fd5b61234a89838a01612192565b9350608088013591508082111561235f578283fd5b5061236c88828901612215565b9150509295509295909350565b600080600080600060a08688031215612390578081fd5b853561239b81612875565b945060208601356123ab81612875565b93506040860135925060608601359150608086013567ffffffffffffffff8111156123d4578182fd5b61236c88828901612215565b6000602082840312156123f1578081fd5b81356120138161288d565b60006020828403121561240d578081fd5b81516120138161288d565b600060208284031215612429578081fd5b81356001600160e01b031981168114612013578182fd5b60008060008060006101208688031215612458578081fd5b853567ffffffffffffffff8082111561246f578283fd5b61247b89838a01612280565b9650602088013595506124918960408a01612280565b945060e08801359150808211156124a6578283fd5b908701906040828a0312156124b9578283fd5b90925061010087013590808211156124cf578283fd5b5061236c88828901612280565b6000602082840312156124ed578081fd5b5051919050565b600080600060608486031215612508578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215612532578081fd5b813563ffffffff81168114612013578182fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612576578081fd5b8260051b80836020870137939093016020019283525090919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600082516125cd818460208701612819565b9190910192915050565b60006001600160a01b03808916835280881660208401525060a0604083015261260460a083018688612545565b8281036060840152612617818587612545565b8381036080909401939093525081526020019695505050505050565b606081526000612647606083018789612545565b828103602084015261265a818688612545565b9150506001600160a01b03831660408301529695505050505050565b60a08152600061268a60a08301898b612592565b828103602084015261269d81888a612592565b6001600160a01b03969096166040840152505091151560608301521515608090910152949350505050565b60208152600082518060208401526126e7816040850160208701612819565b601f01601f19169190910160400192915050565b838152604060208201526000612715604083018486612592565b95945050505050565b6000808335601e19843603018112612734578283fd5b83018035915067ffffffffffffffff82111561274e578283fd5b6020019150600581901b360382131561276657600080fd5b9250929050565b6000808335601e19843603018112612783578283fd5b83018035915067ffffffffffffffff82111561279d578283fd5b60200191503681900382131561276657600080fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156127db576127db61285f565b604052919050565b60008160001904831182151516156127fd576127fd612849565b500290565b60008282101561281457612814612849565b500390565b60005b8381101561283457818101518382015260200161281c565b83811115612843576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461288a57600080fd5b50565b801515811461288a57600080fdfea26469706673582212207c3c33e25b4ca2b8a242a7b3030a40488ba04a38cf081996ee2d76fec9d1c68a64736f6c63430008040033",
  "devdoc": {
    "author": "Twade",
    "kind": "dev",
    "methods": {
      "createVault((address,bool,bool,string,string),uint256,(uint32,uint32,uint32,uint32,uint32),(int256,bytes),(uint256[],uint256[],uint256,uint256,uint256))": {
        "details": "Tokens are deposited into the vault prior to fees being sent. ",
        "params": {
          "assetTokens": "Tokens to be transferred to the vault in exchange for vault tokens ",
          "eligibilityStorage": "Eligibility implementation, stored in a `vaultEligibilityStorage` struct",
          "vaultData": "Basic information about the vault stored in `vaultInfo` struct",
          "vaultFeatures": "A numeric representation of boolean values for features on the vault",
          "vaultFees": "Fee definitions stored in a `vaultFeesConfig` struct"
        },
        "returns": {
          "vaultId_": "The numeric ID of the NFTX vault"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause(bool)": {
        "params": {
          "_paused": "New pause state"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "WETH()": {
        "notice": "An interface for the WETH contract"
      },
      "constructor": {
        "notice": "Initialises our zap by setting contract addresses onto their respective interfaces."
      },
      "createVault((address,bool,bool,string,string),uint256,(uint32,uint32,uint32,uint32,uint32),(int256,bytes),(uint256[],uint256[],uint256,uint256,uint256))": {
        "notice": "Creates an NFTX vault, handling any desired settings and tokens. "
      },
      "inventoryStaking()": {
        "notice": "An interface for the NFTX Vault Factory contract"
      },
      "pause(bool)": {
        "notice": "Allows our zap to be paused to prevent any processing. "
      },
      "paused()": {
        "notice": "Allows zap to be paused"
      },
      "sushiRouter()": {
        "notice": "Holds the mapping of our sushi router"
      },
      "vaultFactory()": {
        "notice": "An interface for the NFTX Vault Factory contract"
      }
    },
    "notice": "An amalgomation of vault creation steps, merged and optimised in a single contract call in an attempt reduce gas costs to the end-user. ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4285,
        "contract": "contracts/solidity/zaps/VaultCreationZap.sol:NFTXVaultCreationZap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4397,
        "contract": "contracts/solidity/zaps/VaultCreationZap.sol:NFTXVaultCreationZap",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4867,
        "contract": "contracts/solidity/zaps/VaultCreationZap.sol:NFTXVaultCreationZap",
        "label": "paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}