{
  "address": "0x5Dc9ff662e782DAcee4e57e148B2E038DDc6D32D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isGuardian",
          "type": "bool"
        }
      ],
      "name": "SetIsGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "SetPaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingTokenProvider",
          "type": "address"
        }
      ],
      "name": "__NFTXLPStaking__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stakingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            }
          ],
          "internalType": "struct NFTXLPStaking.StakingPool",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "name": "_oldRewardDistributionTokenAddr",
      "outputs": [
        {
          "internalType": "contract IRewardDistributionToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stakingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            }
          ],
          "internalType": "struct NFTXLPStaking.StakingPool",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "name": "_rewardDistributionTokenAddr",
      "outputs": [
        {
          "internalType": "contract TimelockRewardDistributionTokenImpl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stakingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            }
          ],
          "internalType": "struct NFTXLPStaking.StakingPool",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "name": "_unusedRewardDistributionTokenAddr",
      "outputs": [
        {
          "internalType": "contract IRewardDistributionToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "addPoolForVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "vaultIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimMultipleRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "emergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "emergencyExitAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "emergencyMigrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "lockedLPBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "lockedUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "newRewardDistributionToken",
      "outputs": [
        {
          "internalType": "contract TimelockRewardDistributionTokenImpl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newTimelockRewardDistTokenImpl",
      "outputs": [
        {
          "internalType": "contract TimelockRewardDistributionTokenImpl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftxVaultFactory",
      "outputs": [
        {
          "internalType": "contract INFTXVaultFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "oldBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "oldRewardDistributionToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "onlyOwnerIfPaused",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "receiveRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "retrieveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDistTokenImpl",
      "outputs": [
        {
          "internalType": "contract IRewardDistributionToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "rewardDistributionToken",
      "outputs": [
        {
          "internalType": "contract IRewardDistributionToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "rewardDistributionTokenAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isGuardian",
          "type": "bool"
        }
      ],
      "name": "setIsGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFactory",
          "type": "address"
        }
      ],
      "name": "setNFTXVaultFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newProvider",
          "type": "address"
        }
      ],
      "name": "setStakingTokenProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingTokenProvider",
      "outputs": [
        {
          "internalType": "contract StakingTokenProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timelockLength",
          "type": "uint256"
        }
      ],
      "name": "timelockDepositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "unusedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "unusedRewardDistributionToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "updatePoolForVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "vaultIds",
          "type": "uint256[]"
        }
      ],
      "name": "updatePoolForVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultStakingInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5eecfd3f79c6e43482feaadb64c65d023fdb1ea9e60268834f47ce8e6a61791f",
  "receipt": {
    "to": null,
    "from": "0xDEA9196Dcdd2173D6E369c2AcC0faCc83fD9346a",
    "contractAddress": "0x5Dc9ff662e782DAcee4e57e148B2E038DDc6D32D",
    "transactionIndex": 82,
    "gasUsed": "5042542",
    "logsBloom": "0x
    "blockHash": "0x6fe2c8a454266d09796d24d333328ff461462f841b1633cf15537ff2915dc63e",
    "transactionHash": "0x5eecfd3f79c6e43482feaadb64c65d023fdb1ea9e60268834f47ce8e6a61791f",
    "logs": [],
    "blockNumber": 8105376,
    "cumulativeGasUsed": "22062805",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "44b9e1e03cd7d0477343862c8073f6d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isGuardian\",\"type\":\"bool\"}],\"name\":\"SetIsGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingTokenProvider\",\"type\":\"address\"}],\"name\":\"__NFTXLPStaking__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct NFTXLPStaking.StakingPool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"_oldRewardDistributionTokenAddr\",\"outputs\":[{\"internalType\":\"contract IRewardDistributionToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct NFTXLPStaking.StakingPool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"_rewardDistributionTokenAddr\",\"outputs\":[{\"internalType\":\"contract TimelockRewardDistributionTokenImpl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct NFTXLPStaking.StakingPool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"_unusedRewardDistributionTokenAddr\",\"outputs\":[{\"internalType\":\"contract IRewardDistributionToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"addPoolForVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"vaultIds\",\"type\":\"uint256[]\"}],\"name\":\"claimMultipleRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"emergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"emergencyExitAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"emergencyMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"lockedLPBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"lockedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"newRewardDistributionToken\",\"outputs\":[{\"internalType\":\"contract TimelockRewardDistributionTokenImpl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newTimelockRewardDistTokenImpl\",\"outputs\":[{\"internalType\":\"contract TimelockRewardDistributionTokenImpl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftxVaultFactory\",\"outputs\":[{\"internalType\":\"contract INFTXVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"oldBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"oldRewardDistributionToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"onlyOwnerIfPaused\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receiveRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistTokenImpl\",\"outputs\":[{\"internalType\":\"contract IRewardDistributionToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"rewardDistributionToken\",\"outputs\":[{\"internalType\":\"contract IRewardDistributionToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"rewardDistributionTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isGuardian\",\"type\":\"bool\"}],\"name\":\"setIsGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setNFTXVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newProvider\",\"type\":\"address\"}],\"name\":\"setStakingTokenProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTokenProvider\",\"outputs\":[{\"internalType\":\"contract StakingTokenProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelockLength\",\"type\":\"uint256\"}],\"name\":\"timelockDepositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unusedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"unusedRewardDistributionToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"updatePoolForVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"vaultIds\",\"type\":\"uint256[]\"}],\"name\":\"updatePoolForVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultStakingInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/solidity/NFTXLPStaking.sol\":\"NFTXLPStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/solidity/NFTXLPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./util/PausableUpgradeable.sol\\\";\\nimport \\\"./util/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./proxy/ClonesUpgradeable.sol\\\";\\nimport \\\"./token/TimelockRewardDistributionTokenImpl.sol\\\";\\nimport \\\"./interface/INFTXVaultFactory.sol\\\";\\nimport \\\"./interface/IRewardDistributionToken.sol\\\";\\nimport \\\"./StakingTokenProvider.sol\\\";\\n\\n// Author: 0xKiwi.\\n\\n// Pausing codes for LP staking are:\\n// 10: Deposit\\n\\ncontract NFTXLPStaking is PausableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    INFTXVaultFactory public nftxVaultFactory;\\n    IRewardDistributionToken public rewardDistTokenImpl;\\n    StakingTokenProvider public stakingTokenProvider;\\n\\n    event PoolCreated(uint256 vaultId, address pool);\\n    event PoolUpdated(uint256 vaultId, address pool);\\n    event FeesReceived(uint256 vaultId, uint256 amount);\\n\\n    struct StakingPool {\\n        address stakingToken;\\n        address rewardToken;\\n    }\\n    mapping(uint256 => StakingPool) public vaultStakingInfo;\\n\\n    TimelockRewardDistributionTokenImpl public newTimelockRewardDistTokenImpl;\\n\\n    function __NFTXLPStaking__init(address _stakingTokenProvider)\\n        external\\n        initializer\\n    {\\n        __Ownable_init();\\n        require(_stakingTokenProvider != address(0), \\\"Provider != address(0)\\\");\\n        require(\\n            address(newTimelockRewardDistTokenImpl) == address(0),\\n            \\\"Already assigned\\\"\\n        );\\n        stakingTokenProvider = StakingTokenProvider(_stakingTokenProvider);\\n        newTimelockRewardDistTokenImpl = new TimelockRewardDistributionTokenImpl();\\n        newTimelockRewardDistTokenImpl.__TimelockRewardDistributionToken_init(\\n            IERC20Upgradeable(address(0)),\\n            \\\"\\\",\\n            \\\"\\\"\\n        );\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            msg.sender == owner() ||\\n                msg.sender == nftxVaultFactory.feeDistributor(),\\n            \\\"LPStaking: Not authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    function setNFTXVaultFactory(address newFactory) external onlyOwner {\\n        require(\\n            address(nftxVaultFactory) == address(0),\\n            \\\"nftxVaultFactory is immutable\\\"\\n        );\\n        nftxVaultFactory = INFTXVaultFactory(newFactory);\\n    }\\n\\n    function setStakingTokenProvider(address newProvider) external onlyOwner {\\n        require(newProvider != address(0));\\n        stakingTokenProvider = StakingTokenProvider(newProvider);\\n    }\\n\\n    function addPoolForVault(uint256 vaultId) external onlyAdmin {\\n        require(\\n            address(nftxVaultFactory) != address(0),\\n            \\\"LPStaking: Factory not set\\\"\\n        );\\n        require(\\n            vaultStakingInfo[vaultId].stakingToken == address(0),\\n            \\\"LPStaking: Pool already exists\\\"\\n        );\\n        address _rewardToken = nftxVaultFactory.vault(vaultId);\\n        address _stakingToken = stakingTokenProvider.stakingTokenForVaultToken(\\n            _rewardToken\\n        );\\n        StakingPool memory pool = StakingPool(_stakingToken, _rewardToken);\\n        vaultStakingInfo[vaultId] = pool;\\n        address newRewardDistToken = _deployDividendToken(pool);\\n        emit PoolCreated(vaultId, newRewardDistToken);\\n    }\\n\\n    function updatePoolForVaults(uint256[] calldata vaultIds) external {\\n        uint256 length = vaultIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            updatePoolForVault(vaultIds[i]);\\n        }\\n    }\\n\\n    // In case the provider changes, this lets the pool be updated. Anyone can call it.\\n    function updatePoolForVault(uint256 vaultId) public {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        // Not letting people use this function to create new pools.\\n        require(\\n            pool.stakingToken != address(0),\\n            \\\"LPStaking: Pool doesn't exist\\\"\\n        );\\n        address _stakingToken = stakingTokenProvider.stakingTokenForVaultToken(\\n            pool.rewardToken\\n        );\\n        StakingPool memory newPool = StakingPool(\\n            _stakingToken,\\n            pool.rewardToken\\n        );\\n        vaultStakingInfo[vaultId] = newPool;\\n\\n        // If the pool is already deployed, ignore the update.\\n        address addr = address(_rewardDistributionTokenAddr(newPool));\\n        if (isContract(addr)) {\\n            return;\\n        }\\n        address newRewardDistToken = _deployDividendToken(newPool);\\n        emit PoolUpdated(vaultId, newRewardDistToken);\\n    }\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount)\\n        external\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        if (pool.stakingToken == address(0)) {\\n            // In case the pair is updated, but not yet\\n            return false;\\n        }\\n\\n        TimelockRewardDistributionTokenImpl rewardDistToken = _rewardDistributionTokenAddr(\\n                pool\\n            );\\n        // Don't distribute rewards unless there are people to distribute to.\\n        // Also added here if the distribution token is not deployed, just forfeit rewards for now.\\n        if (\\n            !isContract(address(rewardDistToken)) ||\\n            rewardDistToken.totalSupply() == 0\\n        ) {\\n            return false;\\n        }\\n        // We \\\"pull\\\" to the dividend tokens so the vault only needs to approve this contract.\\n        IERC20Upgradeable(pool.rewardToken).safeTransferFrom(\\n            msg.sender,\\n            address(rewardDistToken),\\n            amount\\n        );\\n        rewardDistToken.distributeRewards(amount);\\n        emit FeesReceived(vaultId, amount);\\n        return true;\\n    }\\n\\n    function deposit(uint256 vaultId, uint256 amount) external {\\n        onlyOwnerIfPaused(10);\\n        // Check the pool in case its been updated.\\n        updatePoolForVault(vaultId);\\n\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        require(pool.stakingToken != address(0), \\\"LPStaking: Nonexistent pool\\\");\\n        IERC20Upgradeable(pool.stakingToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n        TimelockRewardDistributionTokenImpl xSLPToken = _rewardDistributionTokenAddr(\\n                pool\\n            );\\n\\n        // If the user has an existing timelock, check if it is in the future.\\n        uint256 currentTimelock = xSLPToken.timelockUntil(msg.sender);\\n        if (currentTimelock > block.timestamp) {\\n            // Maintain the same timelock if they already have one.\\n            // We do this instead of patching in the token because\\n            // the xSLP contracts as currently deployed are not upgradeable.\\n            xSLPToken.timelockMint(\\n                msg.sender,\\n                amount,\\n                currentTimelock - block.timestamp\\n            );\\n        } else {\\n            // Timelock for 2 seconds if they don't already have a timelock to prevent flash loans.\\n            xSLPToken.timelockMint(msg.sender, amount, 2);\\n        }\\n    }\\n\\n    function timelockDepositFor(\\n        uint256 vaultId,\\n        address account,\\n        uint256 amount,\\n        uint256 timelockLength\\n    ) external {\\n        require(timelockLength < 2592000, \\\"Timelock too long\\\");\\n        require(nftxVaultFactory.excludedFromFees(msg.sender), \\\"Not zap\\\");\\n        onlyOwnerIfPaused(10);\\n        // Check the pool in case its been updated.\\n        updatePoolForVault(vaultId);\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        require(pool.stakingToken != address(0), \\\"LPStaking: Nonexistent pool\\\");\\n        IERC20Upgradeable(pool.stakingToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n        _rewardDistributionTokenAddr(pool).timelockMint(\\n            account,\\n            amount,\\n            timelockLength\\n        );\\n    }\\n\\n    function exit(uint256 vaultId) external {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        _claimRewards(pool, msg.sender);\\n        _withdraw(pool, balanceOf(vaultId, msg.sender), msg.sender);\\n    }\\n\\n    function emergencyExitAndClaim(address _stakingToken, address _rewardToken)\\n        external\\n    {\\n        StakingPool memory pool = StakingPool(_stakingToken, _rewardToken);\\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\\n            pool\\n        );\\n        require(isContract(address(dist)), \\\"Not a pool\\\");\\n        _claimRewards(pool, msg.sender);\\n        _withdraw(pool, dist.balanceOf(msg.sender), msg.sender);\\n    }\\n\\n    function emergencyExit(address _stakingToken, address _rewardToken)\\n        external\\n    {\\n        StakingPool memory pool = StakingPool(_stakingToken, _rewardToken);\\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\\n            pool\\n        );\\n        require(isContract(address(dist)), \\\"Not a pool\\\");\\n        _withdraw(pool, dist.balanceOf(msg.sender), msg.sender);\\n    }\\n\\n    function emergencyMigrate(uint256 vaultId) external {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        IRewardDistributionToken unusedDist = _unusedRewardDistributionTokenAddr(\\n                pool\\n            );\\n        IRewardDistributionToken oldDist = _oldRewardDistributionTokenAddr(\\n            pool\\n        );\\n\\n        uint256 unusedDistBal;\\n        if (isContract(address(unusedDist))) {\\n            unusedDistBal = unusedDist.balanceOf(msg.sender);\\n            if (unusedDistBal > 0) {\\n                unusedDist.burnFrom(msg.sender, unusedDistBal);\\n            }\\n        }\\n        uint256 oldDistBal;\\n        if (isContract(address(oldDist))) {\\n            oldDistBal = oldDist.balanceOf(msg.sender);\\n            if (oldDistBal > 0) {\\n                oldDist.withdrawReward(msg.sender);\\n                oldDist.burnFrom(msg.sender, oldDistBal);\\n            }\\n        }\\n\\n        TimelockRewardDistributionTokenImpl newDist = _rewardDistributionTokenAddr(\\n                pool\\n            );\\n        if (!isContract(address(newDist))) {\\n            address deployedDist = _deployDividendToken(pool);\\n            require(\\n                deployedDist == address(newDist),\\n                \\\"Not deploying proper distro\\\"\\n            );\\n            emit PoolUpdated(vaultId, deployedDist);\\n        }\\n        require(unusedDistBal + oldDistBal > 0, \\\"Nothing to migrate\\\");\\n        newDist.mint(msg.sender, unusedDistBal + oldDistBal);\\n    }\\n\\n    function withdraw(uint256 vaultId, uint256 amount) external {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        _claimRewards(pool, msg.sender);\\n        _withdraw(pool, amount, msg.sender);\\n    }\\n\\n    function claimRewards(uint256 vaultId) public {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        _claimRewards(pool, msg.sender);\\n    }\\n\\n    function claimMultipleRewards(uint256[] calldata vaultIds) external {\\n        uint256 length = vaultIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            claimRewards(vaultIds[i]);\\n        }\\n    }\\n\\n    function newRewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (TimelockRewardDistributionTokenImpl)\\n    {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        if (pool.stakingToken == address(0)) {\\n            return TimelockRewardDistributionTokenImpl(address(0));\\n        }\\n        return _rewardDistributionTokenAddr(pool);\\n    }\\n\\n    function rewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (IRewardDistributionToken)\\n    {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        if (pool.stakingToken == address(0)) {\\n            return IRewardDistributionToken(address(0));\\n        }\\n        return _unusedRewardDistributionTokenAddr(pool);\\n    }\\n\\n    function oldRewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        if (pool.stakingToken == address(0)) {\\n            return address(0);\\n        }\\n        return address(_oldRewardDistributionTokenAddr(pool));\\n    }\\n\\n    function unusedRewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        if (pool.stakingToken == address(0)) {\\n            return address(0);\\n        }\\n        return address(_unusedRewardDistributionTokenAddr(pool));\\n    }\\n\\n    function rewardDistributionTokenAddr(\\n        address stakedToken,\\n        address rewardToken\\n    ) public view returns (address) {\\n        StakingPool memory pool = StakingPool(stakedToken, rewardToken);\\n        return address(_rewardDistributionTokenAddr(pool));\\n    }\\n\\n    function balanceOf(uint256 vaultId, address addr)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\\n            pool\\n        );\\n        require(isContract(address(dist)), \\\"Not a pool\\\");\\n        return dist.balanceOf(addr);\\n    }\\n\\n    function oldBalanceOf(uint256 vaultId, address addr)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        IRewardDistributionToken dist = _oldRewardDistributionTokenAddr(pool);\\n        require(isContract(address(dist)), \\\"Not a pool\\\");\\n        return dist.balanceOf(addr);\\n    }\\n\\n    function unusedBalanceOf(uint256 vaultId, address addr)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        IRewardDistributionToken dist = _unusedRewardDistributionTokenAddr(\\n            pool\\n        );\\n        require(isContract(address(dist)), \\\"Not a pool\\\");\\n        return dist.balanceOf(addr);\\n    }\\n\\n    function lockedUntil(uint256 vaultId, address who)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\\n            pool\\n        );\\n        return dist.timelockUntil(who);\\n    }\\n\\n    function lockedLPBalance(uint256 vaultId, address who)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\\n            pool\\n        );\\n        if (block.timestamp > dist.timelockUntil(who)) {\\n            return 0;\\n        }\\n        return dist.balanceOf(who);\\n    }\\n\\n    function _claimRewards(StakingPool memory pool, address account) internal {\\n        require(pool.stakingToken != address(0), \\\"LPStaking: Nonexistent pool\\\");\\n        _rewardDistributionTokenAddr(pool).withdrawReward(account);\\n    }\\n\\n    function _withdraw(\\n        StakingPool memory pool,\\n        uint256 amount,\\n        address account\\n    ) internal {\\n        require(pool.stakingToken != address(0), \\\"LPStaking: Nonexistent pool\\\");\\n        _rewardDistributionTokenAddr(pool).burnFrom(account, amount);\\n        IERC20Upgradeable(pool.stakingToken).safeTransfer(account, amount);\\n    }\\n\\n    function _deployDividendToken(StakingPool memory pool)\\n        internal\\n        returns (address)\\n    {\\n        // Changed to use new nonces.\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(pool.stakingToken, pool.rewardToken, uint256(2))\\n        );\\n        address rewardDistToken = ClonesUpgradeable.cloneDeterministic(\\n            address(newTimelockRewardDistTokenImpl),\\n            salt\\n        );\\n        string memory name = stakingTokenProvider.nameForStakingToken(\\n            pool.rewardToken\\n        );\\n        TimelockRewardDistributionTokenImpl(rewardDistToken)\\n            .__TimelockRewardDistributionToken_init(\\n                IERC20Upgradeable(pool.rewardToken),\\n                name,\\n                name\\n            );\\n        return rewardDistToken;\\n    }\\n\\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\\n    function _rewardDistributionTokenAddr(StakingPool memory pool)\\n        public\\n        view\\n        returns (TimelockRewardDistributionTokenImpl)\\n    {\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(\\n                pool.stakingToken,\\n                pool.rewardToken,\\n                uint256(2) /* small nonce to change tokens */\\n            )\\n        );\\n        address tokenAddr = ClonesUpgradeable.predictDeterministicAddress(\\n            address(newTimelockRewardDistTokenImpl),\\n            salt\\n        );\\n        return TimelockRewardDistributionTokenImpl(tokenAddr);\\n    }\\n\\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\\n    function _oldRewardDistributionTokenAddr(StakingPool memory pool)\\n        public\\n        view\\n        returns (IRewardDistributionToken)\\n    {\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(pool.stakingToken, pool.rewardToken, uint256(1))\\n        );\\n        address tokenAddr = ClonesUpgradeable.predictDeterministicAddress(\\n            address(rewardDistTokenImpl),\\n            salt\\n        );\\n        return IRewardDistributionToken(tokenAddr);\\n    }\\n\\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\\n    function _unusedRewardDistributionTokenAddr(StakingPool memory pool)\\n        public\\n        view\\n        returns (IRewardDistributionToken)\\n    {\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(pool.stakingToken, pool.rewardToken)\\n        );\\n        address tokenAddr = ClonesUpgradeable.predictDeterministicAddress(\\n            address(rewardDistTokenImpl),\\n            salt\\n        );\\n        return IRewardDistributionToken(tokenAddr);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function retrieveTokens(\\n        uint256 vaultId,\\n        uint256 amount,\\n        address from,\\n        address to\\n    ) public onlyOwner {\\n        StakingPool memory pool = vaultStakingInfo[vaultId];\\n        TimelockRewardDistributionTokenImpl xSlp = _rewardDistributionTokenAddr(\\n            pool\\n        );\\n        xSlp.burnFrom(from, amount);\\n        xSlp.mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x62622e0e2fa1f1f41814ccf1a7fa0ad8cbaf0d0114e2d6bafb20c474865cdaa1\",\"license\":\"MIT\"},\"contracts/solidity/StakingTokenProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./util/OwnableUpgradeable.sol\\\";\\nimport \\\"./token/IERC20Metadata.sol\\\";\\n\\n// Author: 0xKiwi.\\n\\ncontract StakingTokenProvider is OwnableUpgradeable {\\n    address public uniLikeExchange;\\n    address public defaultPairedToken;\\n    string public defaultPrefix;\\n    mapping(address => address) public pairedToken;\\n    mapping(address => string) public pairedPrefix;\\n\\n    event NewDefaultPaired(address oldPaired, address newPaired);\\n    event NewPairedTokenForVault(\\n        address vaultToken,\\n        address oldPairedtoken,\\n        address newPairedToken\\n    );\\n\\n    // This is an address provder to allow us to abstract out what liquidity\\n    // our vault tokens should be paired with.\\n    function __StakingTokenProvider_init(\\n        address _uniLikeExchange,\\n        address _defaultPairedtoken,\\n        string memory _defaultPrefix\\n    ) public initializer {\\n        __Ownable_init();\\n        require(_uniLikeExchange != address(0), \\\"Cannot be address(0)\\\");\\n        require(_defaultPairedtoken != address(0), \\\"Cannot be address(0)\\\");\\n        uniLikeExchange = _uniLikeExchange;\\n        defaultPairedToken = _defaultPairedtoken;\\n        defaultPrefix = _defaultPrefix;\\n    }\\n\\n    function setPairedTokenForVaultToken(\\n        address _vaultToken,\\n        address _newPairedToken,\\n        string calldata _newPrefix\\n    ) external onlyOwner {\\n        require(_newPairedToken != address(0), \\\"Cannot be address(0)\\\");\\n        emit NewPairedTokenForVault(\\n            _vaultToken,\\n            pairedToken[_vaultToken],\\n            _newPairedToken\\n        );\\n        pairedToken[_vaultToken] = _newPairedToken;\\n        pairedPrefix[_vaultToken] = _newPrefix;\\n    }\\n\\n    function setDefaultPairedToken(\\n        address _newDefaultPaired,\\n        string calldata _newDefaultPrefix\\n    ) external onlyOwner {\\n        emit NewDefaultPaired(defaultPairedToken, _newDefaultPaired);\\n        defaultPairedToken = _newDefaultPaired;\\n        defaultPrefix = _newDefaultPrefix;\\n    }\\n\\n    function stakingTokenForVaultToken(address _vaultToken)\\n        external\\n        view\\n        returns (address)\\n    {\\n        address _pairedToken = pairedToken[_vaultToken];\\n        if (_pairedToken == address(0)) {\\n            _pairedToken = defaultPairedToken;\\n        }\\n        return pairFor(uniLikeExchange, _vaultToken, _pairedToken);\\n    }\\n\\n    function nameForStakingToken(address _vaultToken)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        string memory _pairedPrefix = pairedPrefix[_vaultToken];\\n        if (bytes(_pairedPrefix).length == 0) {\\n            _pairedPrefix = defaultPrefix;\\n        }\\n        address _pairedToken = pairedToken[_vaultToken];\\n        if (_pairedToken == address(0)) {\\n            _pairedToken = defaultPairedToken;\\n        }\\n\\n        string memory symbol1 = IERC20Metadata(_vaultToken).symbol();\\n        string memory symbol2 = IERC20Metadata(_pairedToken).symbol();\\n        return string(abi.encodePacked(_pairedPrefix, symbol1, symbol2));\\n    }\\n\\n    function pairForVaultToken(address _vaultToken, address _pairedToken)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return pairFor(uniLikeExchange, _vaultToken, _pairedToken);\\n    }\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            hex\\\"e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x97c64d7deed736b4267aad510a3192f051de37964c1facc9a34cfd63f934040a\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/IBeacon.sol\\\";\\n\\ninterface INFTXVaultFactory is IBeacon {\\n    // Read functions.\\n    function numVaults() external view returns (uint256);\\n\\n    function zapContract() external view returns (address);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function eligibilityManager() external view returns (address);\\n\\n    function vault(uint256 vaultId) external view returns (address);\\n\\n    function allVaults() external view returns (address[] memory);\\n\\n    function vaultsForAsset(address asset)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function isLocked(uint256 id) external view returns (bool);\\n\\n    function excludedFromFees(address addr) external view returns (bool);\\n\\n    function factoryMintFee() external view returns (uint64);\\n\\n    function factoryRandomRedeemFee() external view returns (uint64);\\n\\n    function factoryTargetRedeemFee() external view returns (uint64);\\n\\n    function factoryRandomSwapFee() external view returns (uint64);\\n\\n    function factoryTargetSwapFee() external view returns (uint64);\\n\\n    function vaultFees(uint256 vaultId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    event NewFeeDistributor(address oldDistributor, address newDistributor);\\n    event NewZapContract(address oldZap, address newZap);\\n    event FeeExclusion(address feeExcluded, bool excluded);\\n    event NewEligibilityManager(address oldEligManager, address newEligManager);\\n    event NewVault(\\n        uint256 indexed vaultId,\\n        address vaultAddress,\\n        address assetAddress\\n    );\\n    event UpdateVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n    event DisableVaultFees(uint256 vaultId);\\n    event UpdateFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n\\n    // Write functions.\\n    function __NFTXVaultFactory_init(\\n        address _vaultImpl,\\n        address _feeDistributor\\n    ) external;\\n\\n    function createVault(\\n        string calldata name,\\n        string calldata symbol,\\n        address _assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    ) external returns (uint256);\\n\\n    function setFeeDistributor(address _feeDistributor) external;\\n\\n    function setEligibilityManager(address _eligibilityManager) external;\\n\\n    function setZapContract(address _zapContract) external;\\n\\n    function setFeeExclusion(address _excludedAddr, bool excluded) external;\\n\\n    function setFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function setVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees(uint256 vaultId) external;\\n}\\n\",\"keccak256\":\"0x9780b597cd74ef0cf4db1084f8b8f96dd6b643645cddf70d5c81a6caf372057a\",\"license\":\"MIT\"},\"contracts/solidity/interface/IRewardDistributionToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\n\\ninterface IRewardDistributionToken is IERC20Upgradeable {\\n    function distributeRewards(uint256 amount) external;\\n\\n    function __RewardDistributionToken_init(\\n        IERC20Upgradeable _target,\\n        string memory _name,\\n        string memory _symbol\\n    ) external;\\n\\n    function mint(\\n        address account,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function withdrawReward(address user) external;\\n\\n    function dividendOf(address _owner) external view returns (uint256);\\n\\n    function withdrawnRewardOf(address _owner) external view returns (uint256);\\n\\n    function accumulativeRewardOf(address _owner)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x5598b5dab56422fbad589a9f7b0de90d97dd2c41db304482a4378a69d08c6b05\",\"license\":\"MIT\"},\"contracts/solidity/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(\\n                ptr,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(\\n                add(ptr, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt)\\n        internal\\n        returns (address instance)\\n    {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(\\n                ptr,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(\\n                add(ptr, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(\\n                ptr,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(\\n                add(ptr, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x2610cf17ea9bfda24378db818f43807fe00d1ddce0f11eb5930350bbe50cc85d\",\"license\":\"MIT\"},\"contracts/solidity/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function childImplementation() external view returns (address);\\n\\n    function upgradeChildTo(address newImplementation) external;\\n}\\n\",\"keccak256\":\"0xd9b361e1d9b9a4bde9801abb5692e9fd7018cb52505d3a47dc7b5dd968bcad28\",\"license\":\"MIT\"},\"contracts/solidity/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            _initializing || !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04ad3c77a6a5006b66f1642cc3353b8009215d734eb80f069ed42a6c09460391\",\"license\":\"MIT\"},\"contracts/solidity/token/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\nimport \\\"../util/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    IERC20Upgradeable,\\n    IERC20Metadata\\n{\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_)\\n        internal\\n        initializer\\n    {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_)\\n        internal\\n        initializer\\n    {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function _setMetadata(string memory name_, string memory symbol_) internal {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xbf251e6b6effb5717664c474e2adda144585a5d45da12f7c24c3df05797de67f\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1e18474180ce77dc747bb185501fd4d5395cb6096274d3d8f4977d9ed11619c9\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x57ee5f4c65fa0d2e023e97cb265784084412c700117cac90cfe29bf4bab3c7fc\",\"license\":\"MIT\"},\"contracts/solidity/token/TimelockRewardDistributionTokenImpl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../util/OwnableUpgradeable.sol\\\";\\nimport \\\"../util/SafeMathUpgradeable.sol\\\";\\nimport \\\"../util/SafeMathInt.sol\\\";\\nimport \\\"../util/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\n\\n/// @title Reward-Paying Token (renamed from Dividend)\\n/// @author Roger Wu (https://github.com/roger-wu)\\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute a target token\\n///  to token holders as dividends and allows token holders to withdraw their dividends.\\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\\ncontract TimelockRewardDistributionTokenImpl is\\n    OwnableUpgradeable,\\n    ERC20Upgradeable\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using SafeMathInt for int256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    IERC20Upgradeable public target;\\n\\n    // With `magnitude`, we can properly distribute dividends even if the amount of received target is small.\\n    // For more discussion about choosing the value of `magnitude`,\\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\n    uint256 internal constant magnitude = 2**128;\\n\\n    uint256 internal magnifiedRewardPerShare;\\n\\n    // About dividendCorrection:\\n    // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\n    // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\n    //   `dividendOf(_user)` should not be changed,\\n    //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\n    // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\n    //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\n    //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\n    // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\n    mapping(address => int256) internal magnifiedRewardCorrections;\\n    mapping(address => uint256) internal withdrawnRewards;\\n\\n    mapping(address => uint256) internal timelock;\\n\\n    event Timelocked(address user, uint256 amount, uint256 until);\\n\\n    function __TimelockRewardDistributionToken_init(\\n        IERC20Upgradeable _target,\\n        string memory _name,\\n        string memory _symbol\\n    ) public initializer {\\n        __Ownable_init();\\n        __ERC20_init(_name, _symbol);\\n        target = _target;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            allowance(sender, _msgSender()).sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function mint(address account, uint256 amount) public virtual onlyOwner {\\n        _mint(account, amount);\\n    }\\n\\n    function timelockMint(\\n        address account,\\n        uint256 amount,\\n        uint256 timelockLength\\n    ) public virtual onlyOwner {\\n        uint256 timelockFinish = block.timestamp + timelockLength;\\n        timelock[account] = timelockFinish;\\n        emit Timelocked(account, amount, timelockFinish);\\n        _mint(account, amount);\\n    }\\n\\n    function timelockUntil(address account) public view returns (uint256) {\\n        return timelock[account];\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, without deducting from the caller's\\n     * allowance. Dangerous.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     */\\n    function burnFrom(address account, uint256 amount)\\n        public\\n        virtual\\n        onlyOwner\\n    {\\n        _burn(account, amount);\\n    }\\n\\n    /// @notice Distributes target to token holders as dividends.\\n    /// @dev It reverts if the total supply of tokens is 0.\\n    /// It emits the `RewardsDistributed` event if the amount of received target is greater than 0.\\n    /// About undistributed target tokens:\\n    ///   In each distribution, there is a small amount of target not distributed,\\n    ///     the magnified amount of which is\\n    ///     `(amount * magnitude) % totalSupply()`.\\n    ///   With a well-chosen `magnitude`, the amount of undistributed target\\n    ///     (de-magnified) in a distribution can be less than 1 wei.\\n    ///   We can actually keep track of the undistributed target in a distribution\\n    ///     and try to distribute it in the next distribution,\\n    ///     but keeping track of such data on-chain costs much more than\\n    ///     the saved target, so we don't do that.\\n    function distributeRewards(uint256 amount) external virtual onlyOwner {\\n        require(totalSupply() > 0, \\\"RewardDist: 0 supply\\\");\\n        require(amount > 0, \\\"RewardDist: 0 amount\\\");\\n\\n        // Because we receive the tokens from the staking contract, we assume the tokens have been received.\\n        magnifiedRewardPerShare = magnifiedRewardPerShare.add(\\n            (amount).mul(magnitude) / totalSupply()\\n        );\\n\\n        emit RewardsDistributed(msg.sender, amount);\\n    }\\n\\n    /// @notice Withdraws the target distributed to the sender.\\n    /// @dev It emits a `RewardWithdrawn` event if the amount of withdrawn target is greater than 0.\\n    function withdrawReward(address user) external onlyOwner {\\n        uint256 _withdrawableReward = withdrawableRewardOf(user);\\n        if (_withdrawableReward > 0) {\\n            withdrawnRewards[user] = withdrawnRewards[user].add(\\n                _withdrawableReward\\n            );\\n            target.safeTransfer(user, _withdrawableReward);\\n            emit RewardWithdrawn(user, _withdrawableReward);\\n        }\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function dividendOf(address _owner) public view returns (uint256) {\\n        return withdrawableRewardOf(_owner);\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function withdrawableRewardOf(address _owner)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return accumulativeRewardOf(_owner).sub(withdrawnRewards[_owner]);\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n    function withdrawnRewardOf(address _owner) public view returns (uint256) {\\n        return withdrawnRewards[_owner];\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\n    /// @dev accumulativeRewardOf(_owner) = withdrawableRewardOf(_owner) + withdrawnRewardOf(_owner)\\n    /// = (magnifiedRewardPerShare * balanceOf(_owner) + magnifiedRewardCorrections[_owner]) / magnitude\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\\n    function accumulativeRewardOf(address _owner)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            magnifiedRewardPerShare\\n                .mul(balanceOf(_owner))\\n                .toInt256()\\n                .add(magnifiedRewardCorrections[_owner])\\n                .toUint256Safe() / magnitude;\\n    }\\n\\n    /// @dev Internal function that transfer tokens from one address to another.\\n    /// Update magnifiedRewardCorrections to keep dividends unchanged.\\n    /// @param from The address to transfer from.\\n    /// @param to The address to transfer to.\\n    /// @param value The amount to be transferred.\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal override {\\n        require(block.timestamp > timelock[from], \\\"User locked\\\");\\n        super._transfer(from, to, value);\\n\\n        int256 _magCorrection = magnifiedRewardPerShare.mul(value).toInt256();\\n        magnifiedRewardCorrections[from] = magnifiedRewardCorrections[from].add(\\n            _magCorrection\\n        );\\n        magnifiedRewardCorrections[to] = magnifiedRewardCorrections[to].sub(\\n            _magCorrection\\n        );\\n    }\\n\\n    /// @dev Internal function that mints tokens to an account.\\n    /// Update magnifiedRewardCorrections to keep dividends unchanged.\\n    /// @param account The account that will receive the created tokens.\\n    /// @param value The amount that will be created.\\n    function _mint(address account, uint256 value) internal override {\\n        super._mint(account, value);\\n\\n        magnifiedRewardCorrections[account] = magnifiedRewardCorrections[\\n            account\\n        ].sub((magnifiedRewardPerShare.mul(value)).toInt256());\\n    }\\n\\n    /// @dev Internal function that burns an amount of the token of a given account.\\n    /// Update magnifiedRewardCorrections to keep dividends unchanged.\\n    /// @param account The account whose tokens will be burnt.\\n    /// @param value The amount that will be burnt.\\n    function _burn(address account, uint256 value) internal override {\\n        require(block.timestamp > timelock[account], \\\"User locked\\\");\\n        super._burn(account, value);\\n\\n        magnifiedRewardCorrections[account] = magnifiedRewardCorrections[\\n            account\\n        ].add((magnifiedRewardPerShare.mul(value)).toInt256());\\n    }\\n\\n    /// @dev This event MUST emit when target is distributed to token holders.\\n    /// @param from The address which sends target to this contract.\\n    /// @param weiAmount The amount of distributed target in wei.\\n    event RewardsDistributed(address indexed from, uint256 weiAmount);\\n\\n    /// @dev This event MUST emit when an address withdraws their dividend.\\n    /// @param to The address which withdraws target from this contract.\\n    /// @param weiAmount The amount of withdrawn target in wei.\\n    event RewardWithdrawn(address indexed to, uint256 weiAmount);\\n}\\n\",\"keccak256\":\"0x69ac27c8555c79cab97b754f6a00169a9797f59bd1571673152911c01ec0bb64\",\"license\":\"MIT\"},\"contracts/solidity/util/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd38318b34491b4e11bab877e4dbafbf51111b69b09307b01ca952cf24e4229d0\",\"license\":\"MIT\"},\"contracts/solidity/util/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {}\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8d6fce5d0897740611b909a023e797e08d324503881d9839969124076fe9eb44\",\"license\":\"MIT\"},\"contracts/solidity/util/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x76303f728817d84e7de3b7bb8839a3b30f5e078e223c7dbbbcc45da3d4dc905c\",\"license\":\"MIT\"},\"contracts/solidity/util/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\n\\ncontract PausableUpgradeable is OwnableUpgradeable {\\n    function __Pausable_init() internal initializer {\\n        __Ownable_init();\\n    }\\n\\n    event SetPaused(uint256 lockId, bool paused);\\n    event SetIsGuardian(address addr, bool isGuardian);\\n\\n    mapping(address => bool) public isGuardian;\\n    mapping(uint256 => bool) public isPaused;\\n\\n    // 0 : createVault\\n    // 1 : mint\\n    // 2 : redeem\\n    // 3 : swap\\n    // 4 : flashloan\\n\\n    function onlyOwnerIfPaused(uint256 lockId) public view virtual {\\n        require(!isPaused[lockId] || msg.sender == owner(), \\\"Paused\\\");\\n    }\\n\\n    function unpause(uint256 lockId) public virtual onlyOwner {\\n        isPaused[lockId] = false;\\n        emit SetPaused(lockId, false);\\n    }\\n\\n    function pause(uint256 lockId) public virtual {\\n        require(isGuardian[msg.sender], \\\"Can't pause\\\");\\n        isPaused[lockId] = true;\\n        emit SetPaused(lockId, true);\\n    }\\n\\n    function setIsGuardian(address addr, bool _isGuardian)\\n        public\\n        virtual\\n        onlyOwner\\n    {\\n        isGuardian[addr] = _isGuardian;\\n        emit SetIsGuardian(addr, _isGuardian);\\n    }\\n}\\n\",\"keccak256\":\"0xd540474b3adf43fe5c4a47b11b89a452c1f16f36b05e3f4ca626b71a1e33b689\",\"license\":\"MIT\"},\"contracts/solidity/util/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data)\\n        private\\n    {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x795b61b6dcbaad0d7c4c64c36c4a95a9be5e8786a31dae3200f80f11037b744e\",\"license\":\"MIT\"},\"contracts/solidity/util/SafeMathInt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeMathInt\\n * @dev Math operations with safety checks that revert on error\\n * @dev SafeMath adapted for int256\\n * Based on code of  https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMathInt.sol\\n */\\nlibrary SafeMathInt {\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Prevent overflow when multiplying INT256_MIN with -1\\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\\n        require(!(a == -2**255 && b == -1) && !(b == -2**255 && a == -1));\\n\\n        int256 c = a * b;\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // Prevent overflow when dividing INT256_MIN by -1\\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\\n        require(!(a == -2**255 && b == -1) && (b > 0));\\n\\n        return a / b;\\n    }\\n\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\\n\\n        return a - b;\\n    }\\n\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n        return c;\\n    }\\n\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\n        require(a >= 0);\\n        return uint256(a);\\n    }\\n}\\n\",\"keccak256\":\"0x944980fa5a34c72deb3795bafd6648c0d0fd8b4704c99aaf3be325a94907e5b4\",\"license\":\"MIT\"},\"contracts/solidity/util/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x2ab46076b3ae545deee5c54cc909da057b41970d5ec032d4efb43803f1f76aef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615a71806100206000396000f3fe608060405234801561001057600080fd5b50600436106102f45760003560e01c80637f8661a111610191578063b6ac500c116100e3578063e0e9e64d11610097578063f36d52da11610071578063f36d52da14610682578063f99e740514610695578063fabc1cbc146106a857600080fd5b8063e0e9e64d14610649578063e2bbb1581461065c578063f2fde38b1461066f57600080fd5b8063bdf2a43c116100c8578063bdf2a43c14610600578063cd46053214610623578063da04682b1461063657600080fd5b8063b6ac500c146105da578063b7019b37146105ed57600080fd5b806392a05be611610145578063a3837c6c1161011f578063a3837c6c146105b4578063a77abced146105c7578063a8722fc6146105da57600080fd5b806392a05be61461057b578063995a792d1461058e5780639d8ab6ae146105a157600080fd5b806386c920fc1161017657806386c920fc1461054457806387a6753f146105575780638da5cb5b1461056a57600080fd5b80637f8661a11461051e578063859251ff1461053157600080fd5b8063482d0fd21161024a5780636c9b9588116101fe5780637a77a5f7116101d85780637a77a5f7146104e55780637c77b616146104f85780637ec732ab1461050b57600080fd5b80636c9b9588146104b7578063715018a6146104ca578063729d0a8a146104d257600080fd5b80635d51d9a41161022f5780635d51d9a41461047e5780635ef91f3814610491578063613b5b62146104a457600080fd5b8063482d0fd2146104585780635cec16c01461046b57600080fd5b806323845fb5116102ac5780633656eec2116102865780633656eec2146104075780633801daf11461041a578063441a3e701461044557600080fd5b806323845fb51461038d5780633504f437146103a05780633580c2f2146103f457600080fd5b80631208100c116102dd5780631208100c14610346578063136439dd1461036757806320b25ade1461037a57600080fd5b80630962ef79146102f95780630c68ba211461030e575b600080fd5b61030c6103073660046134c1565b6106bb565b005b61033161031c36600461329c565b60656020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6103596103543660046134f1565b6106fd565b60405190815260200161033d565b61030c6103753660046134c1565b610804565b6103596103883660046134f1565b6108bb565b61030c61039b36600461330c565b6108fb565b6103d46103ae3660046134c1565b606a60205260009081526040902080546001909101546001600160a01b03918216911682565b604080516001600160a01b0393841681529290911660208301520161033d565b61030c6104023660046132d4565b6109b8565b6103596104153660046134f1565b610ab1565b60675461042d906001600160a01b031681565b6040516001600160a01b03909116815260200161033d565b61030c610453366004613551565b610af1565b61030c6104663660046134c1565b610b3f565b61030c6104793660046132d4565b610d18565b61042d61048c366004613463565b610d7e565b61042d61049f366004613463565b610df9565b61030c6104b23660046134c1565b610e35565b61030c6104c5366004613515565b611265565b61030c6114c1565b61030c6104e0366004613339565b611565565b61030c6104f3366004613339565b6115b0565b61030c6105063660046134c1565b6115fb565b61030c61051936600461329c565b611672565b61030c61052c3660046134c1565b611701565b606b5461042d906001600160a01b031681565b60695461042d906001600160a01b031681565b61030c6105653660046134c1565b61174d565b6033546001600160a01b031661042d565b60685461042d906001600160a01b031681565b61042d61059c3660046134c1565b611acb565b61030c6105af36600461329c565b611b20565b61042d6105c2366004613463565b611d58565b61030c6105d536600461329c565b611dca565b61042d6105e83660046134c1565b611e9f565b61042d6105fb3660046134c1565b611eed565b61033161060e3660046134c1565b60666020526000908152604090205460ff1681565b61030c610631366004613572565b611f3b565b61042d6106443660046132d4565b6120be565b6103596106573660046134f1565b6120e8565b61030c61066a366004613551565b6121b7565b61030c61067d36600461329c565b6123d6565b610331610690366004613551565b612508565b6103596106a33660046134f1565b6127ce565b61030c6106b63660046134c1565b612840565b6000818152606a6020908152604091829020825180840190935280546001600160a01b03908116845260019091015416908201526106f981336128e7565b5050565b6000828152606a60209081526040808320815180830190925280546001600160a01b03908116835260019091015416918101919091528161073d82610df9565b9050803b61077f5760405162461bcd60e51b815260206004820152600a602482015269139bdd0818481c1bdbdb60b21b60448201526064015b60405180910390fd5b6040516370a0823160e01b81526001600160a01b0385811660048301528216906370a08231906024015b60206040518083038186803b1580156107c157600080fd5b505afa1580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f991906134d9565b925050505b92915050565b3360009081526065602052604090205460ff166108635760405162461bcd60e51b815260206004820152600b60248201527f43616e27742070617573650000000000000000000000000000000000000000006044820152606401610776565b600081815260666020908152604091829020805460ff191660019081179091558251848152918201527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d7491015b60405180910390a150565b6000828152606a60209081526040808320815180830190925280546001600160a01b03908116835260019091015416918101919091528161073d82610d7e565b6033546001600160a01b031633146109555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610776565b6001600160a01b038216600081815260656020908152604091829020805460ff19168515159081179091558251938452908301527fd0b6b573d5442f7c29fd50d9735ae341581c25c6ed07748d50eda519f1ffa88a910160405180910390a15050565b604080518082019091526001600160a01b0380841682528216602082015260006109e182611d58565b9050803b610a1e5760405162461bcd60e51b815260206004820152600a602482015269139bdd0818481c1bdbdb60b21b6044820152606401610776565b610a2882336128e7565b6040516370a0823160e01b8152336004820152610aab9083906001600160a01b038416906370a082319060240160206040518083038186803b158015610a6d57600080fd5b505afa158015610a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa591906134d9565b336129a8565b50505050565b6000828152606a60209081526040808320815180830190925280546001600160a01b03908116835260019091015416918101919091528161073d82611d58565b6000828152606a6020908152604091829020825180840190935280546001600160a01b0390811684526001909101541690820152610b2f81336128e7565b610b3a8183336129a8565b505050565b6000818152606a6020908152604091829020825180840190935280546001600160a01b039081168085526001909201541691830191909152610bc35760405162461bcd60e51b815260206004820152601d60248201527f4c505374616b696e673a20506f6f6c20646f65736e27742065786973740000006044820152606401610776565b60695460208201516040516387c13f4d60e01b81526001600160a01b03918216600482015260009291909116906387c13f4d9060240160206040518083038186803b158015610c1157600080fd5b505afa158015610c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4991906132b8565b6040805180820182526001600160a01b03808416825260208681015182168184019081526000898152606a909252938120835181549084166001600160a01b0319918216178255945160019091018054919093169416939093179055919250610cb182611d58565b9050803b15610cc1575050505050565b6000610ccc83612a83565b604080518881526001600160a01b03831660208201529192507fd2bb61ed4a0a485d895c65f25fb6c9185c98180ae407831365bc59f65419f9fe910160405180910390a1505050505050565b604080518082019091526001600160a01b038084168252821660208201526000610d4182611d58565b9050803b610a285760405162461bcd60e51b815260206004820152600a602482015269139bdd0818481c1bdbdb60b21b6044820152606401610776565b80516020808301516040516bffffffffffffffffffffffff19606094851b811693820193909352921b1660348201526001604882015260009081906068015b60408051601f198184030181529190528051602090910120606854909150600090610df1906001600160a01b031683612c0a565b949350505050565b80516020808301516040516bffffffffffffffffffffffff19606094851b811693820193909352921b1660348201526000908190604801610dbd565b6000818152606a60209081526040808320815180830190925280546001600160a01b039081168352600190910154169181019190915290610e7582610df9565b90506000610e8283610d7e565b90506000823b15610f6d576040516370a0823160e01b81523360048201526001600160a01b038416906370a082319060240160206040518083038186803b158015610ecc57600080fd5b505afa158015610ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0491906134d9565b90508015610f6d5760405163079cc67960e41b8152336004820152602481018290526001600160a01b038416906379cc679090604401600060405180830381600087803b158015610f5457600080fd5b505af1158015610f68573d6000803e3d6000fd5b505050505b6000823b156110af576040516370a0823160e01b81523360048201526001600160a01b038416906370a082319060240160206040518083038186803b158015610fb557600080fd5b505afa158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fed91906134d9565b905080156110af57604051632e1b8c8760e21b81523360048201526001600160a01b0384169063b86e321c90602401600060405180830381600087803b15801561103657600080fd5b505af115801561104a573d6000803e3d6000fd5b505060405163079cc67960e41b8152336004820152602481018490526001600160a01b03861692506379cc67909150604401600060405180830381600087803b15801561109657600080fd5b505af11580156110aa573d6000803e3d6000fd5b505050505b60006110ba86611d58565b9050803b6111735760006110cd87612a83565b9050816001600160a01b0316816001600160a01b0316146111305760405162461bcd60e51b815260206004820152601b60248201527f4e6f74206465706c6f79696e672070726f7065722064697374726f00000000006044820152606401610776565b604080518981526001600160a01b03831660208201527fd2bb61ed4a0a485d895c65f25fb6c9185c98180ae407831365bc59f65419f9fe910160405180910390a1505b600061117f8385613654565b116111cc5760405162461bcd60e51b815260206004820152601260248201527f4e6f7468696e6720746f206d69677261746500000000000000000000000000006044820152606401610776565b6001600160a01b0381166340c10f19336111e68587613654565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561124457600080fd5b505af1158015611258573d6000803e3d6000fd5b5050505050505050505050565b62278d0081106112b75760405162461bcd60e51b815260206004820152601160248201527f54696d656c6f636b20746f6f206c6f6e670000000000000000000000000000006044820152606401610776565b6067546040517fdbe66ca00000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b039091169063dbe66ca09060240160206040518083038186803b15801561131357600080fd5b505afa158015611327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b91906133a9565b6113975760405162461bcd60e51b815260206004820152600760248201527f4e6f74207a6170000000000000000000000000000000000000000000000000006044820152606401610776565b6113a1600a6115fb565b6113aa84610b3f565b6000848152606a6020908152604091829020825180840190935280546001600160a01b03908116808552600190920154169183019190915261142e5760405162461bcd60e51b815260206004820152601b60248201527f4c505374616b696e673a204e6f6e6578697374656e7420706f6f6c00000000006044820152606401610776565b8051611445906001600160a01b0316333086612c86565b61144e81611d58565b60405163145e612f60e11b81526001600160a01b038681166004830152602482018690526044820185905291909116906328bcc25e906064015b600060405180830381600087803b1580156114a257600080fd5b505af11580156114b6573d6000803e3d6000fd5b505050505050505050565b6033546001600160a01b0316331461151b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610776565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b8060005b81811015610aab576115a084848381811061159457634e487b7160e01b600052603260045260246000fd5b905060200201356106bb565b6115a9816136af565b9050611569565b8060005b81811015610aab576115eb8484838181106115df57634e487b7160e01b600052603260045260246000fd5b90506020020135610b3f565b6115f4816136af565b90506115b4565b60008181526066602052604090205460ff16158061162357506033546001600160a01b031633145b61166f5760405162461bcd60e51b815260206004820152600660248201527f50617573656400000000000000000000000000000000000000000000000000006044820152606401610776565b50565b6033546001600160a01b031633146116cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610776565b6001600160a01b0381166116df57600080fd5b606980546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152606a6020908152604091829020825180840190935280546001600160a01b039081168452600190910154169082015261173f81336128e7565b6106f981610aa58433610ab1565b6033546001600160a01b03163314806117fc5750606760009054906101000a90046001600160a01b03166001600160a01b0316630d43e8ad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117af57600080fd5b505afa1580156117c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e791906132b8565b6001600160a01b0316336001600160a01b0316145b6118485760405162461bcd60e51b815260206004820152601960248201527f4c505374616b696e673a204e6f7420617574686f72697a6564000000000000006044820152606401610776565b6067546001600160a01b03166118a05760405162461bcd60e51b815260206004820152601a60248201527f4c505374616b696e673a20466163746f7279206e6f74207365740000000000006044820152606401610776565b6000818152606a60205260409020546001600160a01b0316156119055760405162461bcd60e51b815260206004820152601e60248201527f4c505374616b696e673a20506f6f6c20616c72656164792065786973747300006044820152606401610776565b6067546040517f81a36fb6000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b0316906381a36fb69060240160206040518083038186803b15801561196357600080fd5b505afa158015611977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199b91906132b8565b6069546040516387c13f4d60e01b81526001600160a01b038084166004830152929350600092909116906387c13f4d9060240160206040518083038186803b1580156119e657600080fd5b505afa1580156119fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1e91906132b8565b6040805180820182526001600160a01b03808416825285811660208084019182526000898152606a909152938420835181549084166001600160a01b0319918216178255915160019091018054919093169116179055919250611a8082612a83565b604080518781526001600160a01b03831660208201529192507f65fc0eb45954044fb55e1b01344d5d72fbfdf88e732d955f73bb7fb2bcc131e9910160405180910390a15050505050565b6000818152606a60209081526040808320815180830190925280546001600160a01b03908116808452600190920154169282019290925290611b105750600092915050565b611b1981610d7e565b9392505050565b600054610100900460ff1680611b39575060005460ff16155b611b9c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610776565b600054610100900460ff16158015611bbe576000805461ffff19166101011790555b611bc6612d37565b6001600160a01b038216611c1c5760405162461bcd60e51b815260206004820152601660248201527f50726f766964657220213d2061646472657373283029000000000000000000006044820152606401610776565b606b546001600160a01b031615611c755760405162461bcd60e51b815260206004820152601060248201527f416c72656164792061737369676e6564000000000000000000000000000000006044820152606401610776565b606980546001600160a01b0319166001600160a01b038416179055604051611c9c9061328f565b604051809103906000f080158015611cb8573d6000803e3d6000fd5b50606b80546001600160a01b0319166001600160a01b03929092169182179055604051639f63df1f60e01b81526000600482018190526060602483015260648201819052608060448301526084820152639f63df1f9060a401600060405180830381600087803b158015611d2b57600080fd5b505af1158015611d3f573d6000803e3d6000fd5b5050505080156106f9576000805461ff00191690555050565b80516020808301516040516bffffffffffffffffffffffff19606094851b811693820193909352921b16603482015260026048820152600090819060680160408051601f198184030181529190528051602090910120606b54909150600090610df1906001600160a01b031683612c0a565b6033546001600160a01b03163314611e245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610776565b6067546001600160a01b031615611e7d5760405162461bcd60e51b815260206004820152601d60248201527f6e6674785661756c74466163746f727920697320696d6d757461626c650000006044820152606401610776565b606780546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152606a60209081526040808320815180830190925280546001600160a01b03908116808452600190920154169282019290925290611ee45750600092915050565b611b1981610df9565b6000818152606a60209081526040808320815180830190925280546001600160a01b03908116808452600190920154169282019290925290611f325750600092915050565b611b1981611d58565b6033546001600160a01b03163314611f955760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610776565b6000848152606a60209081526040808320815180830190925280546001600160a01b039081168352600190910154169181019190915290611fd582611d58565b60405163079cc67960e41b81526001600160a01b03868116600483015260248201889052919250908216906379cc679090604401600060405180830381600087803b15801561202357600080fd5b505af1158015612037573d6000803e3d6000fd5b50506040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201899052841692506340c10f199150604401600060405180830381600087803b15801561209e57600080fd5b505af11580156120b2573d6000803e3d6000fd5b50505050505050505050565b604080518082019091526001600160a01b03808416825282166020820152600090610df181611d58565b6000828152606a60209081526040808320815180830190925280546001600160a01b03908116835260019091015416918101919091528161212882611d58565b60405163c19ea05360e01b81526001600160a01b0386811660048301529192509082169063c19ea0539060240160206040518083038186803b15801561216d57600080fd5b505afa158015612181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a591906134d9565b42111561077f576000925050506107fe565b6121c1600a6115fb565b6121ca82610b3f565b6000828152606a6020908152604091829020825180840190935280546001600160a01b03908116808552600190920154169183019190915261224e5760405162461bcd60e51b815260206004820152601b60248201527f4c505374616b696e673a204e6f6e6578697374656e7420706f6f6c00000000006044820152606401610776565b8051612265906001600160a01b0316333085612c86565b600061227082611d58565b60405163c19ea05360e01b81523360048201529091506000906001600160a01b0383169063c19ea0539060240160206040518083038186803b1580156122b557600080fd5b505afa1580156122c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ed91906134d9565b905042811115612395576001600160a01b0382166328bcc25e3386612312428661366c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b15801561237857600080fd5b505af115801561238c573d6000803e3d6000fd5b505050506123cf565b60405163145e612f60e11b815233600482015260248101859052600260448201526001600160a01b038316906328bcc25e90606401611488565b5050505050565b6033546001600160a01b031633146124305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610776565b6001600160a01b0381166124ac5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610776565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b600061251c6033546001600160a01b031690565b6001600160a01b0316336001600160a01b031614806125d15750606760009054906101000a90046001600160a01b03166001600160a01b0316630d43e8ad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561258457600080fd5b505afa158015612598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bc91906132b8565b6001600160a01b0316336001600160a01b0316145b61261d5760405162461bcd60e51b815260206004820152601960248201527f4c505374616b696e673a204e6f7420617574686f72697a6564000000000000006044820152606401610776565b6000838152606a6020908152604091829020825180840190935280546001600160a01b0390811680855260019092015416918301919091526126635760009150506107fe565b600061266e82611d58565b9050803b15806126ec5750806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126b257600080fd5b505afa1580156126c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ea91906134d9565b155b156126fc576000925050506107fe565b6020820151612716906001600160a01b0316338387612c86565b6040517f59974e38000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b038216906359974e3890602401600060405180830381600087803b15801561277157600080fd5b505af1158015612785573d6000803e3d6000fd5b505060408051888152602081018890527f0299314386021feac38b734d748626da8e75d6abb4e6a897c0f9c8f23ff42715935001905060405180910390a1506001949350505050565b6000828152606a60209081526040808320815180830190925280546001600160a01b03908116835260019091015416918101919091528161280e82611d58565b60405163c19ea05360e01b81526001600160a01b0386811660048301529192509082169063c19ea053906024016107a9565b6033546001600160a01b0316331461289a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610776565b6000818152606660209081526040808320805460ff191690558051848152918201929092527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d7491016108b0565b81516001600160a01b031661293e5760405162461bcd60e51b815260206004820152601b60248201527f4c505374616b696e673a204e6f6e6578697374656e7420706f6f6c00000000006044820152606401610776565b61294782611d58565b604051632e1b8c8760e21b81526001600160a01b038381166004830152919091169063b86e321c90602401600060405180830381600087803b15801561298c57600080fd5b505af11580156129a0573d6000803e3d6000fd5b505050505050565b82516001600160a01b03166129ff5760405162461bcd60e51b815260206004820152601b60248201527f4c505374616b696e673a204e6f6e6578697374656e7420706f6f6c00000000006044820152606401610776565b612a0883611d58565b60405163079cc67960e41b81526001600160a01b0383811660048301526024820185905291909116906379cc679090604401600060405180830381600087803b158015612a5457600080fd5b505af1158015612a68573d6000803e3d6000fd5b50508451610b3a92506001600160a01b031690508284612df9565b80516020808301516040516bffffffffffffffffffffffff19606094851b811693820193909352921b16603482015260026048820152600090819060680160408051601f198184030181529190528051602090910120606b54909150600090612af5906001600160a01b031683612e42565b60695460208601516040517f96c596710000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201529293506000929116906396c596719060240160006040518083038186803b158015612b5d57600080fd5b505afa158015612b71573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b9991908101906133c5565b6020860151604051639f63df1f60e01b81529192506001600160a01b03841691639f63df1f91612bcf9185908190600401613603565b600060405180830381600087803b158015612be957600080fd5b505af1158015612bfd573d6000803e3d6000fd5b5093979650505050505050565b6000611b198383306040517f3d602d80600a3d3981f3363d3d373d3d3d363d730000000000000000000000008152606093841b60148201527f5af43d82803e903d91602b57fd5bf3ff000000000000000000000000000000006028820152921b6038830152604c8201526037808220606c830152605591012090565b6040516001600160a01b0380851660248301528316604482015260648101829052610aab9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612ef9565b600054610100900460ff1680612d50575060005460ff16155b612db35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610776565b600054610100900460ff16158015612dd5576000805461ffff19166101011790555b612ddd612fde565b612de561308f565b801561166f576000805461ff001916905550565b6040516001600160a01b038316602482015260448101829052610b3a9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612cd3565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f59150506001600160a01b0381166107fe5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606401610776565b6000612f4e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131849092919063ffffffff16565b805190915015610b3a5780806020019051810190612f6c91906133a9565b610b3a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610776565b600054610100900460ff1680612ff7575060005460ff16155b61305a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610776565b600054610100900460ff16158015612de5576000805461ffff1916610101179055801561166f576000805461ff001916905550565b600054610100900460ff16806130a8575060005460ff16155b61310b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610776565b600054610100900460ff1615801561312d576000805461ffff19166101011790555b603380546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561166f576000805461ff001916905550565b6060610df1848460008585843b6131dd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610776565b600080866001600160a01b031685876040516131f991906135e7565b60006040518083038185875af1925050503d8060008114613236576040519150601f19603f3d011682016040523d82523d6000602084013e61323b565b606091505b509150915061324b828286613256565b979650505050505050565b60608315613265575081611b19565b8251156132755782518084602001fd5b8160405162461bcd60e51b81526004016107769190613641565b6123228061371a83390190565b6000602082840312156132ad578081fd5b8135611b19816136f6565b6000602082840312156132c9578081fd5b8151611b19816136f6565b600080604083850312156132e6578081fd5b82356132f1816136f6565b91506020830135613301816136f6565b809150509250929050565b6000806040838503121561331e578182fd5b8235613329816136f6565b915060208301356133018161370b565b6000806020838503121561334b578182fd5b823567ffffffffffffffff80821115613362578384fd5b818501915085601f830112613375578384fd5b813581811115613383578485fd5b8660208260051b8501011115613397578485fd5b60209290920196919550909350505050565b6000602082840312156133ba578081fd5b8151611b198161370b565b6000602082840312156133d6578081fd5b815167ffffffffffffffff808211156133ed578283fd5b818401915084601f830112613400578283fd5b815181811115613412576134126136e0565b604051601f8201601f19908116603f0116810190838211818310171561343a5761343a6136e0565b81604052828152876020848701011115613452578586fd5b61324b836020830160208801613683565b600060408284031215613474578081fd5b6040516040810181811067ffffffffffffffff82111715613497576134976136e0565b60405282356134a5816136f6565b815260208301356134b5816136f6565b60208201529392505050565b6000602082840312156134d2578081fd5b5035919050565b6000602082840312156134ea578081fd5b5051919050565b60008060408385031215613503578182fd5b823591506020830135613301816136f6565b6000806000806080858703121561352a578182fd5b84359350602085013561353c816136f6565b93969395505050506040820135916060013590565b60008060408385031215613563578182fd5b50508035926020909101359150565b60008060008060808587031215613587578384fd5b843593506020850135925060408501356135a0816136f6565b915060608501356135b0816136f6565b939692955090935050565b600081518084526135d3816020860160208601613683565b601f01601f19169290920160200192915050565b600082516135f9818460208701613683565b9190910192915050565b6001600160a01b038416815260606020820152600061362560608301856135bb565b828103604084015261363781856135bb565b9695505050505050565b602081526000611b1960208301846135bb565b60008219821115613667576136676136ca565b500190565b60008282101561367e5761367e6136ca565b500390565b60005b8381101561369e578181015183820152602001613686565b83811115610aab5750506000910152565b60006000198214156136c3576136c36136ca565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461166f57600080fd5b801515811461166f57600080fdfe608060405234801561001057600080fd5b50612302806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c806379cc6790116100ee578063a9059cbb11610097578063c19ea05311610071578063c19ea05314610377578063d4b83992146103a0578063dd62ed3e146103b3578063f2fde38b146103ec57600080fd5b8063a9059cbb14610328578063ad76d6861461033b578063b86e321c1461036457600080fd5b806395d89b41116100c857806395d89b41146102fa5780639f63df1f14610302578063a457c2d71461031557600080fd5b806379cc6790146102af5780638da5cb5b146102c257806391b89fba146102e757600080fd5b8063313ce5671161015057806359974e381161012a57806359974e381461026b57806370a082311461027e578063715018a6146102a757600080fd5b8063313ce56714610236578063395093511461024557806340c10f191461025857600080fd5b806318160ddd1161018157806318160ddd1461020657806323b872dd1461020e57806328bcc25e1461022157600080fd5b806305b3ccb4146101a857806306fdde03146101ce578063095ea7b3146101e3575b600080fd5b6101bb6101b6366004611ef1565b6103ff565b6040519081526020015b60405180910390f35b6101d661046f565b6040516101c591906120ab565b6101f66101f1366004611f85565b610501565b60405190151581526020016101c5565b6067546101bb565b6101f661021c366004611f45565b610517565b61023461022f366004611fb0565b610567565b005b604051601281526020016101c5565b6101f6610253366004611f85565b610640565b610234610266366004611f85565b610677565b610234610279366004612077565b6106df565b6101bb61028c366004611ef1565b6001600160a01b031660009081526065602052604090205490565b610234610856565b6102346102bd366004611f85565b610907565b6033546001600160a01b03165b6040516001600160a01b0390911681526020016101c5565b6101bb6102f5366004611ef1565b61096b565b6101d6610976565b610234610310366004612004565b610985565b6101f6610323366004611f85565b610a74565b6101f6610336366004611f85565b610b1d565b6101bb610349366004611ef1565b6001600160a01b03166000908152609a602052604090205490565b610234610372366004611ef1565b610b2a565b6101bb610385366004611ef1565b6001600160a01b03166000908152609b602052604090205490565b6097546102cf906001600160a01b031681565b6101bb6103c1366004611f0d565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b6102346103fa366004611ef1565b610c2d565b6001600160a01b03811660009081526099602090815260408083205460659092528220546098547001000000000000000000000000000000009261045f9261045a926104549161044f9190610d6c565b610d78565b90610df7565b610e35565b610469919061214e565b92915050565b60606068805461047e90612228565b80601f01602080910402602001604051908101604052809291908181526020018280546104aa90612228565b80156104f75780601f106104cc576101008083540402835291602001916104f7565b820191906000526020600020905b8154815290600101906020018083116104da57829003601f168201915b5050505050905090565b600061050e338484610e44565b50600192915050565b6000610524848484610f9d565b61055c8433610557856040518060600160405280602881526020016122a5602891396105508a336103c1565b919061108e565b610e44565b5060015b9392505050565b6033546001600160a01b031633146105c65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60006105d28242612136565b6001600160a01b0385166000818152609b60209081526040918290208490558151928352820186905281018290529091507fe1d6ea7b60537f263509ee48f8e298cc60801e7bddbec613b343272d897dc5e79060600160405180910390a161063a84846110ba565b50505050565b3360008181526066602090815260408083206001600160a01b0387168452909152812054909161050e918590610557908690612136565b6033546001600160a01b031633146106d15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bd565b6106db82826110ba565b5050565b6033546001600160a01b031633146107395760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bd565b600061074460675490565b116107915760405162461bcd60e51b815260206004820152601460248201527f526577617264446973743a203020737570706c7900000000000000000000000060448201526064016105bd565b600081116107e15760405162461bcd60e51b815260206004820152601460248201527f526577617264446973743a203020616d6f756e7400000000000000000000000060448201526064016105bd565b61081b6107ed60675490565b61080883700100000000000000000000000000000000610d6c565b610812919061214e565b6098549061111e565b60985560405181815233907fdf29796aad820e4bb192f3a8d631b76519bcd2cbe77cc85af20e9df53cece0869060200160405180910390a250565b6033546001600160a01b031633146108b05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bd565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36033805473ffffffffffffffffffffffffffffffffffffffff19169055565b6033546001600160a01b031633146109615760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bd565b6106db828261112a565b6000610469826111c3565b60606069805461047e90612228565b600054610100900460ff168061099e575060005460ff16155b610a015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105bd565b600054610100900460ff16158015610a23576000805461ffff19166101011790555b610a2b6111ef565b610a3583836112b2565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055801561063a576000805461ff001916905550505050565b3360009081526066602090815260408083206001600160a01b038616845290915281205482811015610b0e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016105bd565b61055c338561055786856121e5565b600061050e338484610f9d565b6033546001600160a01b03163314610b845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bd565b6000610b8f826111c3565b905080156106db576001600160a01b0382166000908152609a6020526040902054610bba908261111e565b6001600160a01b038084166000908152609a6020526040902091909155609754610be691168383611379565b816001600160a01b03167f1d3eee4ca001cff39eec6ec7615aacf2f2bd61791273830728ba00ccbd6e133782604051610c2191815260200190565b60405180910390a25050565b6033546001600160a01b03163314610c875760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bd565b6001600160a01b038116610d035760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105bd565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000610560828461216e565b6000600160ff1b8210610df35760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e7432353600000000000000000000000000000000000000000000000060648201526084016105bd565b5090565b600080610e0483856120de565b905060008312158015610e175750838112155b80610e2c5750600083128015610e2c57508381125b61056057600080fd5b600080821215610df357600080fd5b6001600160a01b038316610ebf5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016105bd565b6001600160a01b038216610f3b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016105bd565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166000908152609b60205260409020544211610ff25760405162461bcd60e51b815260206004820152600b60248201526a155cd95c881b1bd8dad95960aa1b60448201526064016105bd565b610ffd8383836113f9565b600061101761044f83609854610d6c90919063ffffffff16565b6001600160a01b03851660009081526099602052604090205490915061103d9082610df7565b6001600160a01b03808616600090815260996020526040808220939093559085168152205461106c908261161a565b6001600160a01b03909316600090815260996020526040902092909255505050565b600081848411156110b25760405162461bcd60e51b81526004016105bd91906120ab565b505050900390565b6110c48282611666565b6110fe6110df61044f83609854610d6c90919063ffffffff16565b6001600160a01b0384166000908152609960205260409020549061161a565b6001600160a01b0390921660009081526099602052604090209190915550565b60006105608284612136565b6001600160a01b0382166000908152609b6020526040902054421161117f5760405162461bcd60e51b815260206004820152600b60248201526a155cd95c881b1bd8dad95960aa1b60448201526064016105bd565b6111898282611745565b6110fe6111a461044f83609854610d6c90919063ffffffff16565b6001600160a01b03841660009081526099602052604090205490610df7565b6001600160a01b0381166000908152609a6020526040812054610469906111e9846103ff565b906118cb565b600054610100900460ff1680611208575060005460ff16155b61126b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105bd565b600054610100900460ff1615801561128d576000805461ffff19166101011790555b6112956118d7565b61129d611988565b80156112af576000805461ff00191690555b50565b600054610100900460ff16806112cb575060005460ff16155b61132e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105bd565b600054610100900460ff16158015611350576000805461ffff19166101011790555b6113586118d7565b6113628383611a8a565b8015611374576000805461ff00191690555b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611374908490611b66565b6001600160a01b0383166114755760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016105bd565b6001600160a01b0382166114f15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016105bd565b6001600160a01b038316600090815260656020526040902054818110156115805760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016105bd565b61158a82826121e5565b6001600160a01b0380861660009081526065602052604080822093909355908516815290812080548492906115c0908490612136565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161160c91815260200190565b60405180910390a350505050565b6000808212158015611635575082611632838261218d565b13155b806116535750600082128015611653575082611651838261218d565b135b61165c57600080fd5b610560828461218d565b6001600160a01b0382166116bc5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105bd565b80606760008282546116ce9190612136565b90915550506001600160a01b038216600090815260656020526040812080548392906116fb908490612136565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166117c15760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016105bd565b6001600160a01b038216600090815260656020526040902054818110156118505760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016105bd565b61185a82826121e5565b6001600160a01b038416600090815260656020526040812091909155606780548492906118889084906121e5565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610f90565b600061056082846121e5565b600054610100900460ff16806118f0575060005460ff16155b6119535760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105bd565b600054610100900460ff1615801561129d576000805461ffff191661010117905580156112af576000805461ff001916905550565b600054610100900460ff16806119a1575060005460ff16155b611a045760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105bd565b600054610100900460ff16158015611a26576000805461ffff19166101011790555b6033805473ffffffffffffffffffffffffffffffffffffffff19163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156112af576000805461ff001916905550565b600054610100900460ff1680611aa3575060005460ff16155b611b065760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105bd565b600054610100900460ff16158015611b28576000805461ffff19166101011790555b8251611b3b906068906020860190611dda565b508151611b4f906069906020850190611dda565b508015611374576000805461ff0019169055505050565b6000611bbb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c4b9092919063ffffffff16565b8051909150156113745780806020019051810190611bd99190611fe4565b6113745760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016105bd565b6060611c5a8484600085611c62565b949350505050565b606082471015611cda5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016105bd565b843b611d285760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105bd565b600080866001600160a01b03168587604051611d44919061208f565b60006040518083038185875af1925050503d8060008114611d81576040519150601f19603f3d011682016040523d82523d6000602084013e611d86565b606091505b5091509150611d96828286611da1565b979650505050505050565b60608315611db0575081610560565b825115611dc05782518084602001fd5b8160405162461bcd60e51b81526004016105bd91906120ab565b828054611de690612228565b90600052602060002090601f016020900481019282611e085760008555611e4e565b82601f10611e2157805160ff1916838001178555611e4e565b82800160010185558215611e4e579182015b82811115611e4e578251825591602001919060010190611e33565b50610df39291505b80821115610df35760008155600101611e56565b600082601f830112611e7a578081fd5b813567ffffffffffffffff80821115611e9557611e95612279565b604051601f8301601f19908116603f01168101908282118183101715611ebd57611ebd612279565b81604052838152866020858801011115611ed5578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611f02578081fd5b81356105608161228f565b60008060408385031215611f1f578081fd5b8235611f2a8161228f565b91506020830135611f3a8161228f565b809150509250929050565b600080600060608486031215611f59578081fd5b8335611f648161228f565b92506020840135611f748161228f565b929592945050506040919091013590565b60008060408385031215611f97578182fd5b8235611fa28161228f565b946020939093013593505050565b600080600060608486031215611fc4578283fd5b8335611fcf8161228f565b95602085013595506040909401359392505050565b600060208284031215611ff5578081fd5b81518015158114610560578182fd5b600080600060608486031215612018578283fd5b83356120238161228f565b9250602084013567ffffffffffffffff8082111561203f578384fd5b61204b87838801611e6a565b93506040860135915080821115612060578283fd5b5061206d86828701611e6a565b9150509250925092565b600060208284031215612088578081fd5b5035919050565b600082516120a18184602087016121fc565b9190910192915050565b60208152600082518060208401526120ca8160408501602087016121fc565b601f01601f19169190910160400192915050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0384138115161561211857612118612263565b82600160ff1b03841281161561213057612130612263565b50500190565b6000821982111561214957612149612263565b500190565b60008261216957634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561218857612188612263565b500290565b600080831283600160ff1b018312811516156121ab576121ab612263565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156121df576121df612263565b50500390565b6000828210156121f7576121f7612263565b500390565b60005b838110156122175781810151838201526020016121ff565b8381111561063a5750506000910152565b600181811c9082168061223c57607f821691505b6020821081141561225d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146112af57600080fdfe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212207c2cf0dfb2f084b9bed8d55e29706119408890791a95fadd752cf48474ea3a4964736f6c63430008040033a2646970667358221220bfdf5b9a8aae07792b123e72fe67ae31eef2c4a02a4cd275c329bb8d335d3fe364736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f45760003560e01c80637f8661a111610191578063b6ac500c116100e3578063e0e9e64d11610097578063f36d52da11610071578063f36d52da14610682578063f99e740514610695578063fabc1cbc146106a857600080fd5b8063e0e9e64d14610649578063e2bbb1581461065c578063f2fde38b1461066f57600080fd5b8063bdf2a43c116100c8578063bdf2a43c14610600578063cd46053214610623578063da04682b1461063657600080fd5b8063b6ac500c146105da578063b7019b37146105ed57600080fd5b806392a05be611610145578063a3837c6c1161011f578063a3837c6c146105b4578063a77abced146105c7578063a8722fc6146105da57600080fd5b806392a05be61461057b578063995a792d1461058e5780639d8ab6ae146105a157600080fd5b806386c920fc1161017657806386c920fc1461054457806387a6753f146105575780638da5cb5b1461056a57600080fd5b80637f8661a11461051e578063859251ff1461053157600080fd5b8063482d0fd21161024a5780636c9b9588116101fe5780637a77a5f7116101d85780637a77a5f7146104e55780637c77b616146104f85780637ec732ab1461050b57600080fd5b80636c9b9588146104b7578063715018a6146104ca578063729d0a8a146104d257600080fd5b80635d51d9a41161022f5780635d51d9a41461047e5780635ef91f3814610491578063613b5b62146104a457600080fd5b8063482d0fd2146104585780635cec16c01461046b57600080fd5b806323845fb5116102ac5780633656eec2116102865780633656eec2146104075780633801daf11461041a578063441a3e701461044557600080fd5b806323845fb51461038d5780633504f437146103a05780633580c2f2146103f457600080fd5b80631208100c116102dd5780631208100c14610346578063136439dd1461036757806320b25ade1461037a57600080fd5b80630962ef79146102f95780630c68ba211461030e575b600080fd5b61030c6103073660046134c1565b6106bb565b005b61033161031c36600461329c565b60656020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6103596103543660046134f1565b6106fd565b60405190815260200161033d565b61030c6103753660046134c1565b610804565b6103596103883660046134f1565b6108bb565b61030c61039b36600461330c565b6108fb565b6103d46103ae3660046134c1565b606a60205260009081526040902080546001909101546001600160a01b03918216911682565b604080516001600160a01b0393841681529290911660208301520161033d565b61030c6104023660046132d4565b6109b8565b6103596104153660046134f1565b610ab1565b60675461042d906001600160a01b031681565b6040516001600160a01b03909116815260200161033d565b61030c610453366004613551565b610af1565b61030c6104663660046134c1565b610b3f565b61030c6104793660046132d4565b610d18565b61042d61048c366004613463565b610d7e565b61042d61049f366004613463565b610df9565b61030c6104b23660046134c1565b610e35565b61030c6104c5366004613515565b611265565b61030c6114c1565b61030c6104e0366004613339565b611565565b61030c6104f3366004613339565b6115b0565b61030c6105063660046134c1565b6115fb565b61030c61051936600461329c565b611672565b61030c61052c3660046134c1565b611701565b606b5461042d906001600160a01b031681565b60695461042d906001600160a01b031681565b61030c6105653660046134c1565b61174d565b6033546001600160a01b031661042d565b60685461042d906001600160a01b031681565b61042d61059c3660046134c1565b611acb565b61030c6105af36600461329c565b611b20565b61042d6105c2366004613463565b611d58565b61030c6105d536600461329c565b611dca565b61042d6105e83660046134c1565b611e9f565b61042d6105fb3660046134c1565b611eed565b61033161060e3660046134c1565b60666020526000908152604090205460ff1681565b61030c610631366004613572565b611f3b565b61042d6106443660046132d4565b6120be565b6103596106573660046134f1565b6120e8565b61030c61066a366004613551565b6121b7565b61030c61067d36600461329c565b6123d6565b610331610690366004613551565b612508565b6103596106a33660046134f1565b6127ce565b61030c6106b63660046134c1565b612840565b6000818152606a6020908152604091829020825180840190935280546001600160a01b03908116845260019091015416908201526106f981336128e7565b5050565b6000828152606a60209081526040808320815180830190925280546001600160a01b03908116835260019091015416918101919091528161073d82610df9565b9050803b61077f5760405162461bcd60e51b815260206004820152600a602482015269139bdd0818481c1bdbdb60b21b60448201526064015b60405180910390fd5b6040516370a0823160e01b81526001600160a01b0385811660048301528216906370a08231906024015b60206040518083038186803b1580156107c157600080fd5b505afa1580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f991906134d9565b925050505b92915050565b3360009081526065602052604090205460ff166108635760405162461bcd60e51b815260206004820152600b60248201527f43616e27742070617573650000000000000000000000000000000000000000006044820152606401610776565b600081815260666020908152604091829020805460ff191660019081179091558251848152918201527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d7491015b60405180910390a150565b6000828152606a60209081526040808320815180830190925280546001600160a01b03908116835260019091015416918101919091528161073d82610d7e565b6033546001600160a01b031633146109555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610776565b6001600160a01b038216600081815260656020908152604091829020805460ff19168515159081179091558251938452908301527fd0b6b573d5442f7c29fd50d9735ae341581c25c6ed07748d50eda519f1ffa88a910160405180910390a15050565b604080518082019091526001600160a01b0380841682528216602082015260006109e182611d58565b9050803b610a1e5760405162461bcd60e51b815260206004820152600a602482015269139bdd0818481c1bdbdb60b21b6044820152606401610776565b610a2882336128e7565b6040516370a0823160e01b8152336004820152610aab9083906001600160a01b038416906370a082319060240160206040518083038186803b158015610a6d57600080fd5b505afa158015610a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa591906134d9565b336129a8565b50505050565b6000828152606a60209081526040808320815180830190925280546001600160a01b03908116835260019091015416918101919091528161073d82611d58565b6000828152606a6020908152604091829020825180840190935280546001600160a01b0390811684526001909101541690820152610b2f81336128e7565b610b3a8183336129a8565b505050565b6000818152606a6020908152604091829020825180840190935280546001600160a01b039081168085526001909201541691830191909152610bc35760405162461bcd60e51b815260206004820152601d60248201527f4c505374616b696e673a20506f6f6c20646f65736e27742065786973740000006044820152606401610776565b60695460208201516040516387c13f4d60e01b81526001600160a01b03918216600482015260009291909116906387c13f4d9060240160206040518083038186803b158015610c1157600080fd5b505afa158015610c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4991906132b8565b6040805180820182526001600160a01b03808416825260208681015182168184019081526000898152606a909252938120835181549084166001600160a01b0319918216178255945160019091018054919093169416939093179055919250610cb182611d58565b9050803b15610cc1575050505050565b6000610ccc83612a83565b604080518881526001600160a01b03831660208201529192507fd2bb61ed4a0a485d895c65f25fb6c9185c98180ae407831365bc59f65419f9fe910160405180910390a1505050505050565b604080518082019091526001600160a01b038084168252821660208201526000610d4182611d58565b9050803b610a285760405162461bcd60e51b815260206004820152600a602482015269139bdd0818481c1bdbdb60b21b6044820152606401610776565b80516020808301516040516bffffffffffffffffffffffff19606094851b811693820193909352921b1660348201526001604882015260009081906068015b60408051601f198184030181529190528051602090910120606854909150600090610df1906001600160a01b031683612c0a565b949350505050565b80516020808301516040516bffffffffffffffffffffffff19606094851b811693820193909352921b1660348201526000908190604801610dbd565b6000818152606a60209081526040808320815180830190925280546001600160a01b039081168352600190910154169181019190915290610e7582610df9565b90506000610e8283610d7e565b90506000823b15610f6d576040516370a0823160e01b81523360048201526001600160a01b038416906370a082319060240160206040518083038186803b158015610ecc57600080fd5b505afa158015610ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0491906134d9565b90508015610f6d5760405163079cc67960e41b8152336004820152602481018290526001600160a01b038416906379cc679090604401600060405180830381600087803b158015610f5457600080fd5b505af1158015610f68573d6000803e3d6000fd5b505050505b6000823b156110af576040516370a0823160e01b81523360048201526001600160a01b038416906370a082319060240160206040518083038186803b158015610fb557600080fd5b505afa158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fed91906134d9565b905080156110af57604051632e1b8c8760e21b81523360048201526001600160a01b0384169063b86e321c90602401600060405180830381600087803b15801561103657600080fd5b505af115801561104a573d6000803e3d6000fd5b505060405163079cc67960e41b8152336004820152602481018490526001600160a01b03861692506379cc67909150604401600060405180830381600087803b15801561109657600080fd5b505af11580156110aa573d6000803e3d6000fd5b505050505b60006110ba86611d58565b9050803b6111735760006110cd87612a83565b9050816001600160a01b0316816001600160a01b0316146111305760405162461bcd60e51b815260206004820152601b60248201527f4e6f74206465706c6f79696e672070726f7065722064697374726f00000000006044820152606401610776565b604080518981526001600160a01b03831660208201527fd2bb61ed4a0a485d895c65f25fb6c9185c98180ae407831365bc59f65419f9fe910160405180910390a1505b600061117f8385613654565b116111cc5760405162461bcd60e51b815260206004820152601260248201527f4e6f7468696e6720746f206d69677261746500000000000000000000000000006044820152606401610776565b6001600160a01b0381166340c10f19336111e68587613654565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561124457600080fd5b505af1158015611258573d6000803e3d6000fd5b5050505050505050505050565b62278d0081106112b75760405162461bcd60e51b815260206004820152601160248201527f54696d656c6f636b20746f6f206c6f6e670000000000000000000000000000006044820152606401610776565b6067546040517fdbe66ca00000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b039091169063dbe66ca09060240160206040518083038186803b15801561131357600080fd5b505afa158015611327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b91906133a9565b6113975760405162461bcd60e51b815260206004820152600760248201527f4e6f74207a6170000000000000000000000000000000000000000000000000006044820152606401610776565b6113a1600a6115fb565b6113aa84610b3f565b6000848152606a6020908152604091829020825180840190935280546001600160a01b03908116808552600190920154169183019190915261142e5760405162461bcd60e51b815260206004820152601b60248201527f4c505374616b696e673a204e6f6e6578697374656e7420706f6f6c00000000006044820152606401610776565b8051611445906001600160a01b0316333086612c86565b61144e81611d58565b60405163145e612f60e11b81526001600160a01b038681166004830152602482018690526044820185905291909116906328bcc25e906064015b600060405180830381600087803b1580156114a257600080fd5b505af11580156114b6573d6000803e3d6000fd5b505050505050505050565b6033546001600160a01b0316331461151b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610776565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b8060005b81811015610aab576115a084848381811061159457634e487b7160e01b600052603260045260246000fd5b905060200201356106bb565b6115a9816136af565b9050611569565b8060005b81811015610aab576115eb8484838181106115df57634e487b7160e01b600052603260045260246000fd5b90506020020135610b3f565b6115f4816136af565b90506115b4565b60008181526066602052604090205460ff16158061162357506033546001600160a01b031633145b61166f5760405162461bcd60e51b815260206004820152600660248201527f50617573656400000000000000000000000000000000000000000000000000006044820152606401610776565b50565b6033546001600160a01b031633146116cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610776565b6001600160a01b0381166116df57600080fd5b606980546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152606a6020908152604091829020825180840190935280546001600160a01b039081168452600190910154169082015261173f81336128e7565b6106f981610aa58433610ab1565b6033546001600160a01b03163314806117fc5750606760009054906101000a90046001600160a01b03166001600160a01b0316630d43e8ad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117af57600080fd5b505afa1580156117c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e791906132b8565b6001600160a01b0316336001600160a01b0316145b6118485760405162461bcd60e51b815260206004820152601960248201527f4c505374616b696e673a204e6f7420617574686f72697a6564000000000000006044820152606401610776565b6067546001600160a01b03166118a05760405162461bcd60e51b815260206004820152601a60248201527f4c505374616b696e673a20466163746f7279206e6f74207365740000000000006044820152606401610776565b6000818152606a60205260409020546001600160a01b0316156119055760405162461bcd60e51b815260206004820152601e60248201527f4c505374616b696e673a20506f6f6c20616c72656164792065786973747300006044820152606401610776565b6067546040517f81a36fb6000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b0316906381a36fb69060240160206040518083038186803b15801561196357600080fd5b505afa158015611977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199b91906132b8565b6069546040516387c13f4d60e01b81526001600160a01b038084166004830152929350600092909116906387c13f4d9060240160206040518083038186803b1580156119e657600080fd5b505afa1580156119fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1e91906132b8565b6040805180820182526001600160a01b03808416825285811660208084019182526000898152606a909152938420835181549084166001600160a01b0319918216178255915160019091018054919093169116179055919250611a8082612a83565b604080518781526001600160a01b03831660208201529192507f65fc0eb45954044fb55e1b01344d5d72fbfdf88e732d955f73bb7fb2bcc131e9910160405180910390a15050505050565b6000818152606a60209081526040808320815180830190925280546001600160a01b03908116808452600190920154169282019290925290611b105750600092915050565b611b1981610d7e565b9392505050565b600054610100900460ff1680611b39575060005460ff16155b611b9c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610776565b600054610100900460ff16158015611bbe576000805461ffff19166101011790555b611bc6612d37565b6001600160a01b038216611c1c5760405162461bcd60e51b815260206004820152601660248201527f50726f766964657220213d2061646472657373283029000000000000000000006044820152606401610776565b606b546001600160a01b031615611c755760405162461bcd60e51b815260206004820152601060248201527f416c72656164792061737369676e6564000000000000000000000000000000006044820152606401610776565b606980546001600160a01b0319166001600160a01b038416179055604051611c9c9061328f565b604051809103906000f080158015611cb8573d6000803e3d6000fd5b50606b80546001600160a01b0319166001600160a01b03929092169182179055604051639f63df1f60e01b81526000600482018190526060602483015260648201819052608060448301526084820152639f63df1f9060a401600060405180830381600087803b158015611d2b57600080fd5b505af1158015611d3f573d6000803e3d6000fd5b5050505080156106f9576000805461ff00191690555050565b80516020808301516040516bffffffffffffffffffffffff19606094851b811693820193909352921b16603482015260026048820152600090819060680160408051601f198184030181529190528051602090910120606b54909150600090610df1906001600160a01b031683612c0a565b6033546001600160a01b03163314611e245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610776565b6067546001600160a01b031615611e7d5760405162461bcd60e51b815260206004820152601d60248201527f6e6674785661756c74466163746f727920697320696d6d757461626c650000006044820152606401610776565b606780546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152606a60209081526040808320815180830190925280546001600160a01b03908116808452600190920154169282019290925290611ee45750600092915050565b611b1981610df9565b6000818152606a60209081526040808320815180830190925280546001600160a01b03908116808452600190920154169282019290925290611f325750600092915050565b611b1981611d58565b6033546001600160a01b03163314611f955760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610776565b6000848152606a60209081526040808320815180830190925280546001600160a01b039081168352600190910154169181019190915290611fd582611d58565b60405163079cc67960e41b81526001600160a01b03868116600483015260248201889052919250908216906379cc679090604401600060405180830381600087803b15801561202357600080fd5b505af1158015612037573d6000803e3d6000fd5b50506040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201899052841692506340c10f199150604401600060405180830381600087803b15801561209e57600080fd5b505af11580156120b2573d6000803e3d6000fd5b50505050505050505050565b604080518082019091526001600160a01b03808416825282166020820152600090610df181611d58565b6000828152606a60209081526040808320815180830190925280546001600160a01b03908116835260019091015416918101919091528161212882611d58565b60405163c19ea05360e01b81526001600160a01b0386811660048301529192509082169063c19ea0539060240160206040518083038186803b15801561216d57600080fd5b505afa158015612181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a591906134d9565b42111561077f576000925050506107fe565b6121c1600a6115fb565b6121ca82610b3f565b6000828152606a6020908152604091829020825180840190935280546001600160a01b03908116808552600190920154169183019190915261224e5760405162461bcd60e51b815260206004820152601b60248201527f4c505374616b696e673a204e6f6e6578697374656e7420706f6f6c00000000006044820152606401610776565b8051612265906001600160a01b0316333085612c86565b600061227082611d58565b60405163c19ea05360e01b81523360048201529091506000906001600160a01b0383169063c19ea0539060240160206040518083038186803b1580156122b557600080fd5b505afa1580156122c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ed91906134d9565b905042811115612395576001600160a01b0382166328bcc25e3386612312428661366c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b15801561237857600080fd5b505af115801561238c573d6000803e3d6000fd5b505050506123cf565b60405163145e612f60e11b815233600482015260248101859052600260448201526001600160a01b038316906328bcc25e90606401611488565b5050505050565b6033546001600160a01b031633146124305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610776565b6001600160a01b0381166124ac5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610776565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b600061251c6033546001600160a01b031690565b6001600160a01b0316336001600160a01b031614806125d15750606760009054906101000a90046001600160a01b03166001600160a01b0316630d43e8ad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561258457600080fd5b505afa158015612598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bc91906132b8565b6001600160a01b0316336001600160a01b0316145b61261d5760405162461bcd60e51b815260206004820152601960248201527f4c505374616b696e673a204e6f7420617574686f72697a6564000000000000006044820152606401610776565b6000838152606a6020908152604091829020825180840190935280546001600160a01b0390811680855260019092015416918301919091526126635760009150506107fe565b600061266e82611d58565b9050803b15806126ec5750806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126b257600080fd5b505afa1580156126c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ea91906134d9565b155b156126fc576000925050506107fe565b6020820151612716906001600160a01b0316338387612c86565b6040517f59974e38000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b038216906359974e3890602401600060405180830381600087803b15801561277157600080fd5b505af1158015612785573d6000803e3d6000fd5b505060408051888152602081018890527f0299314386021feac38b734d748626da8e75d6abb4e6a897c0f9c8f23ff42715935001905060405180910390a1506001949350505050565b6000828152606a60209081526040808320815180830190925280546001600160a01b03908116835260019091015416918101919091528161280e82611d58565b60405163c19ea05360e01b81526001600160a01b0386811660048301529192509082169063c19ea053906024016107a9565b6033546001600160a01b0316331461289a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610776565b6000818152606660209081526040808320805460ff191690558051848152918201929092527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d7491016108b0565b81516001600160a01b031661293e5760405162461bcd60e51b815260206004820152601b60248201527f4c505374616b696e673a204e6f6e6578697374656e7420706f6f6c00000000006044820152606401610776565b61294782611d58565b604051632e1b8c8760e21b81526001600160a01b038381166004830152919091169063b86e321c90602401600060405180830381600087803b15801561298c57600080fd5b505af11580156129a0573d6000803e3d6000fd5b505050505050565b82516001600160a01b03166129ff5760405162461bcd60e51b815260206004820152601b60248201527f4c505374616b696e673a204e6f6e6578697374656e7420706f6f6c00000000006044820152606401610776565b612a0883611d58565b60405163079cc67960e41b81526001600160a01b0383811660048301526024820185905291909116906379cc679090604401600060405180830381600087803b158015612a5457600080fd5b505af1158015612a68573d6000803e3d6000fd5b50508451610b3a92506001600160a01b031690508284612df9565b80516020808301516040516bffffffffffffffffffffffff19606094851b811693820193909352921b16603482015260026048820152600090819060680160408051601f198184030181529190528051602090910120606b54909150600090612af5906001600160a01b031683612e42565b60695460208601516040517f96c596710000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201529293506000929116906396c596719060240160006040518083038186803b158015612b5d57600080fd5b505afa158015612b71573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b9991908101906133c5565b6020860151604051639f63df1f60e01b81529192506001600160a01b03841691639f63df1f91612bcf9185908190600401613603565b600060405180830381600087803b158015612be957600080fd5b505af1158015612bfd573d6000803e3d6000fd5b5093979650505050505050565b6000611b198383306040517f3d602d80600a3d3981f3363d3d373d3d3d363d730000000000000000000000008152606093841b60148201527f5af43d82803e903d91602b57fd5bf3ff000000000000000000000000000000006028820152921b6038830152604c8201526037808220606c830152605591012090565b6040516001600160a01b0380851660248301528316604482015260648101829052610aab9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612ef9565b600054610100900460ff1680612d50575060005460ff16155b612db35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610776565b600054610100900460ff16158015612dd5576000805461ffff19166101011790555b612ddd612fde565b612de561308f565b801561166f576000805461ff001916905550565b6040516001600160a01b038316602482015260448101829052610b3a9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612cd3565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f59150506001600160a01b0381166107fe5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606401610776565b6000612f4e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131849092919063ffffffff16565b805190915015610b3a5780806020019051810190612f6c91906133a9565b610b3a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610776565b600054610100900460ff1680612ff7575060005460ff16155b61305a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610776565b600054610100900460ff16158015612de5576000805461ffff1916610101179055801561166f576000805461ff001916905550565b600054610100900460ff16806130a8575060005460ff16155b61310b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610776565b600054610100900460ff1615801561312d576000805461ffff19166101011790555b603380546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561166f576000805461ff001916905550565b6060610df1848460008585843b6131dd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610776565b600080866001600160a01b031685876040516131f991906135e7565b60006040518083038185875af1925050503d8060008114613236576040519150601f19603f3d011682016040523d82523d6000602084013e61323b565b606091505b509150915061324b828286613256565b979650505050505050565b60608315613265575081611b19565b8251156132755782518084602001fd5b8160405162461bcd60e51b81526004016107769190613641565b6123228061371a83390190565b6000602082840312156132ad578081fd5b8135611b19816136f6565b6000602082840312156132c9578081fd5b8151611b19816136f6565b600080604083850312156132e6578081fd5b82356132f1816136f6565b91506020830135613301816136f6565b809150509250929050565b6000806040838503121561331e578182fd5b8235613329816136f6565b915060208301356133018161370b565b6000806020838503121561334b578182fd5b823567ffffffffffffffff80821115613362578384fd5b818501915085601f830112613375578384fd5b813581811115613383578485fd5b8660208260051b8501011115613397578485fd5b60209290920196919550909350505050565b6000602082840312156133ba578081fd5b8151611b198161370b565b6000602082840312156133d6578081fd5b815167ffffffffffffffff808211156133ed578283fd5b818401915084601f830112613400578283fd5b815181811115613412576134126136e0565b604051601f8201601f19908116603f0116810190838211818310171561343a5761343a6136e0565b81604052828152876020848701011115613452578586fd5b61324b836020830160208801613683565b600060408284031215613474578081fd5b6040516040810181811067ffffffffffffffff82111715613497576134976136e0565b60405282356134a5816136f6565b815260208301356134b5816136f6565b60208201529392505050565b6000602082840312156134d2578081fd5b5035919050565b6000602082840312156134ea578081fd5b5051919050565b60008060408385031215613503578182fd5b823591506020830135613301816136f6565b6000806000806080858703121561352a578182fd5b84359350602085013561353c816136f6565b93969395505050506040820135916060013590565b60008060408385031215613563578182fd5b50508035926020909101359150565b60008060008060808587031215613587578384fd5b843593506020850135925060408501356135a0816136f6565b915060608501356135b0816136f6565b939692955090935050565b600081518084526135d3816020860160208601613683565b601f01601f19169290920160200192915050565b600082516135f9818460208701613683565b9190910192915050565b6001600160a01b038416815260606020820152600061362560608301856135bb565b828103604084015261363781856135bb565b9695505050505050565b602081526000611b1960208301846135bb565b60008219821115613667576136676136ca565b500190565b60008282101561367e5761367e6136ca565b500390565b60005b8381101561369e578181015183820152602001613686565b83811115610aab5750506000910152565b60006000198214156136c3576136c36136ca565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461166f57600080fd5b801515811461166f57600080fdfe608060405234801561001057600080fd5b50612302806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c806379cc6790116100ee578063a9059cbb11610097578063c19ea05311610071578063c19ea05314610377578063d4b83992146103a0578063dd62ed3e146103b3578063f2fde38b146103ec57600080fd5b8063a9059cbb14610328578063ad76d6861461033b578063b86e321c1461036457600080fd5b806395d89b41116100c857806395d89b41146102fa5780639f63df1f14610302578063a457c2d71461031557600080fd5b806379cc6790146102af5780638da5cb5b146102c257806391b89fba146102e757600080fd5b8063313ce5671161015057806359974e381161012a57806359974e381461026b57806370a082311461027e578063715018a6146102a757600080fd5b8063313ce56714610236578063395093511461024557806340c10f191461025857600080fd5b806318160ddd1161018157806318160ddd1461020657806323b872dd1461020e57806328bcc25e1461022157600080fd5b806305b3ccb4146101a857806306fdde03146101ce578063095ea7b3146101e3575b600080fd5b6101bb6101b6366004611ef1565b6103ff565b6040519081526020015b60405180910390f35b6101d661046f565b6040516101c591906120ab565b6101f66101f1366004611f85565b610501565b60405190151581526020016101c5565b6067546101bb565b6101f661021c366004611f45565b610517565b61023461022f366004611fb0565b610567565b005b604051601281526020016101c5565b6101f6610253366004611f85565b610640565b610234610266366004611f85565b610677565b610234610279366004612077565b6106df565b6101bb61028c366004611ef1565b6001600160a01b031660009081526065602052604090205490565b610234610856565b6102346102bd366004611f85565b610907565b6033546001600160a01b03165b6040516001600160a01b0390911681526020016101c5565b6101bb6102f5366004611ef1565b61096b565b6101d6610976565b610234610310366004612004565b610985565b6101f6610323366004611f85565b610a74565b6101f6610336366004611f85565b610b1d565b6101bb610349366004611ef1565b6001600160a01b03166000908152609a602052604090205490565b610234610372366004611ef1565b610b2a565b6101bb610385366004611ef1565b6001600160a01b03166000908152609b602052604090205490565b6097546102cf906001600160a01b031681565b6101bb6103c1366004611f0d565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b6102346103fa366004611ef1565b610c2d565b6001600160a01b03811660009081526099602090815260408083205460659092528220546098547001000000000000000000000000000000009261045f9261045a926104549161044f9190610d6c565b610d78565b90610df7565b610e35565b610469919061214e565b92915050565b60606068805461047e90612228565b80601f01602080910402602001604051908101604052809291908181526020018280546104aa90612228565b80156104f75780601f106104cc576101008083540402835291602001916104f7565b820191906000526020600020905b8154815290600101906020018083116104da57829003601f168201915b5050505050905090565b600061050e338484610e44565b50600192915050565b6000610524848484610f9d565b61055c8433610557856040518060600160405280602881526020016122a5602891396105508a336103c1565b919061108e565b610e44565b5060015b9392505050565b6033546001600160a01b031633146105c65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60006105d28242612136565b6001600160a01b0385166000818152609b60209081526040918290208490558151928352820186905281018290529091507fe1d6ea7b60537f263509ee48f8e298cc60801e7bddbec613b343272d897dc5e79060600160405180910390a161063a84846110ba565b50505050565b3360008181526066602090815260408083206001600160a01b0387168452909152812054909161050e918590610557908690612136565b6033546001600160a01b031633146106d15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bd565b6106db82826110ba565b5050565b6033546001600160a01b031633146107395760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bd565b600061074460675490565b116107915760405162461bcd60e51b815260206004820152601460248201527f526577617264446973743a203020737570706c7900000000000000000000000060448201526064016105bd565b600081116107e15760405162461bcd60e51b815260206004820152601460248201527f526577617264446973743a203020616d6f756e7400000000000000000000000060448201526064016105bd565b61081b6107ed60675490565b61080883700100000000000000000000000000000000610d6c565b610812919061214e565b6098549061111e565b60985560405181815233907fdf29796aad820e4bb192f3a8d631b76519bcd2cbe77cc85af20e9df53cece0869060200160405180910390a250565b6033546001600160a01b031633146108b05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bd565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36033805473ffffffffffffffffffffffffffffffffffffffff19169055565b6033546001600160a01b031633146109615760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bd565b6106db828261112a565b6000610469826111c3565b60606069805461047e90612228565b600054610100900460ff168061099e575060005460ff16155b610a015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105bd565b600054610100900460ff16158015610a23576000805461ffff19166101011790555b610a2b6111ef565b610a3583836112b2565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055801561063a576000805461ff001916905550505050565b3360009081526066602090815260408083206001600160a01b038616845290915281205482811015610b0e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016105bd565b61055c338561055786856121e5565b600061050e338484610f9d565b6033546001600160a01b03163314610b845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bd565b6000610b8f826111c3565b905080156106db576001600160a01b0382166000908152609a6020526040902054610bba908261111e565b6001600160a01b038084166000908152609a6020526040902091909155609754610be691168383611379565b816001600160a01b03167f1d3eee4ca001cff39eec6ec7615aacf2f2bd61791273830728ba00ccbd6e133782604051610c2191815260200190565b60405180910390a25050565b6033546001600160a01b03163314610c875760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bd565b6001600160a01b038116610d035760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105bd565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000610560828461216e565b6000600160ff1b8210610df35760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e7432353600000000000000000000000000000000000000000000000060648201526084016105bd565b5090565b600080610e0483856120de565b905060008312158015610e175750838112155b80610e2c5750600083128015610e2c57508381125b61056057600080fd5b600080821215610df357600080fd5b6001600160a01b038316610ebf5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016105bd565b6001600160a01b038216610f3b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016105bd565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166000908152609b60205260409020544211610ff25760405162461bcd60e51b815260206004820152600b60248201526a155cd95c881b1bd8dad95960aa1b60448201526064016105bd565b610ffd8383836113f9565b600061101761044f83609854610d6c90919063ffffffff16565b6001600160a01b03851660009081526099602052604090205490915061103d9082610df7565b6001600160a01b03808616600090815260996020526040808220939093559085168152205461106c908261161a565b6001600160a01b03909316600090815260996020526040902092909255505050565b600081848411156110b25760405162461bcd60e51b81526004016105bd91906120ab565b505050900390565b6110c48282611666565b6110fe6110df61044f83609854610d6c90919063ffffffff16565b6001600160a01b0384166000908152609960205260409020549061161a565b6001600160a01b0390921660009081526099602052604090209190915550565b60006105608284612136565b6001600160a01b0382166000908152609b6020526040902054421161117f5760405162461bcd60e51b815260206004820152600b60248201526a155cd95c881b1bd8dad95960aa1b60448201526064016105bd565b6111898282611745565b6110fe6111a461044f83609854610d6c90919063ffffffff16565b6001600160a01b03841660009081526099602052604090205490610df7565b6001600160a01b0381166000908152609a6020526040812054610469906111e9846103ff565b906118cb565b600054610100900460ff1680611208575060005460ff16155b61126b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105bd565b600054610100900460ff1615801561128d576000805461ffff19166101011790555b6112956118d7565b61129d611988565b80156112af576000805461ff00191690555b50565b600054610100900460ff16806112cb575060005460ff16155b61132e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105bd565b600054610100900460ff16158015611350576000805461ffff19166101011790555b6113586118d7565b6113628383611a8a565b8015611374576000805461ff00191690555b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611374908490611b66565b6001600160a01b0383166114755760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016105bd565b6001600160a01b0382166114f15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016105bd565b6001600160a01b038316600090815260656020526040902054818110156115805760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016105bd565b61158a82826121e5565b6001600160a01b0380861660009081526065602052604080822093909355908516815290812080548492906115c0908490612136565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161160c91815260200190565b60405180910390a350505050565b6000808212158015611635575082611632838261218d565b13155b806116535750600082128015611653575082611651838261218d565b135b61165c57600080fd5b610560828461218d565b6001600160a01b0382166116bc5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105bd565b80606760008282546116ce9190612136565b90915550506001600160a01b038216600090815260656020526040812080548392906116fb908490612136565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166117c15760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016105bd565b6001600160a01b038216600090815260656020526040902054818110156118505760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016105bd565b61185a82826121e5565b6001600160a01b038416600090815260656020526040812091909155606780548492906118889084906121e5565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610f90565b600061056082846121e5565b600054610100900460ff16806118f0575060005460ff16155b6119535760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105bd565b600054610100900460ff1615801561129d576000805461ffff191661010117905580156112af576000805461ff001916905550565b600054610100900460ff16806119a1575060005460ff16155b611a045760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105bd565b600054610100900460ff16158015611a26576000805461ffff19166101011790555b6033805473ffffffffffffffffffffffffffffffffffffffff19163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156112af576000805461ff001916905550565b600054610100900460ff1680611aa3575060005460ff16155b611b065760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105bd565b600054610100900460ff16158015611b28576000805461ffff19166101011790555b8251611b3b906068906020860190611dda565b508151611b4f906069906020850190611dda565b508015611374576000805461ff0019169055505050565b6000611bbb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c4b9092919063ffffffff16565b8051909150156113745780806020019051810190611bd99190611fe4565b6113745760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016105bd565b6060611c5a8484600085611c62565b949350505050565b606082471015611cda5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016105bd565b843b611d285760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105bd565b600080866001600160a01b03168587604051611d44919061208f565b60006040518083038185875af1925050503d8060008114611d81576040519150601f19603f3d011682016040523d82523d6000602084013e611d86565b606091505b5091509150611d96828286611da1565b979650505050505050565b60608315611db0575081610560565b825115611dc05782518084602001fd5b8160405162461bcd60e51b81526004016105bd91906120ab565b828054611de690612228565b90600052602060002090601f016020900481019282611e085760008555611e4e565b82601f10611e2157805160ff1916838001178555611e4e565b82800160010185558215611e4e579182015b82811115611e4e578251825591602001919060010190611e33565b50610df39291505b80821115610df35760008155600101611e56565b600082601f830112611e7a578081fd5b813567ffffffffffffffff80821115611e9557611e95612279565b604051601f8301601f19908116603f01168101908282118183101715611ebd57611ebd612279565b81604052838152866020858801011115611ed5578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611f02578081fd5b81356105608161228f565b60008060408385031215611f1f578081fd5b8235611f2a8161228f565b91506020830135611f3a8161228f565b809150509250929050565b600080600060608486031215611f59578081fd5b8335611f648161228f565b92506020840135611f748161228f565b929592945050506040919091013590565b60008060408385031215611f97578182fd5b8235611fa28161228f565b946020939093013593505050565b600080600060608486031215611fc4578283fd5b8335611fcf8161228f565b95602085013595506040909401359392505050565b600060208284031215611ff5578081fd5b81518015158114610560578182fd5b600080600060608486031215612018578283fd5b83356120238161228f565b9250602084013567ffffffffffffffff8082111561203f578384fd5b61204b87838801611e6a565b93506040860135915080821115612060578283fd5b5061206d86828701611e6a565b9150509250925092565b600060208284031215612088578081fd5b5035919050565b600082516120a18184602087016121fc565b9190910192915050565b60208152600082518060208401526120ca8160408501602087016121fc565b601f01601f19169190910160400192915050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0384138115161561211857612118612263565b82600160ff1b03841281161561213057612130612263565b50500190565b6000821982111561214957612149612263565b500190565b60008261216957634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561218857612188612263565b500290565b600080831283600160ff1b018312811516156121ab576121ab612263565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156121df576121df612263565b50500390565b6000828210156121f7576121f7612263565b500390565b60005b838110156122175781810151838201526020016121ff565b8381111561063a5750506000910152565b600181811c9082168061223c57607f821691505b6020821081141561225d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146112af57600080fdfe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212207c2cf0dfb2f084b9bed8d55e29706119408890791a95fadd752cf48474ea3a4964736f6c63430008040033a2646970667358221220bfdf5b9a8aae07792b123e72fe67ae31eef2c4a02a4cd275c329bb8d335d3fe364736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13332,
        "contract": "contracts/solidity/NFTXLPStaking.sol:NFTXLPStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13335,
        "contract": "contracts/solidity/NFTXLPStaking.sol:NFTXLPStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 16759,
        "contract": "contracts/solidity/NFTXLPStaking.sol:NFTXLPStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17525,
        "contract": "contracts/solidity/NFTXLPStaking.sol:NFTXLPStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 17644,
        "contract": "contracts/solidity/NFTXLPStaking.sol:NFTXLPStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17675,
        "contract": "contracts/solidity/NFTXLPStaking.sol:NFTXLPStaking",
        "label": "isGuardian",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17679,
        "contract": "contracts/solidity/NFTXLPStaking.sol:NFTXLPStaking",
        "label": "isPaused",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 972,
        "contract": "contracts/solidity/NFTXLPStaking.sol:NFTXLPStaking",
        "label": "nftxVaultFactory",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(INFTXVaultFactory)12371"
      },
      {
        "astId": 975,
        "contract": "contracts/solidity/NFTXLPStaking.sol:NFTXLPStaking",
        "label": "rewardDistTokenImpl",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IRewardDistributionToken)12434"
      },
      {
        "astId": 978,
        "contract": "contracts/solidity/NFTXLPStaking.sol:NFTXLPStaking",
        "label": "stakingTokenProvider",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(StakingTokenProvider)11081"
      },
      {
        "astId": 1006,
        "contract": "contracts/solidity/NFTXLPStaking.sol:NFTXLPStaking",
        "label": "vaultStakingInfo",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint256,t_struct(StakingPool)1001_storage)"
      },
      {
        "astId": 1009,
        "contract": "contracts/solidity/NFTXLPStaking.sol:NFTXLPStaking",
        "label": "newTimelockRewardDistTokenImpl",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(TimelockRewardDistributionTokenImpl)16124"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INFTXVaultFactory)12371": {
        "encoding": "inplace",
        "label": "contract INFTXVaultFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardDistributionToken)12434": {
        "encoding": "inplace",
        "label": "contract IRewardDistributionToken",
        "numberOfBytes": "20"
      },
      "t_contract(StakingTokenProvider)11081": {
        "encoding": "inplace",
        "label": "contract StakingTokenProvider",
        "numberOfBytes": "20"
      },
      "t_contract(TimelockRewardDistributionTokenImpl)16124": {
        "encoding": "inplace",
        "label": "contract TimelockRewardDistributionTokenImpl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(StakingPool)1001_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTXLPStaking.StakingPool)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingPool)1001_storage"
      },
      "t_struct(StakingPool)1001_storage": {
        "encoding": "inplace",
        "label": "struct NFTXLPStaking.StakingPool",
        "members": [
          {
            "astId": 998,
            "contract": "contracts/solidity/NFTXLPStaking.sol:NFTXLPStaking",
            "label": "stakingToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1000,
            "contract": "contracts/solidity/NFTXLPStaking.sol:NFTXLPStaking",
            "label": "rewardToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}