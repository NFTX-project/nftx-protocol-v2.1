{
  "address": "0xbDD98859A0E8F558247905946ed3794EE1C83A03",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftxFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_inventoryStaking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpStaking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sushiRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_swapTarget",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swapCallData",
          "type": "bytes"
        }
      ],
      "name": "buyAndStakeInventory",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swapCallData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "minTokenIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minWethIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wethIn",
          "type": "uint256"
        }
      ],
      "name": "buyAndStakeLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inventoryStaking",
      "outputs": [
        {
          "internalType": "contract INFTXInventoryStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpStaking",
      "outputs": [
        {
          "internalType": "contract INFTXLPStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftxFactory",
      "outputs": [
        {
          "internalType": "contract INFTXVaultFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftxVaultAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "rescue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x58e31944b0b568b58ca14d8df15f4dd44820ca09e455183c09d849f7c5091285",
  "receipt": {
    "to": null,
    "from": "0xDEA9196Dcdd2173D6E369c2AcC0faCc83fD9346a",
    "contractAddress": "0xbDD98859A0E8F558247905946ed3794EE1C83A03",
    "transactionIndex": 69,
    "gasUsed": "2156204",
    "logsBloom": "0x
    "blockHash": "0x962df678f45606adb5e1b9f2af476eca1c8359bd8ec47f0b8dcf6668b932572f",
    "transactionHash": "0x58e31944b0b568b58ca14d8df15f4dd44820ca09e455183c09d849f7c5091285",
    "logs": [
      {
        "transactionIndex": 69,
        "blockNumber": 8123422,
        "transactionHash": "0x58e31944b0b568b58ca14d8df15f4dd44820ca09e455183c09d849f7c5091285",
        "address": "0xbDD98859A0E8F558247905946ed3794EE1C83A03",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dea9196dcdd2173d6e369c2acc0facc83fd9346a"
        ],
        "data": "0x",
        "logIndex": 172,
        "blockHash": "0x962df678f45606adb5e1b9f2af476eca1c8359bd8ec47f0b8dcf6668b932572f"
      },
      {
        "transactionIndex": 69,
        "blockNumber": 8123422,
        "transactionHash": "0x58e31944b0b568b58ca14d8df15f4dd44820ca09e455183c09d849f7c5091285",
        "address": "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000bdd98859a0e8f558247905946ed3794ee1c83a03",
          "0x0000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b47997506"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 173,
        "blockHash": "0x962df678f45606adb5e1b9f2af476eca1c8359bd8ec47f0b8dcf6668b932572f"
      },
      {
        "transactionIndex": 69,
        "blockNumber": 8123422,
        "transactionHash": "0x58e31944b0b568b58ca14d8df15f4dd44820ca09e455183c09d849f7c5091285",
        "address": "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000bdd98859a0e8f558247905946ed3794ee1c83a03",
          "0x000000000000000000000000f91bb752490473b8342a3e964e855b9f9a2a668e"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 174,
        "blockHash": "0x962df678f45606adb5e1b9f2af476eca1c8359bd8ec47f0b8dcf6668b932572f"
      }
    ],
    "blockNumber": 8123422,
    "cumulativeGasUsed": "18349932",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1478bEB5D18B23d2bA90FcEe91d66460AC585e6b",
    "0x6e91A3f27cE6753f47C66B76B03E6A7bFdDB605B",
    "0xAfC303423580239653aFB6fb06d37D666ea0f5cA",
    "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506",
    "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
    "0xF91bB752490473B8342a3E964E855b9f9a2A668e"
  ],
  "numDeployments": 1,
  "solcInputHash": "fd5de7ae3c04dbfc1278b9b56b87daf9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftxFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inventoryStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_swapTarget\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"name\":\"buyAndStakeInventory\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"minTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethIn\",\"type\":\"uint256\"}],\"name\":\"buyAndStakeLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inventoryStaking\",\"outputs\":[{\"internalType\":\"contract INFTXInventoryStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStaking\",\"outputs\":[{\"internalType\":\"contract INFTXLPStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftxFactory\",\"outputs\":[{\"internalType\":\"contract INFTXVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftxVaultAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Twade\",\"kind\":\"dev\",\"methods\":{\"buyAndStakeInventory(uint256,bytes)\":{\"params\":{\"swapCallData\":\"The `data` field from the 0x API response\",\"vaultId\":\"The ID of the NFTX vault\"}},\"buyAndStakeLiquidity(uint256,bytes,uint256,uint256,uint256)\":{\"params\":{\"minTokenIn\":\"The minimum amount of token to LP\",\"minWethIn\":\"The minimum amount of ETH (WETH) to LP\",\"swapCallData\":\"The `data` field from the 0x API response\",\"vaultId\":\"The ID of the NFTX vault\",\"wethIn\":\"The amount of ETH (WETH) supplied\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause(bool)\":{\"params\":{\"_paused\":\"New pause state\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescue(address)\":{\"params\":{\"token\":\"The address of the token to be rescued\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"WETH()\":{\"notice\":\"An interface for the WETH contract\"},\"buyAndStakeInventory(uint256,bytes)\":{\"notice\":\"Allows the user to buy and stake tokens against an Inventory. This will handle the purchase of the vault tokens against 0x and then generate the xToken against the vault and timelock them. \"},\"buyAndStakeLiquidity(uint256,bytes,uint256,uint256,uint256)\":{\"notice\":\"Allows the user to buy and stake tokens against a Liquidity pool. This will handle the purchase of the vault tokens against 0x, the liquidity pool supplying via sushi and then the timelocking against our LP token. \"},\"constructor\":{\"notice\":\"Initialises our zap and sets our internal addresses that will be referenced in our contract. This allows for varied addresses based on the network.\"},\"inventoryStaking()\":{\"notice\":\"An interface for the NFTX Vault Factory contract\"},\"nftxFactory()\":{\"notice\":\"An interface for the NFTX Vault Factory contract\"},\"nftxVaultAddresses(uint256)\":{\"notice\":\"A mapping of NFTX Vault IDs to their address corresponding vault contract address\"},\"pause(bool)\":{\"notice\":\"Allows our zap to be paused to prevent any processing. \"},\"paused()\":{\"notice\":\"Allows zap to be paused\"},\"rescue(address)\":{\"notice\":\"Allows our owner to withdraw and tokens in the contract. \"},\"sushiRouter()\":{\"notice\":\"Holds the mapping of our sushi router\"}},\"notice\":\"Allows users to buy and stake tokens into either an inventory or liquidity pool, handling the steps between buying and staking across 0x and sushi. \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/solidity/NFTXYieldStakingZap.sol\":\"NFTXYieldStakingZap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/solidity/NFTXYieldStakingZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/INFTXInventoryStaking.sol\\\";\\nimport \\\"./interface/INFTXLPStaking.sol\\\";\\nimport \\\"./interface/INFTXVaultFactory.sol\\\";\\nimport \\\"./interface/IUniswapV2Router01.sol\\\";\\nimport \\\"./util/Ownable.sol\\\";\\nimport \\\"./util/ReentrancyGuard.sol\\\";\\nimport \\\"./util/SafeERC20.sol\\\";\\n\\n\\n/**\\n * @notice A partial WETH interface.\\n */\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n  function transfer(address to, uint value) external returns (bool);\\n  function withdraw(uint) external;\\n  function balanceOf(address to) external view returns (uint256);\\n  function approve(address guy, uint wad) external returns (bool);\\n}\\n\\n\\n/**\\n * @notice Allows users to buy and stake tokens into either an inventory or liquidity\\n * pool, handling the steps between buying and staking across 0x and sushi.\\n * \\n * @author Twade\\n */\\n\\ncontract NFTXYieldStakingZap is Ownable, ReentrancyGuard {\\n\\n  using SafeERC20 for IERC20;\\n  \\n  /// @notice Allows zap to be paused\\n  bool public paused = false;\\n\\n  /// @notice Sets our 0x swap target\\n  address payable private immutable swapTarget;\\n \\n  /// @notice Holds the mapping of our sushi router\\n  IUniswapV2Router01 public immutable sushiRouter;\\n\\n  /// @notice An interface for the WETH contract\\n  IWETH public immutable WETH;\\n\\n  /// @notice An interface for the NFTX Vault Factory contract\\n  INFTXInventoryStaking public immutable inventoryStaking;\\n  INFTXLPStaking public immutable lpStaking;\\n\\n  /// @notice An interface for the NFTX Vault Factory contract\\n  INFTXVaultFactory public immutable nftxFactory;\\n\\n  /// @notice A mapping of NFTX Vault IDs to their address corresponding\\n  /// vault contract address\\n  mapping(uint256 => address) public nftxVaultAddresses;\\n\\n\\n  /**\\n   * @notice Initialises our zap and sets our internal addresses that will be referenced\\n   * in our contract. This allows for varied addresses based on the network.\\n   */\\n\\n  constructor(\\n    address _nftxFactory,\\n    address _inventoryStaking,\\n    address _lpStaking,\\n    address _sushiRouter,\\n    address _weth,\\n    address payable _swapTarget\\n  ) Ownable() ReentrancyGuard() {\\n    // Set our staking contracts\\n    inventoryStaking = INFTXInventoryStaking(_inventoryStaking);\\n    lpStaking = INFTXLPStaking(_lpStaking);\\n\\n    // Set our NFTX factory contract\\n    nftxFactory = INFTXVaultFactory(_nftxFactory);\\n\\n    // Set our Sushi Router used for liquidity\\n    sushiRouter = IUniswapV2Router01(_sushiRouter);\\n\\n    // Set our chain's WETH contract\\n    WETH = IWETH(_weth);\\n    // setting infinite approval here to save on subsequent gas costs\\n    IWETH(_weth).approve(_sushiRouter, type(uint256).max);\\n    IWETH(_weth).approve(_swapTarget, type(uint256).max);\\n\\n    // Set our 0x Swap Target\\n    swapTarget = _swapTarget;\\n  }\\n\\n\\n  /**\\n   * @notice Allows the user to buy and stake tokens against an Inventory. This will\\n   * handle the purchase of the vault tokens against 0x and then generate the xToken\\n   * against the vault and timelock them.\\n   * \\n   * @param vaultId The ID of the NFTX vault\\n   * @param swapCallData The `data` field from the 0x API response\\n   */\\n\\n  function buyAndStakeInventory(\\n    uint256 vaultId,\\n    bytes calldata swapCallData\\n  ) external payable nonReentrant onlyOwnerIfPaused {\\n    // Ensure we have tx value\\n    require(msg.value > 0, 'Invalid value provided');\\n\\n    // Get our vaults base staking token. This is used to calculate the xToken\\n    address baseToken = _vaultAddress(vaultId);\\n    require(baseToken != address(0), 'Invalid vault provided');\\n    \\n    // Get our start WETH balance\\n    uint wethBalance = WETH.balanceOf(address(this));\\n\\n    // Wrap ETH into WETH for our contract from the sender\\n    if (msg.value > 0) {\\n      WETH.deposit{value: msg.value}();\\n    }\\n\\n    // Convert WETH to vault token\\n    uint256 vaultTokenAmount = _fillQuote(baseToken, swapCallData);\\n\\n    // Make a direct timelock mint using the default timelock duration. This sends directly\\n    // to our user, rather than via the zap, to avoid the timelock locking the tx.\\n    IERC20(baseToken).transfer(inventoryStaking.vaultXToken(vaultId), vaultTokenAmount);\\n    inventoryStaking.timelockMintFor(vaultId, vaultTokenAmount, msg.sender, 2);\\n\\n    // Return any left of WETH to the user as ETH\\n    uint256 remainingWETH = WETH.balanceOf(address(this)) - wethBalance;\\n    if (remainingWETH > 0) {\\n      // Unwrap our WETH into ETH and transfer it to the recipient\\n      WETH.withdraw(remainingWETH);\\n      (bool success, ) = payable(msg.sender).call{value: remainingWETH}(\\\"\\\");\\n      require(success, \\\"Unable to send unwrapped WETH\\\");\\n    }\\n  }\\n\\n\\n  /**\\n   * @notice Allows the user to buy and stake tokens against a Liquidity pool. This will\\n   * handle the purchase of the vault tokens against 0x, the liquidity pool supplying via\\n   * sushi and then the timelocking against our LP token.\\n   * \\n   * @param vaultId The ID of the NFTX vault\\n   * @param swapCallData The `data` field from the 0x API response\\n   * @param minTokenIn The minimum amount of token to LP\\n   * @param minWethIn The minimum amount of ETH (WETH) to LP\\n   * @param wethIn The amount of ETH (WETH) supplied\\n   */\\n\\n  function buyAndStakeLiquidity(\\n    // Base data\\n    uint256 vaultId,\\n\\n    // 0x integration\\n    bytes calldata swapCallData,\\n\\n    // Sushiswap integration\\n    uint256 minTokenIn,\\n    uint256 minWethIn,\\n    uint256 wethIn\\n\\n  ) external payable nonReentrant onlyOwnerIfPaused {\\n    // Ensure we have tx value\\n    require(msg.value > 0, 'Invalid value provided');\\n    require(msg.value > wethIn, 'Insufficient vault sent for pairing');\\n\\n    // Get our start WETH balance\\n    uint wethBalance = WETH.balanceOf(address(this));\\n\\n    // Wrap ETH into WETH for our contract from the sender\\n    if (msg.value > 0) {\\n      WETH.deposit{value: msg.value}();\\n    }\\n\\n    // Get our vaults base staking token. This is used to calculate the xToken\\n    address baseToken = _vaultAddress(vaultId);\\n    require(baseToken != address(0), 'Invalid vault provided');\\n\\n    // Convert WETH to vault token\\n    uint256 vaultTokenAmount = _fillQuote(baseToken, swapCallData);\\n    require(vaultTokenAmount > minTokenIn, 'Insufficient tokens acquired');\\n\\n    // Check WETH balance\\n    uint256 WETHAmount = WETH.balanceOf(address(this)) - wethBalance;\\n    require(WETHAmount >= wethIn, 'Insufficient WETH remaining');\\n\\n    // Provide liquidity to sushiswap, using the vault token that we acquired from 0x and\\n    // pairing it with the liquidity amount specified in the call.\\n    IERC20(baseToken).safeApprove(address(sushiRouter), vaultTokenAmount);\\n    (uint256 amountToken, , uint256 liquidity) = sushiRouter.addLiquidity(\\n      baseToken,\\n      address(WETH),\\n      vaultTokenAmount,\\n      wethIn,\\n      minTokenIn,\\n      minWethIn,\\n      address(this),\\n      block.timestamp\\n    );\\n\\n    // Stake in LP rewards contract \\n    address lpToken = pairFor(baseToken, address(WETH));\\n    IERC20(lpToken).safeApprove(address(lpStaking), liquidity);\\n    lpStaking.timelockDepositFor(vaultId, msg.sender, liquidity, 48 hours);\\n    \\n    // Return any token dust to the caller\\n    uint256 remainingTokens = vaultTokenAmount - amountToken;\\n    if (remainingTokens != 0) {\\n      IERC20(baseToken).transfer(msg.sender, remainingTokens);\\n    }\\n\\n    // Return any left of WETH to the user as ETH\\n    uint256 remainingWETH = WETH.balanceOf(address(this)) - wethBalance;\\n    if (remainingWETH > 0) {\\n      // Unwrap our WETH into ETH and transfer it to the recipient\\n      WETH.withdraw(remainingWETH);\\n      (bool success, ) = payable(msg.sender).call{value: remainingWETH}(\\\"\\\");\\n      require(success, \\\"Unable to send unwrapped WETH\\\");\\n    }\\n  }\\n\\n\\n  /**\\n   * @notice Calculates the CREATE2 address for a sushi pair without making any\\n   * external calls.\\n   * \\n   * @return pair Address of our token pair\\n   */\\n\\n  function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = address(uint160(uint256(keccak256(abi.encodePacked(\\n      hex'ff',\\n      sushiRouter.factory(),\\n      keccak256(abi.encodePacked(token0, token1)),\\n      hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\\n    )))));\\n  }\\n\\n\\n  /**\\n   * @notice Returns sorted token addresses, used to handle return values from pairs sorted in\\n   * this order.\\n   */\\n\\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n      require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n      (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n      require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n  }\\n\\n\\n  /**\\n   * @notice Allows our owner to withdraw and tokens in the contract.\\n   * \\n   * @param token The address of the token to be rescued\\n   */\\n\\n  function rescue(address token) external onlyOwner {\\n    if (token == address(0)) {\\n      (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n      require(success, \\\"Address: unable to send value\\\");\\n    } else {\\n      IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\\n    }\\n  }\\n\\n\\n  /**\\n   * @notice Swaps ERC20->ERC20 tokens held by this contract using a 0x-API quote.\\n   *\\n   * @param buyToken The `buyTokenAddress` field from the API response\\n   * @param swapCallData The `data` field from the API response\\n   */\\n\\n  function _fillQuote(\\n    address buyToken,\\n    bytes calldata swapCallData\\n  ) internal returns (uint256) {\\n      // Track our balance of the buyToken to determine how much we've bought.\\n      uint256 boughtAmount = IERC20(buyToken).balanceOf(address(this));\\n\\n      // Call the encoded swap function call on the contract at `swapTarget`\\n      (bool success,) = swapTarget.call(swapCallData);\\n      require(success, 'SWAP_CALL_FAILED');\\n\\n      // Use our current buyToken balance to determine how much we've bought.\\n      return IERC20(buyToken).balanceOf(address(this)) - boughtAmount;\\n  }\\n\\n\\n  /**\\n   * @notice Maps a cached NFTX vault address against a vault ID for gas savings on\\n   * repeat vault address lookups.\\n   * \\n   * @param vaultId The ID of the NFTX vault\\n   */\\n\\n  function _vaultAddress(uint256 vaultId) internal returns (address) {\\n    if (nftxVaultAddresses[vaultId] == address(0)) {\\n      nftxVaultAddresses[vaultId] = nftxFactory.vault(vaultId);\\n    }\\n\\n    require(nftxVaultAddresses[vaultId] != address(0), 'Vault does not exist');\\n    return nftxVaultAddresses[vaultId];\\n  }\\n\\n\\n  /**\\n   * @notice Allows our zap to be paused to prevent any processing.\\n   * \\n   * @param _paused New pause state\\n   */\\n\\n  function pause(bool _paused) external onlyOwner {\\n    paused = _paused;\\n  }\\n\\n  /**\\n   * @notice A modifier that only allows the owner to interact with the function\\n   * if the contract is paused. If the contract is not paused then anyone can\\n   * interact with the function.\\n   */\\n\\n  modifier onlyOwnerIfPaused() {\\n    require(!paused || msg.sender == owner(), \\\"Zap is paused\\\");\\n    _;\\n  }\\n\\n\\n  /**\\n   * @notice Allows our contract to only receive WETH and reject everything else.\\n   */\\n\\n  receive() external payable {\\n    require(msg.sender == address(WETH), \\\"Only WETH\\\");\\n  }\\n\\n}\\n\",\"keccak256\":\"0x46fbc98b687c76ba6421ff1df9bfc841b3a8a97a180263e29359001f0a44b7a6\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXInventoryStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./INFTXVaultFactory.sol\\\";\\n\\ninterface INFTXInventoryStaking {\\n    function nftxVaultFactory() external view returns (INFTXVaultFactory);\\n\\n    function vaultXToken(uint256 vaultId) external view returns (address);\\n\\n    function xTokenAddr(address baseToken) external view returns (address);\\n\\n    function xTokenShareValue(uint256 vaultId) external view returns (uint256);\\n\\n    function __NFTXInventoryStaking_init(address nftxFactory) external;\\n\\n    function deployXTokenForVault(uint256 vaultId) external;\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function timelockMintFor(\\n        uint256 vaultId,\\n        uint256 amount,\\n        address to,\\n        uint256 timelockLength\\n    ) external returns (uint256);\\n\\n    function deposit(uint256 vaultId, uint256 _amount) external;\\n\\n    function withdraw(uint256 vaultId, uint256 _share) external;\\n}\\n\",\"keccak256\":\"0x80540f3c1ec01c54afc55dd9343e9973e8ea4f11ac12e2129d3cb088f8380649\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXLPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXLPStaking {\\n    function nftxVaultFactory() external view returns (address);\\n\\n    function rewardDistTokenImpl() external view returns (address);\\n\\n    function stakingTokenProvider() external view returns (address);\\n\\n    function vaultToken(address _stakingToken) external view returns (address);\\n\\n    function stakingToken(address _vaultToken) external view returns (address);\\n\\n    function rewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function newRewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function oldRewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function unusedRewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function rewardDistributionTokenAddr(\\n        address stakedToken,\\n        address rewardToken\\n    ) external view returns (address);\\n\\n    // Write functions.\\n    function __NFTXLPStaking__init(address _stakingTokenProvider) external;\\n\\n    function setNFTXVaultFactory(address newFactory) external;\\n\\n    function setStakingTokenProvider(address newProvider) external;\\n\\n    function addPoolForVault(uint256 vaultId) external;\\n\\n    function updatePoolForVault(uint256 vaultId) external;\\n\\n    function updatePoolForVaults(uint256[] calldata vaultId) external;\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function deposit(uint256 vaultId, uint256 amount) external;\\n\\n    function timelockDepositFor(\\n        uint256 vaultId,\\n        address account,\\n        uint256 amount,\\n        uint256 timelockLength\\n    ) external;\\n\\n    function exit(uint256 vaultId, uint256 amount) external;\\n\\n    function rescue(uint256 vaultId) external;\\n\\n    function withdraw(uint256 vaultId, uint256 amount) external;\\n\\n    function claimRewards(uint256 vaultId) external;\\n}\\n\",\"keccak256\":\"0x8060d654324a6785929a06f45ffe9f4d2944eeca59b050ba66faf9af70e19861\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/IBeacon.sol\\\";\\n\\ninterface INFTXVaultFactory is IBeacon {\\n    // Read functions.\\n    function numVaults() external view returns (uint256);\\n\\n    function zapContract() external view returns (address);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function eligibilityManager() external view returns (address);\\n\\n    function vault(uint256 vaultId) external view returns (address);\\n\\n    function allVaults() external view returns (address[] memory);\\n\\n    function vaultsForAsset(address asset)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function isLocked(uint256 id) external view returns (bool);\\n\\n    function excludedFromFees(address addr) external view returns (bool);\\n\\n    function factoryMintFee() external view returns (uint64);\\n\\n    function factoryRandomRedeemFee() external view returns (uint64);\\n\\n    function factoryTargetRedeemFee() external view returns (uint64);\\n\\n    function factoryRandomSwapFee() external view returns (uint64);\\n\\n    function factoryTargetSwapFee() external view returns (uint64);\\n\\n    function vaultFees(uint256 vaultId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    event NewFeeDistributor(address oldDistributor, address newDistributor);\\n    event NewZapContract(address oldZap, address newZap);\\n    event FeeExclusion(address feeExcluded, bool excluded);\\n    event NewEligibilityManager(address oldEligManager, address newEligManager);\\n    event NewVault(\\n        uint256 indexed vaultId,\\n        address vaultAddress,\\n        address assetAddress\\n    );\\n    event UpdateVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n    event DisableVaultFees(uint256 vaultId);\\n    event UpdateFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n\\n    // Write functions.\\n    function __NFTXVaultFactory_init(\\n        address _vaultImpl,\\n        address _feeDistributor\\n    ) external;\\n\\n    function createVault(\\n        string calldata name,\\n        string calldata symbol,\\n        address _assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    ) external returns (uint256);\\n\\n    function setFeeDistributor(address _feeDistributor) external;\\n\\n    function setEligibilityManager(address _eligibilityManager) external;\\n\\n    function setZapContract(address _zapContract) external;\\n\\n    function setFeeExclusion(address _excludedAddr, bool excluded) external;\\n\\n    function setFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function setVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees(uint256 vaultId) external;\\n}\\n\",\"keccak256\":\"0x9780b597cd74ef0cf4db1084f8b8f96dd6b643645cddf70d5c81a6caf372057a\",\"license\":\"MIT\"},\"contracts/solidity/interface/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x9d9507bd23206f8914e46b21966e1a06659a2b98741d91cf200e000ffc6b0f9c\",\"license\":\"MIT\"},\"contracts/solidity/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function childImplementation() external view returns (address);\\n\\n    function upgradeChildTo(address newImplementation) external;\\n}\\n\",\"keccak256\":\"0xd9b361e1d9b9a4bde9801abb5692e9fd7018cb52505d3a47dc7b5dd968bcad28\",\"license\":\"MIT\"},\"contracts/solidity/testing/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/solidity/testing/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2d15296ca79a3ab4ec9476e0aa6f4fd27eb56cc192c67e372bff46f14ed72542\",\"license\":\"MIT\"},\"contracts/solidity/testing/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x35e258421ae206f3db37281cea70871b4c3553914734aa76139a41af60ac1abb\",\"license\":\"MIT\"},\"contracts/solidity/util/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd38318b34491b4e11bab877e4dbafbf51111b69b09307b01ca952cf24e4229d0\",\"license\":\"MIT\"},\"contracts/solidity/util/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../testing/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xa0dc63480490e75aa2677bc8dc5dd056b4e8a4507254ed442e9c49140c1950db\",\"license\":\"MIT\"},\"contracts/solidity/util/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x2c09a41d3d53e0fdd19581192917c2eb40d687608af6e59c99132199af4add38\",\"license\":\"MIT\"},\"contracts/solidity/util/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../testing/IERC20.sol\\\";\\nimport \\\"../testing/IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(\\n            nonceAfter == nonceBefore + 1,\\n            \\\"SafeERC20: permit did not succeed\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x368f57bccda60b860e6c9a9207ef5f478fd188ff051868229793b1bff51f2562\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040526002805460ff191690553480156200001c57600080fd5b50604051620027d9380380620027d98339810160408190526200003f91620001e4565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180556001600160601b0319606086811b821660e05285811b82166101005287811b82166101205284811b821660a05283901b1660c05260405163095ea7b360e01b81526001600160a01b038085166004830152600019602483015283169063095ea7b390604401602060405180830381600087803b1580156200010457600080fd5b505af115801562000119573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013f919062000277565b5060405163095ea7b360e01b81526001600160a01b038281166004830152600019602483015283169063095ea7b390604401602060405180830381600087803b1580156200018c57600080fd5b505af1158015620001a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c7919062000277565b5060601b6001600160601b03191660805250620002b99350505050565b60008060008060008060c08789031215620001fd578182fd5b86516200020a81620002a0565b60208801519096506200021d81620002a0565b60408801519095506200023081620002a0565b60608801519094506200024381620002a0565b60808801519093506200025681620002a0565b60a08801519092506200026981620002a0565b809150509295509295509295565b60006020828403121562000289578081fd5b8151801515811462000299578182fd5b9392505050565b6001600160a01b0381168114620002b657600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c612433620003a66000396000818161022c015261174801526000818161031b015281816109d60152610a480152600081816102a9015281816111f3015261136b01526000818160f10152818161034f0152818161059e0152818161062a01528181610780015281816108c2015281816109a101528181610b5e01528181610c00015281816110d4015281816111600152818161141201526114b401526000818161026001528181610865015281816109170152611c370152600061190601526124336000f3fe6080604052600436106100e15760003560e01c806374a1b0b01161007f5780639bf1401c116100595780639bf1401c14610309578063ad5c46481461033d578063c535a29914610371578063f2fde38b1461038457600080fd5b806374a1b0b014610297578063839006f2146102cb5780638da5cb5b146102eb57600080fd5b80635c975abb116100bb5780635c975abb146101f05780635ee50f881461021a5780636d13582c1461024e578063715018a61461028257600080fd5b806302329a291461016a57806336fa8b651461018a57806353fe4a8e146101dd57600080fd5b3661016557336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101635760405162461bcd60e51b815260206004820152600960248201527f4f6e6c792057455448000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b005b600080fd5b34801561017657600080fd5b506101636101853660046121cc565b6103a4565b34801561019657600080fd5b506101c06101a5366004612204565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101636101eb36600461227e565b610411565b3480156101fc57600080fd5b5060025461020a9060ff1681565b60405190151581526020016101d4565b34801561022657600080fd5b506101c07f000000000000000000000000000000000000000000000000000000000000000081565b34801561025a57600080fd5b506101c07f000000000000000000000000000000000000000000000000000000000000000081565b34801561028e57600080fd5b50610163610d13565b3480156102a357600080fd5b506101c07f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d757600080fd5b506101636102e6366004612194565b610dc4565b3480156102f757600080fd5b506000546001600160a01b03166101c0565b34801561031557600080fd5b506101c07f000000000000000000000000000000000000000000000000000000000000000081565b34801561034957600080fd5b506101c07f000000000000000000000000000000000000000000000000000000000000000081565b61016361037f366004612234565b610f59565b34801561039057600080fd5b5061016361039f366004612194565b6115bf565b6000546001600160a01b031633146103fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015a565b6002805460ff1916911515919091179055565b600260015414156104645760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161015a565b600260018190555460ff16158061048557506000546001600160a01b031633145b6104c15760405162461bcd60e51b815260206004820152600d60248201526c16985c081a5cc81c185d5cd959609a1b604482015260640161015a565b600034116105115760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642076616c75652070726f766964656400000000000000000000604482015260640161015a565b8034116105865760405162461bcd60e51b815260206004820152602360248201527f496e73756666696369656e74207661756c742073656e7420666f72207061697260448201527f696e670000000000000000000000000000000000000000000000000000000000606482015260840161015a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156105e857600080fd5b505afa1580156105fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610620919061221c565b9050341561069d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561068357600080fd5b505af1158015610697573d6000803e3d6000fd5b50505050505b60006106a8886116fd565b90506001600160a01b0381166107005760405162461bcd60e51b815260206004820152601660248201527f496e76616c6964207661756c742070726f766964656400000000000000000000604482015260640161015a565b600061070d828989611884565b905085811161075e5760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e7420746f6b656e7320616371756972656400000000604482015260640161015a565b6040516370a0823160e01b815230600482015260009084906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156107c257600080fd5b505afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa919061221c565b610804919061236e565b9050848110156108565760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420574554482072656d61696e696e670000000000604482015260640161015a565b61088a6001600160a01b0384167f000000000000000000000000000000000000000000000000000000000000000084611a60565b6040517fe8e337000000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015260448201849052606482018790526084820189905260a482018890523060c48301524260e483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063e8e337009061010401606060405180830381600087803b15801561095c57600080fd5b505af1158015610970573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099491906122e2565b925050915060006109c5867f0000000000000000000000000000000000000000000000000000000000000000611c22565b90506109fb6001600160a01b0382167f000000000000000000000000000000000000000000000000000000000000000084611a60565b6040517f6c9b9588000000000000000000000000000000000000000000000000000000008152600481018e9052336024820152604481018390526202a30060648201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636c9b958890608401600060405180830381600087803b158015610a8c57600080fd5b505af1158015610aa0573d6000803e3d6000fd5b5050505060008386610ab2919061236e565b90508015610b3c5760405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0388169063a9059cbb90604401602060405180830381600087803b158015610b0257600080fd5b505af1158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a91906121e8565b505b6040516370a0823160e01b815230600482015260009089906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610ba057600080fd5b505afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd8919061221c565b610be2919061236e565b90508015610cfe57604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015610c4c57600080fd5b505af1158015610c60573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d8060008114610ca6576040519150601f19603f3d011682016040523d82523d6000602084013e610cab565b606091505b5050905080610cfc5760405162461bcd60e51b815260206004820152601d60248201527f556e61626c6520746f2073656e6420756e777261707065642057455448000000604482015260640161015a565b505b50506001805550505050505050505050505050565b6000546001600160a01b03163314610d6d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b03163314610e1e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015a565b6001600160a01b038116610ec857604051600090339047908381818185875af1925050503d8060008114610e6e576040519150601f19603f3d011682016040523d82523d6000602084013e610e73565b606091505b5050905080610ec45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20756e61626c6520746f2073656e642076616c7565000000604482015260640161015a565b5050565b6040516370a0823160e01b8152306004820152610f569033906001600160a01b038416906370a082319060240160206040518083038186803b158015610f0d57600080fd5b505afa158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f45919061221c565b6001600160a01b0384169190611da0565b50565b60026001541415610fac5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161015a565b600260018190555460ff161580610fcd57506000546001600160a01b031633145b6110095760405162461bcd60e51b815260206004820152600d60248201526c16985c081a5cc81c185d5cd959609a1b604482015260640161015a565b600034116110595760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642076616c75652070726f766964656400000000000000000000604482015260640161015a565b6000611064846116fd565b90506001600160a01b0381166110bc5760405162461bcd60e51b815260206004820152601660248201527f496e76616c6964207661756c742070726f766964656400000000000000000000604482015260640161015a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561111e57600080fd5b505afa158015611132573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611156919061221c565b905034156111d3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156111b957600080fd5b505af11580156111cd573d6000803e3d6000fd5b50505050505b60006111e0838686611884565b9050826001600160a01b031663a9059cbb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663034fc83c896040518263ffffffff1660e01b815260040161123f91815260200190565b60206040518083038186803b15801561125757600080fd5b505afa15801561126b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128f91906121b0565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b1580156112ef57600080fd5b505af1158015611303573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132791906121e8565b506040517f2699f55a0000000000000000000000000000000000000000000000000000000081526004810187905260248101829052336044820152600260648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632699f55a90608401602060405180830381600087803b1580156113b757600080fd5b505af11580156113cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ef919061221c565b506040516370a0823160e01b815230600482015260009083906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561145457600080fd5b505afa158015611468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148c919061221c565b611496919061236e565b905080156115b257604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561150057600080fd5b505af1158015611514573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d806000811461155a576040519150601f19603f3d011682016040523d82523d6000602084013e61155f565b606091505b50509050806115b05760405162461bcd60e51b815260206004820152601d60248201527f556e61626c6520746f2073656e6420756e777261707065642057455448000000604482015260640161015a565b505b5050600180555050505050565b6000546001600160a01b031633146116195760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015a565b6001600160a01b0381166116955760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161015a565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000818152600360205260408120546001600160a01b0316611804576040517f81a36fb6000000000000000000000000000000000000000000000000000000008152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906381a36fb69060240160206040518083038186803b15801561179257600080fd5b505afa1580156117a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ca91906121b0565b6000838152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555b6000828152600360205260409020546001600160a01b03166118685760405162461bcd60e51b815260206004820152601460248201527f5661756c7420646f6573206e6f74206578697374000000000000000000000000604482015260640161015a565b506000908152600360205260409020546001600160a01b031690565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a082319060240160206040518083038186803b1580156118c857600080fd5b505afa1580156118dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611900919061221c565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316858560405161193e92919061230f565b6000604051808303816000865af19150503d806000811461197b576040519150601f19603f3d011682016040523d82523d6000602084013e611980565b606091505b50509050806119d15760405162461bcd60e51b815260206004820152601060248201527f535741505f43414c4c5f4641494c454400000000000000000000000000000000604482015260640161015a565b6040516370a0823160e01b815230600482015282906001600160a01b038816906370a082319060240160206040518083038186803b158015611a1257600080fd5b505afa158015611a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4a919061221c565b611a54919061236e565b925050505b9392505050565b801580611b0257506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611ac857600080fd5b505afa158015611adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b00919061221c565b155b611b745760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161015a565b6040516001600160a01b038316602482015260448101829052611c1d9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611dd0565b505050565b6000806000611c318585611eb5565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8e57600080fd5b505afa158015611ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc691906121b0565b6040516bffffffffffffffffffffffff19606085811b8216602084015284901b16603482015260480160405160208183030381529060405280519060200120604051602001611d7f9291907fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6bffffffffffffffffffffffff1916600183015260158201527fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303603582015260550190565b60408051601f19818403018152919052805160209091012095945050505050565b6040516001600160a01b038316602482015260448101829052611c1d90849063a9059cbb60e01b90606401611bb9565b6000611e25826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611fc59092919063ffffffff16565b805190915015611c1d5780806020019051810190611e4391906121e8565b611c1d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161015a565b600080826001600160a01b0316846001600160a01b03161415611f405760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f4553534553000000000000000000000000000000000000000000000000000000606482015260840161015a565b826001600160a01b0316846001600160a01b031610611f60578284611f63565b83835b90925090506001600160a01b038216611fbe5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015260640161015a565b9250929050565b6060611fd48484600085611fdc565b949350505050565b6060824710156120545760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161015a565b843b6120a25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161015a565b600080866001600160a01b031685876040516120be919061231f565b60006040518083038185875af1925050503d80600081146120fb576040519150601f19603f3d011682016040523d82523d6000602084013e612100565b606091505b509150915061211082828661211b565b979650505050505050565b6060831561212a575081611a59565b82511561213a5782518084602001fd5b8160405162461bcd60e51b815260040161015a919061233b565b60008083601f840112612165578182fd5b50813567ffffffffffffffff81111561217c578182fd5b602083019150836020828501011115611fbe57600080fd5b6000602082840312156121a5578081fd5b8135611a59816123da565b6000602082840312156121c1578081fd5b8151611a59816123da565b6000602082840312156121dd578081fd5b8135611a59816123ef565b6000602082840312156121f9578081fd5b8151611a59816123ef565b600060208284031215612215578081fd5b5035919050565b60006020828403121561222d578081fd5b5051919050565b600080600060408486031215612248578182fd5b83359250602084013567ffffffffffffffff811115612265578283fd5b61227186828701612154565b9497909650939450505050565b60008060008060008060a08789031215612296578182fd5b86359550602087013567ffffffffffffffff8111156122b3578283fd5b6122bf89828a01612154565b979a90995096976040810135976060820135975060809091013595509350505050565b6000806000606084860312156122f6578283fd5b8351925060208401519150604084015190509250925092565b8183823760009101908152919050565b600082516123318184602087016123aa565b9190910192915050565b602081526000825180602084015261235a8160408501602087016123aa565b601f01601f19169190910160400192915050565b6000828210156123a5577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b500390565b60005b838110156123c55781810151838201526020016123ad565b838111156123d4576000848401525b50505050565b6001600160a01b0381168114610f5657600080fd5b8015158114610f5657600080fdfea2646970667358221220128ed3c0b7eb14afcfe89a194adacbcadfafcaa8bfe8e82079cd0cc11624a9ac64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c806374a1b0b01161007f5780639bf1401c116100595780639bf1401c14610309578063ad5c46481461033d578063c535a29914610371578063f2fde38b1461038457600080fd5b806374a1b0b014610297578063839006f2146102cb5780638da5cb5b146102eb57600080fd5b80635c975abb116100bb5780635c975abb146101f05780635ee50f881461021a5780636d13582c1461024e578063715018a61461028257600080fd5b806302329a291461016a57806336fa8b651461018a57806353fe4a8e146101dd57600080fd5b3661016557336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101635760405162461bcd60e51b815260206004820152600960248201527f4f6e6c792057455448000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b005b600080fd5b34801561017657600080fd5b506101636101853660046121cc565b6103a4565b34801561019657600080fd5b506101c06101a5366004612204565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101636101eb36600461227e565b610411565b3480156101fc57600080fd5b5060025461020a9060ff1681565b60405190151581526020016101d4565b34801561022657600080fd5b506101c07f000000000000000000000000000000000000000000000000000000000000000081565b34801561025a57600080fd5b506101c07f000000000000000000000000000000000000000000000000000000000000000081565b34801561028e57600080fd5b50610163610d13565b3480156102a357600080fd5b506101c07f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d757600080fd5b506101636102e6366004612194565b610dc4565b3480156102f757600080fd5b506000546001600160a01b03166101c0565b34801561031557600080fd5b506101c07f000000000000000000000000000000000000000000000000000000000000000081565b34801561034957600080fd5b506101c07f000000000000000000000000000000000000000000000000000000000000000081565b61016361037f366004612234565b610f59565b34801561039057600080fd5b5061016361039f366004612194565b6115bf565b6000546001600160a01b031633146103fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015a565b6002805460ff1916911515919091179055565b600260015414156104645760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161015a565b600260018190555460ff16158061048557506000546001600160a01b031633145b6104c15760405162461bcd60e51b815260206004820152600d60248201526c16985c081a5cc81c185d5cd959609a1b604482015260640161015a565b600034116105115760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642076616c75652070726f766964656400000000000000000000604482015260640161015a565b8034116105865760405162461bcd60e51b815260206004820152602360248201527f496e73756666696369656e74207661756c742073656e7420666f72207061697260448201527f696e670000000000000000000000000000000000000000000000000000000000606482015260840161015a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156105e857600080fd5b505afa1580156105fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610620919061221c565b9050341561069d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561068357600080fd5b505af1158015610697573d6000803e3d6000fd5b50505050505b60006106a8886116fd565b90506001600160a01b0381166107005760405162461bcd60e51b815260206004820152601660248201527f496e76616c6964207661756c742070726f766964656400000000000000000000604482015260640161015a565b600061070d828989611884565b905085811161075e5760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e7420746f6b656e7320616371756972656400000000604482015260640161015a565b6040516370a0823160e01b815230600482015260009084906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156107c257600080fd5b505afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa919061221c565b610804919061236e565b9050848110156108565760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420574554482072656d61696e696e670000000000604482015260640161015a565b61088a6001600160a01b0384167f000000000000000000000000000000000000000000000000000000000000000084611a60565b6040517fe8e337000000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015260448201849052606482018790526084820189905260a482018890523060c48301524260e483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063e8e337009061010401606060405180830381600087803b15801561095c57600080fd5b505af1158015610970573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099491906122e2565b925050915060006109c5867f0000000000000000000000000000000000000000000000000000000000000000611c22565b90506109fb6001600160a01b0382167f000000000000000000000000000000000000000000000000000000000000000084611a60565b6040517f6c9b9588000000000000000000000000000000000000000000000000000000008152600481018e9052336024820152604481018390526202a30060648201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636c9b958890608401600060405180830381600087803b158015610a8c57600080fd5b505af1158015610aa0573d6000803e3d6000fd5b5050505060008386610ab2919061236e565b90508015610b3c5760405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0388169063a9059cbb90604401602060405180830381600087803b158015610b0257600080fd5b505af1158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a91906121e8565b505b6040516370a0823160e01b815230600482015260009089906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610ba057600080fd5b505afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd8919061221c565b610be2919061236e565b90508015610cfe57604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015610c4c57600080fd5b505af1158015610c60573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d8060008114610ca6576040519150601f19603f3d011682016040523d82523d6000602084013e610cab565b606091505b5050905080610cfc5760405162461bcd60e51b815260206004820152601d60248201527f556e61626c6520746f2073656e6420756e777261707065642057455448000000604482015260640161015a565b505b50506001805550505050505050505050505050565b6000546001600160a01b03163314610d6d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b03163314610e1e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015a565b6001600160a01b038116610ec857604051600090339047908381818185875af1925050503d8060008114610e6e576040519150601f19603f3d011682016040523d82523d6000602084013e610e73565b606091505b5050905080610ec45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20756e61626c6520746f2073656e642076616c7565000000604482015260640161015a565b5050565b6040516370a0823160e01b8152306004820152610f569033906001600160a01b038416906370a082319060240160206040518083038186803b158015610f0d57600080fd5b505afa158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f45919061221c565b6001600160a01b0384169190611da0565b50565b60026001541415610fac5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161015a565b600260018190555460ff161580610fcd57506000546001600160a01b031633145b6110095760405162461bcd60e51b815260206004820152600d60248201526c16985c081a5cc81c185d5cd959609a1b604482015260640161015a565b600034116110595760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642076616c75652070726f766964656400000000000000000000604482015260640161015a565b6000611064846116fd565b90506001600160a01b0381166110bc5760405162461bcd60e51b815260206004820152601660248201527f496e76616c6964207661756c742070726f766964656400000000000000000000604482015260640161015a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561111e57600080fd5b505afa158015611132573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611156919061221c565b905034156111d3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156111b957600080fd5b505af11580156111cd573d6000803e3d6000fd5b50505050505b60006111e0838686611884565b9050826001600160a01b031663a9059cbb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663034fc83c896040518263ffffffff1660e01b815260040161123f91815260200190565b60206040518083038186803b15801561125757600080fd5b505afa15801561126b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128f91906121b0565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b1580156112ef57600080fd5b505af1158015611303573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132791906121e8565b506040517f2699f55a0000000000000000000000000000000000000000000000000000000081526004810187905260248101829052336044820152600260648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632699f55a90608401602060405180830381600087803b1580156113b757600080fd5b505af11580156113cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ef919061221c565b506040516370a0823160e01b815230600482015260009083906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561145457600080fd5b505afa158015611468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148c919061221c565b611496919061236e565b905080156115b257604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561150057600080fd5b505af1158015611514573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d806000811461155a576040519150601f19603f3d011682016040523d82523d6000602084013e61155f565b606091505b50509050806115b05760405162461bcd60e51b815260206004820152601d60248201527f556e61626c6520746f2073656e6420756e777261707065642057455448000000604482015260640161015a565b505b5050600180555050505050565b6000546001600160a01b031633146116195760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015a565b6001600160a01b0381166116955760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161015a565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000818152600360205260408120546001600160a01b0316611804576040517f81a36fb6000000000000000000000000000000000000000000000000000000008152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906381a36fb69060240160206040518083038186803b15801561179257600080fd5b505afa1580156117a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ca91906121b0565b6000838152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555b6000828152600360205260409020546001600160a01b03166118685760405162461bcd60e51b815260206004820152601460248201527f5661756c7420646f6573206e6f74206578697374000000000000000000000000604482015260640161015a565b506000908152600360205260409020546001600160a01b031690565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a082319060240160206040518083038186803b1580156118c857600080fd5b505afa1580156118dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611900919061221c565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316858560405161193e92919061230f565b6000604051808303816000865af19150503d806000811461197b576040519150601f19603f3d011682016040523d82523d6000602084013e611980565b606091505b50509050806119d15760405162461bcd60e51b815260206004820152601060248201527f535741505f43414c4c5f4641494c454400000000000000000000000000000000604482015260640161015a565b6040516370a0823160e01b815230600482015282906001600160a01b038816906370a082319060240160206040518083038186803b158015611a1257600080fd5b505afa158015611a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4a919061221c565b611a54919061236e565b925050505b9392505050565b801580611b0257506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611ac857600080fd5b505afa158015611adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b00919061221c565b155b611b745760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161015a565b6040516001600160a01b038316602482015260448101829052611c1d9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611dd0565b505050565b6000806000611c318585611eb5565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8e57600080fd5b505afa158015611ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc691906121b0565b6040516bffffffffffffffffffffffff19606085811b8216602084015284901b16603482015260480160405160208183030381529060405280519060200120604051602001611d7f9291907fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6bffffffffffffffffffffffff1916600183015260158201527fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303603582015260550190565b60408051601f19818403018152919052805160209091012095945050505050565b6040516001600160a01b038316602482015260448101829052611c1d90849063a9059cbb60e01b90606401611bb9565b6000611e25826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611fc59092919063ffffffff16565b805190915015611c1d5780806020019051810190611e4391906121e8565b611c1d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161015a565b600080826001600160a01b0316846001600160a01b03161415611f405760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f4553534553000000000000000000000000000000000000000000000000000000606482015260840161015a565b826001600160a01b0316846001600160a01b031610611f60578284611f63565b83835b90925090506001600160a01b038216611fbe5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015260640161015a565b9250929050565b6060611fd48484600085611fdc565b949350505050565b6060824710156120545760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161015a565b843b6120a25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161015a565b600080866001600160a01b031685876040516120be919061231f565b60006040518083038185875af1925050503d80600081146120fb576040519150601f19603f3d011682016040523d82523d6000602084013e612100565b606091505b509150915061211082828661211b565b979650505050505050565b6060831561212a575081611a59565b82511561213a5782518084602001fd5b8160405162461bcd60e51b815260040161015a919061233b565b60008083601f840112612165578182fd5b50813567ffffffffffffffff81111561217c578182fd5b602083019150836020828501011115611fbe57600080fd5b6000602082840312156121a5578081fd5b8135611a59816123da565b6000602082840312156121c1578081fd5b8151611a59816123da565b6000602082840312156121dd578081fd5b8135611a59816123ef565b6000602082840312156121f9578081fd5b8151611a59816123ef565b600060208284031215612215578081fd5b5035919050565b60006020828403121561222d578081fd5b5051919050565b600080600060408486031215612248578182fd5b83359250602084013567ffffffffffffffff811115612265578283fd5b61227186828701612154565b9497909650939450505050565b60008060008060008060a08789031215612296578182fd5b86359550602087013567ffffffffffffffff8111156122b3578283fd5b6122bf89828a01612154565b979a90995096976040810135976060820135975060809091013595509350505050565b6000806000606084860312156122f6578283fd5b8351925060208401519150604084015190509250925092565b8183823760009101908152919050565b600082516123318184602087016123aa565b9190910192915050565b602081526000825180602084015261235a8160408501602087016123aa565b601f01601f19169190910160400192915050565b6000828210156123a5577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b500390565b60005b838110156123c55781810151838201526020016123ad565b838111156123d4576000848401525b50505050565b6001600160a01b0381168114610f5657600080fd5b8015158114610f5657600080fdfea2646970667358221220128ed3c0b7eb14afcfe89a194adacbcadfafcaa8bfe8e82079cd0cc11624a9ac64736f6c63430008040033",
  "devdoc": {
    "author": "Twade",
    "kind": "dev",
    "methods": {
      "buyAndStakeInventory(uint256,bytes)": {
        "params": {
          "swapCallData": "The `data` field from the 0x API response",
          "vaultId": "The ID of the NFTX vault"
        }
      },
      "buyAndStakeLiquidity(uint256,bytes,uint256,uint256,uint256)": {
        "params": {
          "minTokenIn": "The minimum amount of token to LP",
          "minWethIn": "The minimum amount of ETH (WETH) to LP",
          "swapCallData": "The `data` field from the 0x API response",
          "vaultId": "The ID of the NFTX vault",
          "wethIn": "The amount of ETH (WETH) supplied"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause(bool)": {
        "params": {
          "_paused": "New pause state"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescue(address)": {
        "params": {
          "token": "The address of the token to be rescued"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "WETH()": {
        "notice": "An interface for the WETH contract"
      },
      "buyAndStakeInventory(uint256,bytes)": {
        "notice": "Allows the user to buy and stake tokens against an Inventory. This will handle the purchase of the vault tokens against 0x and then generate the xToken against the vault and timelock them. "
      },
      "buyAndStakeLiquidity(uint256,bytes,uint256,uint256,uint256)": {
        "notice": "Allows the user to buy and stake tokens against a Liquidity pool. This will handle the purchase of the vault tokens against 0x, the liquidity pool supplying via sushi and then the timelocking against our LP token. "
      },
      "constructor": {
        "notice": "Initialises our zap and sets our internal addresses that will be referenced in our contract. This allows for varied addresses based on the network."
      },
      "inventoryStaking()": {
        "notice": "An interface for the NFTX Vault Factory contract"
      },
      "nftxFactory()": {
        "notice": "An interface for the NFTX Vault Factory contract"
      },
      "nftxVaultAddresses(uint256)": {
        "notice": "A mapping of NFTX Vault IDs to their address corresponding vault contract address"
      },
      "pause(bool)": {
        "notice": "Allows our zap to be paused to prevent any processing. "
      },
      "paused()": {
        "notice": "Allows zap to be paused"
      },
      "rescue(address)": {
        "notice": "Allows our owner to withdraw and tokens in the contract. "
      },
      "sushiRouter()": {
        "notice": "Holds the mapping of our sushi router"
      }
    },
    "notice": "Allows users to buy and stake tokens into either an inventory or liquidity pool, handling the steps between buying and staking across 0x and sushi. ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4285,
        "contract": "contracts/solidity/NFTXYieldStakingZap.sol:NFTXYieldStakingZap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4397,
        "contract": "contracts/solidity/NFTXYieldStakingZap.sol:NFTXYieldStakingZap",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1452,
        "contract": "contracts/solidity/NFTXYieldStakingZap.sol:NFTXYieldStakingZap",
        "label": "paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1479,
        "contract": "contracts/solidity/NFTXYieldStakingZap.sol:NFTXYieldStakingZap",
        "label": "nftxVaultAddresses",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}