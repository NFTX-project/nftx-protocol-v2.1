{
  "language": "Solidity",
  "sources": {
    "contracts/solidity/eligibility/NFTXEligibility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Initializable.sol\";\nimport \"../interface/INFTXEligibility.sol\";\n\n// This is a contract meant to be inherited and overriden to implement eligibility modules. \nabstract contract NFTXEligibility is INFTXEligibility, Initializable {\n  function name() public pure override virtual returns (string memory);\n  function finalized() public view override virtual returns (bool);\n  function targetAsset() public pure override virtual returns (address);\n  \n  function __NFTXEligibility_init_bytes(bytes memory initData) public override virtual;\n\n  function checkIsEligible(uint256 tokenId) external view override virtual returns (bool) {\n      return _checkIfEligible(tokenId);\n  }\n\n  function checkEligible(uint256[] calldata tokenIds) external override virtual view returns (bool[] memory) {\n      uint256 length = tokenIds.length;\n      bool[] memory eligibile = new bool[](length);\n      for (uint256 i; i < length; i++) {\n          eligibile[i] = _checkIfEligible(tokenIds[i]);\n      }\n      return eligibile;\n  }\n\n  function checkAllEligible(uint256[] calldata tokenIds) external override virtual view returns (bool) {\n      uint256 length = tokenIds.length;\n      for (uint256 i; i < length; i++) {\n          // If any are not eligible, end the loop and return false.\n          if (!_checkIfEligible(tokenIds[i])) {\n              return false;\n          }\n      }\n      return true;\n  }\n\n  // Checks if all provided NFTs are NOT eligible. This is needed for mint requesting where all NFTs \n  // provided must be ineligible.\n  function checkAllIneligible(uint256[] calldata tokenIds) external override virtual view returns (bool) {\n      uint256 length = tokenIds.length;\n      for (uint256 i; i < length; i++) {\n          // If any are eligible, end the loop and return false.\n          if (_checkIfEligible(tokenIds[i])) {\n              return false;\n          }\n      }\n      return true;\n  }\n\n  function beforeMintHook(uint256[] calldata tokenIds) external override virtual {}\n  function afterMintHook(uint256[] calldata tokenIds) external override virtual {}\n  function beforeRedeemHook(uint256[] calldata tokenIds) external override virtual {}\n  function afterRedeemHook(uint256[] calldata tokenIds) external override virtual {}\n\n  // Override this to implement your module!\n  function _checkIfEligible(uint256 _tokenId) internal view virtual returns (bool);\n}\n"
    },
    "contracts/solidity/eligibility/NFTXListEligibility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./UniqueEligibility.sol\";\nimport \"./NFTXEligibility.sol\";\n\ncontract NFTXListEligibility is NFTXEligibility, UniqueEligibility {\n    function name() public pure override virtual returns (string memory) {    \n        return \"List\";\n    }\n\n    function finalized() public view override virtual returns (bool) {    \n        return true;\n    }\n\n    function targetAsset() public pure override virtual returns (address) {\n        return address(0);\n    }\n\n    struct Config {\n        uint256[] tokenIds;\n    }\n\n    event NFTXEligibilityInit(uint256[] tokenIds);\n\n    function __NFTXEligibility_init_bytes(\n        bytes memory _configData\n    ) public override virtual initializer {\n        (uint256[] memory _ids) = abi.decode(_configData, (uint256[]));\n        __NFTXEligibility_init(_ids);\n    }\n\n    function __NFTXEligibility_init(\n        uint256[] memory tokenIds\n    ) public initializer {\n        _setUniqueEligibilities(tokenIds, true);\n        emit NFTXEligibilityInit(tokenIds);\n    }\n\n    function _checkIfEligible(\n        uint256 _tokenId\n    ) internal view override virtual returns (bool) {\n        return isUniqueEligible(_tokenId);\n    }\n}\n"
    },
    "contracts/solidity/eligibility/UniqueEligibility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract UniqueEligibility {\n    mapping(uint256 => uint256) eligibleBitMap;\n\n    event UniqueEligibilitiesSet(uint256[] tokenIds, bool isEligible);\n\n    function isUniqueEligible(uint256 tokenId)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        uint256 wordIndex = tokenId / 256;\n        uint256 bitMap = eligibleBitMap[wordIndex];\n        return _getBit(bitMap, tokenId);\n    }\n\n    function _setUniqueEligibilities(\n        uint256[] memory tokenIds,\n        bool _isEligible\n    ) internal virtual {\n        uint256 cachedWord = eligibleBitMap[0];\n        uint256 cachedIndex = 0;\n        for (uint256 i; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            uint256 eligibilityWordIndex = tokenId / 256;\n            if (eligibilityWordIndex != cachedIndex) {\n                // Save the cached word.\n                eligibleBitMap[cachedIndex] = cachedWord;\n                // Cache the new one.\n                cachedWord = eligibleBitMap[eligibilityWordIndex];\n                cachedIndex = eligibilityWordIndex;\n            }\n            // Modify the cached word.\n            cachedWord = _setBit(cachedWord, tokenId, _isEligible);\n        }\n        // Assign the last word since the loop is done.\n        eligibleBitMap[cachedIndex] = cachedWord;\n        emit UniqueEligibilitiesSet(tokenIds, _isEligible);\n    }\n\n    function _setBit(uint256 bitMap, uint256 index, bool eligible)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 claimedBitIndex = index % 256;\n        if (eligible) {\n            return bitMap | (1 << claimedBitIndex);\n        } else {\n            return bitMap & ~(1 << claimedBitIndex);\n        }\n    }\n\n    function _getBit(uint256 bitMap, uint256 index)\n        internal\n        pure\n        returns (bool)\n    {\n        uint256 claimedBitIndex = index % 256;\n        return uint8((bitMap >> claimedBitIndex) & 1) == 1;\n    }\n}\n"
    },
    "contracts/solidity/interface/INFTXEligibility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface INFTXEligibility {\n    // Read functions.\n    function name() external pure returns (string memory);\n\n    function finalized() external view returns (bool);\n\n    function targetAsset() external pure returns (address);\n\n    function checkAllEligible(uint256[] calldata tokenIds)\n        external\n        view\n        returns (bool);\n\n    function checkEligible(uint256[] calldata tokenIds)\n        external\n        view\n        returns (bool[] memory);\n\n    function checkAllIneligible(uint256[] calldata tokenIds)\n        external\n        view\n        returns (bool);\n\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\n\n    // Write functions.\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\n\n    function beforeMintHook(uint256[] calldata tokenIds) external;\n\n    function afterMintHook(uint256[] calldata tokenIds) external;\n\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\n\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\n}\n"
    },
    "contracts/solidity/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(\n            _initializing || !_initialized,\n            \"Initializable: contract is already initialized\"\n        );\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}