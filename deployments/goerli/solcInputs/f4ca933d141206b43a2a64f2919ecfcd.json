{
  "language": "Solidity",
  "sources": {
    "contracts/solidity/interface/INFTXEligibility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface INFTXEligibility {\n    // Read functions.\n    function name() external pure returns (string memory);\n\n    function finalized() external view returns (bool);\n\n    function targetAsset() external pure returns (address);\n\n    function checkAllEligible(uint256[] calldata tokenIds)\n        external\n        view\n        returns (bool);\n\n    function checkEligible(uint256[] calldata tokenIds)\n        external\n        view\n        returns (bool[] memory);\n\n    function checkAllIneligible(uint256[] calldata tokenIds)\n        external\n        view\n        returns (bool);\n\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\n\n    // Write functions.\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\n\n    function beforeMintHook(uint256[] calldata tokenIds) external;\n\n    function afterMintHook(uint256[] calldata tokenIds) external;\n\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\n\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\n}\n"
    },
    "contracts/solidity/interface/INFTXInventoryStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./INFTXVaultFactory.sol\";\n\ninterface INFTXInventoryStaking {\n    function nftxVaultFactory() external view returns (INFTXVaultFactory);\n\n    function vaultXToken(uint256 vaultId) external view returns (address);\n\n    function xTokenAddr(address baseToken) external view returns (address);\n\n    function xTokenShareValue(uint256 vaultId) external view returns (uint256);\n\n    function __NFTXInventoryStaking_init(address nftxFactory) external;\n\n    function deployXTokenForVault(uint256 vaultId) external;\n\n    function receiveRewards(uint256 vaultId, uint256 amount)\n        external\n        returns (bool);\n\n    function timelockMintFor(\n        uint256 vaultId,\n        uint256 amount,\n        address to,\n        uint256 timelockLength\n    ) external returns (uint256);\n\n    function deposit(uint256 vaultId, uint256 _amount) external;\n\n    function withdraw(uint256 vaultId, uint256 _share) external;\n}\n"
    },
    "contracts/solidity/interface/INFTXLPStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface INFTXLPStaking {\n    function nftxVaultFactory() external view returns (address);\n\n    function rewardDistTokenImpl() external view returns (address);\n\n    function stakingTokenProvider() external view returns (address);\n\n    function vaultToken(address _stakingToken) external view returns (address);\n\n    function stakingToken(address _vaultToken) external view returns (address);\n\n    function rewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address);\n\n    function newRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address);\n\n    function oldRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address);\n\n    function unusedRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address);\n\n    function rewardDistributionTokenAddr(\n        address stakedToken,\n        address rewardToken\n    ) external view returns (address);\n\n    // Write functions.\n    function __NFTXLPStaking__init(address _stakingTokenProvider) external;\n\n    function setNFTXVaultFactory(address newFactory) external;\n\n    function setStakingTokenProvider(address newProvider) external;\n\n    function addPoolForVault(uint256 vaultId) external;\n\n    function updatePoolForVault(uint256 vaultId) external;\n\n    function updatePoolForVaults(uint256[] calldata vaultId) external;\n\n    function receiveRewards(uint256 vaultId, uint256 amount)\n        external\n        returns (bool);\n\n    function deposit(uint256 vaultId, uint256 amount) external;\n\n    function timelockDepositFor(\n        uint256 vaultId,\n        address account,\n        uint256 amount,\n        uint256 timelockLength\n    ) external;\n\n    function exit(uint256 vaultId, uint256 amount) external;\n\n    function rescue(uint256 vaultId) external;\n\n    function withdraw(uint256 vaultId, uint256 amount) external;\n\n    function claimRewards(uint256 vaultId) external;\n}\n"
    },
    "contracts/solidity/interface/INFTXVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/IERC20Upgradeable.sol\";\nimport \"./INFTXVaultFactory.sol\";\nimport \"./INFTXEligibility.sol\";\n\ninterface INFTXVault is IERC20Upgradeable {\n    function manager() external view returns (address);\n\n    function assetAddress() external view returns (address);\n\n    function vaultFactory() external view returns (INFTXVaultFactory);\n\n    function eligibilityStorage() external view returns (INFTXEligibility);\n\n    function is1155() external view returns (bool);\n\n    function allowAllItems() external view returns (bool);\n\n    function enableMint() external view returns (bool);\n\n    function enableRandomRedeem() external view returns (bool);\n\n    function enableTargetRedeem() external view returns (bool);\n\n    function enableRandomSwap() external view returns (bool);\n\n    function enableTargetSwap() external view returns (bool);\n\n    function vaultId() external view returns (uint256);\n\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\n\n    function allHoldings() external view returns (uint256[] memory);\n\n    function totalHoldings() external view returns (uint256);\n\n    function mintFee() external view returns (uint256);\n\n    function randomRedeemFee() external view returns (uint256);\n\n    function targetRedeemFee() external view returns (uint256);\n\n    function randomSwapFee() external view returns (uint256);\n\n    function targetSwapFee() external view returns (uint256);\n\n    function vaultFees()\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    event VaultInit(\n        uint256 indexed vaultId,\n        address assetAddress,\n        bool is1155,\n        bool allowAllItems\n    );\n\n    event ManagerSet(address manager);\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\n    // event CustomEligibilityDeployed(address eligibilityAddr);\n\n    event EnableMintUpdated(bool enabled);\n    event EnableRandomRedeemUpdated(bool enabled);\n    event EnableTargetRedeemUpdated(bool enabled);\n    event EnableRandomSwapUpdated(bool enabled);\n    event EnableTargetSwapUpdated(bool enabled);\n\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\n    event Swapped(\n        uint256[] nftIds,\n        uint256[] amounts,\n        uint256[] specificIds,\n        uint256[] redeemedIds,\n        address to\n    );\n\n    function __NFTXVault_init(\n        string calldata _name,\n        string calldata _symbol,\n        address _assetAddress,\n        bool _is1155,\n        bool _allowAllItems\n    ) external;\n\n    function finalizeVault() external;\n\n    function setVaultMetadata(string memory name_, string memory symbol_)\n        external;\n\n    function setVaultFeatures(\n        bool _enableMint,\n        bool _enableRandomRedeem,\n        bool _enableTargetRedeem,\n        bool _enableRandomSwap,\n        bool _enableTargetSwap\n    ) external;\n\n    function setFees(\n        uint256 _mintFee,\n        uint256 _randomRedeemFee,\n        uint256 _targetRedeemFee,\n        uint256 _randomSwapFee,\n        uint256 _targetSwapFee\n    ) external;\n\n    function disableVaultFees() external;\n\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\n    // a similar interface.\n    function deployEligibilityStorage(\n        uint256 moduleIndex,\n        bytes calldata initData\n    ) external returns (address);\n\n    // The manager has control over options like fees and features\n    function setManager(address _manager) external;\n\n    function mint(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\n    ) external returns (uint256);\n\n    function mintTo(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\n        address to\n    ) external returns (uint256);\n\n    function redeem(uint256 amount, uint256[] calldata specificIds)\n        external\n        returns (uint256[] calldata);\n\n    function redeemTo(\n        uint256 amount,\n        uint256[] calldata specificIds,\n        address to\n    ) external returns (uint256[] calldata);\n\n    function swap(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\n        uint256[] calldata specificIds\n    ) external returns (uint256[] calldata);\n\n    function swapTo(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\n        uint256[] calldata specificIds,\n        address to\n    ) external returns (uint256[] calldata);\n\n    function allValidNFTs(uint256[] calldata tokenIds)\n        external\n        view\n        returns (bool);\n}\n"
    },
    "contracts/solidity/interface/INFTXVaultFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/IBeacon.sol\";\n\ninterface INFTXVaultFactory is IBeacon {\n    // Read functions.\n    function numVaults() external view returns (uint256);\n\n    function zapContract() external view returns (address);\n\n    function zapContracts(address addr) external view returns (bool);\n\n    function feeDistributor() external view returns (address);\n\n    function eligibilityManager() external view returns (address);\n\n    function vault(uint256 vaultId) external view returns (address);\n\n    function allVaults() external view returns (address[] memory);\n\n    function vaultsForAsset(address asset)\n        external\n        view\n        returns (address[] memory);\n\n    function isLocked(uint256 id) external view returns (bool);\n\n    function excludedFromFees(address addr) external view returns (bool);\n\n    function factoryMintFee() external view returns (uint64);\n\n    function factoryRandomRedeemFee() external view returns (uint64);\n\n    function factoryTargetRedeemFee() external view returns (uint64);\n\n    function factoryRandomSwapFee() external view returns (uint64);\n\n    function factoryTargetSwapFee() external view returns (uint64);\n\n    function vaultFees(uint256 vaultId)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    event NewFeeDistributor(address oldDistributor, address newDistributor);\n    event NewZapContract(address oldZap, address newZap);\n    event UpdatedZapContract(address zap, bool excluded);\n    event FeeExclusion(address feeExcluded, bool excluded);\n    event NewEligibilityManager(address oldEligManager, address newEligManager);\n    event NewVault(\n        uint256 indexed vaultId,\n        address vaultAddress,\n        address assetAddress\n    );\n    event UpdateVaultFees(\n        uint256 vaultId,\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    );\n    event DisableVaultFees(uint256 vaultId);\n    event UpdateFactoryFees(\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    );\n\n    // Write functions.\n    function __NFTXVaultFactory_init(\n        address _vaultImpl,\n        address _feeDistributor\n    ) external;\n\n    function createVault(\n        string calldata name,\n        string calldata symbol,\n        address _assetAddress,\n        bool is1155,\n        bool allowAllItems\n    ) external returns (uint256);\n\n    function setFeeDistributor(address _feeDistributor) external;\n\n    function setEligibilityManager(address _eligibilityManager) external;\n\n    function setZapContract(address _zapContract, bool _excluded) external;\n\n    function setFeeExclusion(address _excludedAddr, bool excluded) external;\n\n    function setFactoryFees(\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    ) external;\n\n    function setVaultFees(\n        uint256 vaultId,\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    ) external;\n\n    function disableVaultFees(uint256 vaultId) external;\n}\n"
    },
    "contracts/solidity/interface/IRewardDistributionToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/IERC20Upgradeable.sol\";\n\ninterface IRewardDistributionToken is IERC20Upgradeable {\n    function distributeRewards(uint256 amount) external;\n\n    function __RewardDistributionToken_init(\n        IERC20Upgradeable _target,\n        string memory _name,\n        string memory _symbol\n    ) external;\n\n    function mint(\n        address account,\n        address to,\n        uint256 amount\n    ) external;\n\n    function burnFrom(address account, uint256 amount) external;\n\n    function withdrawReward(address user) external;\n\n    function dividendOf(address _owner) external view returns (uint256);\n\n    function withdrawnRewardOf(address _owner) external view returns (uint256);\n\n    function accumulativeRewardOf(address _owner)\n        external\n        view\n        returns (uint256);\n}\n"
    },
    "contracts/solidity/interface/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/solidity/NFTXLPStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/PausableUpgradeable.sol\";\nimport \"./util/SafeERC20Upgradeable.sol\";\nimport \"./proxy/ClonesUpgradeable.sol\";\nimport \"./token/TimelockRewardDistributionTokenImpl.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/INFTXVault.sol\";\nimport \"./interface/IRewardDistributionToken.sol\";\nimport \"./StakingTokenProvider.sol\";\n\n// Author: 0xKiwi.\n\n// Pausing codes for LP staking are:\n// 10: Deposit\n\ncontract NFTXLPStaking is PausableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    INFTXVaultFactory public nftxVaultFactory;\n    IRewardDistributionToken public rewardDistTokenImpl;\n    StakingTokenProvider public stakingTokenProvider;\n\n    event PoolCreated(uint256 vaultId, address pool);\n    event PoolUpdated(uint256 vaultId, address pool);\n    event FeesReceived(uint256 vaultId, uint256 amount);\n\n    event Deposit(uint256 vaultId, address stakingToken, uint256 amount, address account, uint256 timelockLength);\n    event Withdraw(uint256 vaultId, address stakingToken, uint256 amount, address account);\n\n    struct StakingPool {\n        address stakingToken;\n        address rewardToken;\n    }\n    mapping(uint256 => StakingPool) public vaultStakingInfo;\n\n    TimelockRewardDistributionTokenImpl public newTimelockRewardDistTokenImpl;\n\n    function __NFTXLPStaking__init(address _stakingTokenProvider)\n        external\n        initializer\n    {\n        __Ownable_init();\n        require(_stakingTokenProvider != address(0), \"Provider != address(0)\");\n        require(\n            address(newTimelockRewardDistTokenImpl) == address(0),\n            \"Already assigned\"\n        );\n        stakingTokenProvider = StakingTokenProvider(_stakingTokenProvider);\n        newTimelockRewardDistTokenImpl = new TimelockRewardDistributionTokenImpl();\n        newTimelockRewardDistTokenImpl.__TimelockRewardDistributionToken_init(\n            IERC20Upgradeable(address(0)),\n            \"\",\n            \"\"\n        );\n    }\n\n    modifier onlyAdmin() {\n        require(\n            msg.sender == owner() ||\n                msg.sender == nftxVaultFactory.feeDistributor(),\n            \"LPStaking: Not authorized\"\n        );\n        _;\n    }\n\n    function setNFTXVaultFactory(address newFactory) external onlyOwner {\n        require(\n            address(nftxVaultFactory) == address(0),\n            \"nftxVaultFactory is immutable\"\n        );\n        nftxVaultFactory = INFTXVaultFactory(newFactory);\n    }\n\n    function setStakingTokenProvider(address newProvider) external onlyOwner {\n        require(newProvider != address(0));\n        stakingTokenProvider = StakingTokenProvider(newProvider);\n    }\n\n    function addPoolForVault(uint256 vaultId) external onlyAdmin {\n        require(\n            address(nftxVaultFactory) != address(0),\n            \"LPStaking: Factory not set\"\n        );\n        require(\n            vaultStakingInfo[vaultId].stakingToken == address(0),\n            \"LPStaking: Pool already exists\"\n        );\n        address _rewardToken = nftxVaultFactory.vault(vaultId);\n        address _stakingToken = stakingTokenProvider.stakingTokenForVaultToken(\n            _rewardToken\n        );\n        StakingPool memory pool = StakingPool(_stakingToken, _rewardToken);\n        vaultStakingInfo[vaultId] = pool;\n        address newRewardDistToken = _deployDividendToken(pool);\n        emit PoolCreated(vaultId, newRewardDistToken);\n    }\n\n    function updatePoolForVaults(uint256[] calldata vaultIds) external {\n        uint256 length = vaultIds.length;\n        for (uint256 i; i < length; ++i) {\n            updatePoolForVault(vaultIds[i]);\n        }\n    }\n\n    // In case the provider changes, this lets the pool be updated. Anyone can call it.\n    function updatePoolForVault(uint256 vaultId) public {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        // Not letting people use this function to create new pools.\n        require(\n            pool.stakingToken != address(0),\n            \"LPStaking: Pool doesn't exist\"\n        );\n        address _stakingToken = stakingTokenProvider.stakingTokenForVaultToken(\n            pool.rewardToken\n        );\n        StakingPool memory newPool = StakingPool(\n            _stakingToken,\n            pool.rewardToken\n        );\n        vaultStakingInfo[vaultId] = newPool;\n\n        // If the pool is already deployed, ignore the update.\n        address addr = address(_rewardDistributionTokenAddr(newPool));\n        if (isContract(addr)) {\n            return;\n        }\n        address newRewardDistToken = _deployDividendToken(newPool);\n        emit PoolUpdated(vaultId, newRewardDistToken);\n    }\n\n    function receiveRewards(uint256 vaultId, uint256 amount)\n        external\n        onlyAdmin\n        returns (bool)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        if (pool.stakingToken == address(0)) {\n            // In case the pair is updated, but not yet\n            return false;\n        }\n\n        TimelockRewardDistributionTokenImpl rewardDistToken = _rewardDistributionTokenAddr(\n                pool\n            );\n        // Don't distribute rewards unless there are people to distribute to.\n        // Also added here if the distribution token is not deployed, just forfeit rewards for now.\n        if (\n            !isContract(address(rewardDistToken)) ||\n            rewardDistToken.totalSupply() == 0\n        ) {\n            return false;\n        }\n        // We \"pull\" to the dividend tokens so the vault only needs to approve this contract.\n        IERC20Upgradeable(pool.rewardToken).safeTransferFrom(\n            msg.sender,\n            address(rewardDistToken),\n            amount\n        );\n        rewardDistToken.distributeRewards(amount);\n        emit FeesReceived(vaultId, amount);\n        return true;\n    }\n\n    function deposit(uint256 vaultId, uint256 amount) external {\n        onlyOwnerIfPaused(10);\n        // Check the pool in case its been updated.\n        updatePoolForVault(vaultId);\n\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        require(pool.stakingToken != address(0), \"LPStaking: Nonexistent pool\");\n        IERC20Upgradeable(pool.stakingToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n        TimelockRewardDistributionTokenImpl xSLPToken = _rewardDistributionTokenAddr(\n                pool\n            );\n\n        // If the user has an existing timelock, check if it is in the future.\n        uint256 currentTimelock = xSLPToken.timelockUntil(msg.sender);\n        if (currentTimelock > block.timestamp) {\n            // Maintain the same timelock if they already have one.\n            // We do this instead of patching in the token because\n            // the xSLP contracts as currently deployed are not upgradeable.\n            uint256 timestamp = currentTimelock - block.timestamp;\n            xSLPToken.timelockMint(\n                msg.sender,\n                amount,\n                timestamp\n            );\n            emit Deposit(vaultId, pool.stakingToken, amount, msg.sender, timestamp);\n        } else {\n            // Timelock for 2 seconds if they don't already have a timelock to prevent flash loans.\n            xSLPToken.timelockMint(msg.sender, amount, 2);\n            emit Deposit(vaultId, pool.stakingToken, amount, msg.sender, 2);\n        }\n    }\n\n    function timelockDepositFor(\n        uint256 vaultId,\n        address account,\n        uint256 amount,\n        uint256 timelockLength\n    ) external {\n        require(timelockLength < 2592000, \"Timelock too long\");\n        require(nftxVaultFactory.excludedFromFees(msg.sender), \"Not zap\");\n        onlyOwnerIfPaused(10);\n        // Check the pool in case its been updated.\n        updatePoolForVault(vaultId);\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        require(pool.stakingToken != address(0), \"LPStaking: Nonexistent pool\");\n        IERC20Upgradeable(pool.stakingToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n        _rewardDistributionTokenAddr(pool).timelockMint(\n            account,\n            amount,\n            timelockLength\n        );\n        emit Deposit(vaultId, pool.stakingToken, amount, account, timelockLength);\n    }\n\n    function exit(uint256 vaultId) external {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        _claimRewards(pool, msg.sender);\n        _withdraw(vaultId, pool, balanceOf(vaultId, msg.sender), msg.sender);\n    }\n\n    function emergencyExitAndClaim(address _stakingToken, address _rewardToken)\n        external\n    {\n        StakingPool memory pool = StakingPool(_stakingToken, _rewardToken);\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\n            pool\n        );\n        require(isContract(address(dist)), \"Not a pool\");\n        _claimRewards(pool, msg.sender);\n        _withdraw(INFTXVault(_rewardToken).vaultId(), pool, dist.balanceOf(msg.sender), msg.sender);\n    }\n\n    function emergencyExit(address _stakingToken, address _rewardToken)\n        external\n    {\n        StakingPool memory pool = StakingPool(_stakingToken, _rewardToken);\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\n            pool\n        );\n        require(isContract(address(dist)), \"Not a pool\");\n        _withdraw(INFTXVault(_rewardToken).vaultId(), pool, dist.balanceOf(msg.sender), msg.sender);\n    }\n\n    function emergencyMigrate(uint256 vaultId) external {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        IRewardDistributionToken unusedDist = _unusedRewardDistributionTokenAddr(\n                pool\n            );\n        IRewardDistributionToken oldDist = _oldRewardDistributionTokenAddr(\n            pool\n        );\n\n        uint256 unusedDistBal;\n        if (isContract(address(unusedDist))) {\n            unusedDistBal = unusedDist.balanceOf(msg.sender);\n            if (unusedDistBal > 0) {\n                unusedDist.burnFrom(msg.sender, unusedDistBal);\n            }\n        }\n        uint256 oldDistBal;\n        if (isContract(address(oldDist))) {\n            oldDistBal = oldDist.balanceOf(msg.sender);\n            if (oldDistBal > 0) {\n                oldDist.withdrawReward(msg.sender);\n                oldDist.burnFrom(msg.sender, oldDistBal);\n            }\n        }\n\n        TimelockRewardDistributionTokenImpl newDist = _rewardDistributionTokenAddr(\n                pool\n            );\n        if (!isContract(address(newDist))) {\n            address deployedDist = _deployDividendToken(pool);\n            require(\n                deployedDist == address(newDist),\n                \"Not deploying proper distro\"\n            );\n            emit PoolUpdated(vaultId, deployedDist);\n        }\n        require(unusedDistBal + oldDistBal > 0, \"Nothing to migrate\");\n        newDist.mint(msg.sender, unusedDistBal + oldDistBal);\n    }\n\n    function withdraw(uint256 vaultId, uint256 amount) external {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        _claimRewards(pool, msg.sender);\n        _withdraw(vaultId, pool, amount, msg.sender);\n    }\n\n    function claimRewards(uint256 vaultId) public {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        _claimRewards(pool, msg.sender);\n    }\n\n    function claimMultipleRewards(uint256[] calldata vaultIds) external {\n        uint256 length = vaultIds.length;\n        for (uint256 i; i < length; ++i) {\n            claimRewards(vaultIds[i]);\n        }\n    }\n\n    function newRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (TimelockRewardDistributionTokenImpl)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        if (pool.stakingToken == address(0)) {\n            return TimelockRewardDistributionTokenImpl(address(0));\n        }\n        return _rewardDistributionTokenAddr(pool);\n    }\n\n    function rewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (IRewardDistributionToken)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        if (pool.stakingToken == address(0)) {\n            return IRewardDistributionToken(address(0));\n        }\n        return _unusedRewardDistributionTokenAddr(pool);\n    }\n\n    function oldRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        if (pool.stakingToken == address(0)) {\n            return address(0);\n        }\n        return address(_oldRewardDistributionTokenAddr(pool));\n    }\n\n    function unusedRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        if (pool.stakingToken == address(0)) {\n            return address(0);\n        }\n        return address(_unusedRewardDistributionTokenAddr(pool));\n    }\n\n    function rewardDistributionTokenAddr(\n        address stakedToken,\n        address rewardToken\n    ) public view returns (address) {\n        StakingPool memory pool = StakingPool(stakedToken, rewardToken);\n        return address(_rewardDistributionTokenAddr(pool));\n    }\n\n    function balanceOf(uint256 vaultId, address addr)\n        public\n        view\n        returns (uint256)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\n            pool\n        );\n        require(isContract(address(dist)), \"Not a pool\");\n        return dist.balanceOf(addr);\n    }\n\n    function oldBalanceOf(uint256 vaultId, address addr)\n        public\n        view\n        returns (uint256)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        IRewardDistributionToken dist = _oldRewardDistributionTokenAddr(pool);\n        require(isContract(address(dist)), \"Not a pool\");\n        return dist.balanceOf(addr);\n    }\n\n    function unusedBalanceOf(uint256 vaultId, address addr)\n        public\n        view\n        returns (uint256)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        IRewardDistributionToken dist = _unusedRewardDistributionTokenAddr(\n            pool\n        );\n        require(isContract(address(dist)), \"Not a pool\");\n        return dist.balanceOf(addr);\n    }\n\n    function lockedUntil(uint256 vaultId, address who)\n        external\n        view\n        returns (uint256)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\n            pool\n        );\n        return dist.timelockUntil(who);\n    }\n\n    function lockedLPBalance(uint256 vaultId, address who)\n        external\n        view\n        returns (uint256)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\n            pool\n        );\n        if (block.timestamp > dist.timelockUntil(who)) {\n            return 0;\n        }\n        return dist.balanceOf(who);\n    }\n\n    function _claimRewards(StakingPool memory pool, address account) internal {\n        require(pool.stakingToken != address(0), \"LPStaking: Nonexistent pool\");\n        _rewardDistributionTokenAddr(pool).withdrawReward(account);\n    }\n\n    function _withdraw(\n        uint256 vaultId,\n        StakingPool memory pool,\n        uint256 amount,\n        address account\n    ) internal {\n        require(pool.stakingToken != address(0), \"LPStaking: Nonexistent pool\");\n        _rewardDistributionTokenAddr(pool).burnFrom(account, amount);\n        IERC20Upgradeable(pool.stakingToken).safeTransfer(account, amount);\n        emit Withdraw(vaultId, pool.stakingToken, amount, account);\n    }\n\n    function _deployDividendToken(StakingPool memory pool)\n        internal\n        returns (address)\n    {\n        // Changed to use new nonces.\n        bytes32 salt = keccak256(\n            abi.encodePacked(pool.stakingToken, pool.rewardToken, uint256(2))\n        );\n        address rewardDistToken = ClonesUpgradeable.cloneDeterministic(\n            address(newTimelockRewardDistTokenImpl),\n            salt\n        );\n        string memory name = stakingTokenProvider.nameForStakingToken(\n            pool.rewardToken\n        );\n        TimelockRewardDistributionTokenImpl(rewardDistToken)\n            .__TimelockRewardDistributionToken_init(\n                IERC20Upgradeable(pool.rewardToken),\n                name,\n                name\n            );\n        return rewardDistToken;\n    }\n\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\n    function _rewardDistributionTokenAddr(StakingPool memory pool)\n        public\n        view\n        returns (TimelockRewardDistributionTokenImpl)\n    {\n        bytes32 salt = keccak256(\n            abi.encodePacked(\n                pool.stakingToken,\n                pool.rewardToken,\n                uint256(2) /* small nonce to change tokens */\n            )\n        );\n        address tokenAddr = ClonesUpgradeable.predictDeterministicAddress(\n            address(newTimelockRewardDistTokenImpl),\n            salt\n        );\n        return TimelockRewardDistributionTokenImpl(tokenAddr);\n    }\n\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\n    function _oldRewardDistributionTokenAddr(StakingPool memory pool)\n        public\n        view\n        returns (IRewardDistributionToken)\n    {\n        bytes32 salt = keccak256(\n            abi.encodePacked(pool.stakingToken, pool.rewardToken, uint256(1))\n        );\n        address tokenAddr = ClonesUpgradeable.predictDeterministicAddress(\n            address(rewardDistTokenImpl),\n            salt\n        );\n        return IRewardDistributionToken(tokenAddr);\n    }\n\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\n    function _unusedRewardDistributionTokenAddr(StakingPool memory pool)\n        public\n        view\n        returns (IRewardDistributionToken)\n    {\n        bytes32 salt = keccak256(\n            abi.encodePacked(pool.stakingToken, pool.rewardToken)\n        );\n        address tokenAddr = ClonesUpgradeable.predictDeterministicAddress(\n            address(rewardDistTokenImpl),\n            salt\n        );\n        return IRewardDistributionToken(tokenAddr);\n    }\n\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    function retrieveTokens(\n        uint256 vaultId,\n        uint256 amount,\n        address from,\n        address to\n    ) public onlyOwner {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        TimelockRewardDistributionTokenImpl xSlp = _rewardDistributionTokenAddr(\n            pool\n        );\n        xSlp.burnFrom(from, amount);\n        xSlp.mint(to, amount);\n    }\n}\n"
    },
    "contracts/solidity/proxy/ClonesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary ClonesUpgradeable {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000\n            )\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/solidity/proxy/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function childImplementation() external view returns (address);\n\n    function upgradeChildTo(address newImplementation) external;\n}\n"
    },
    "contracts/solidity/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(\n            _initializing || !_initialized,\n            \"Initializable: contract is already initialized\"\n        );\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/solidity/StakingTokenProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/OwnableUpgradeable.sol\";\nimport \"./token/IERC20Metadata.sol\";\n\n// Author: 0xKiwi.\n\ncontract StakingTokenProvider is OwnableUpgradeable {\n    address public uniLikeExchange;\n    address public defaultPairedToken;\n    string public defaultPrefix;\n    mapping(address => address) public pairedToken;\n    mapping(address => string) public pairedPrefix;\n\n    event NewDefaultPaired(address oldPaired, address newPaired);\n    event NewPairedTokenForVault(\n        address vaultToken,\n        address oldPairedtoken,\n        address newPairedToken\n    );\n\n    // This is an address provder to allow us to abstract out what liquidity\n    // our vault tokens should be paired with.\n    function __StakingTokenProvider_init(\n        address _uniLikeExchange,\n        address _defaultPairedtoken,\n        string memory _defaultPrefix\n    ) public initializer {\n        __Ownable_init();\n        require(_uniLikeExchange != address(0), \"Cannot be address(0)\");\n        require(_defaultPairedtoken != address(0), \"Cannot be address(0)\");\n        uniLikeExchange = _uniLikeExchange;\n        defaultPairedToken = _defaultPairedtoken;\n        defaultPrefix = _defaultPrefix;\n    }\n\n    function setPairedTokenForVaultToken(\n        address _vaultToken,\n        address _newPairedToken,\n        string calldata _newPrefix\n    ) external onlyOwner {\n        require(_newPairedToken != address(0), \"Cannot be address(0)\");\n        emit NewPairedTokenForVault(\n            _vaultToken,\n            pairedToken[_vaultToken],\n            _newPairedToken\n        );\n        pairedToken[_vaultToken] = _newPairedToken;\n        pairedPrefix[_vaultToken] = _newPrefix;\n    }\n\n    function setDefaultPairedToken(\n        address _newDefaultPaired,\n        string calldata _newDefaultPrefix\n    ) external onlyOwner {\n        emit NewDefaultPaired(defaultPairedToken, _newDefaultPaired);\n        defaultPairedToken = _newDefaultPaired;\n        defaultPrefix = _newDefaultPrefix;\n    }\n\n    function stakingTokenForVaultToken(address _vaultToken)\n        external\n        view\n        returns (address)\n    {\n        address _pairedToken = pairedToken[_vaultToken];\n        if (_pairedToken == address(0)) {\n            _pairedToken = defaultPairedToken;\n        }\n        return pairFor(uniLikeExchange, _vaultToken, _pairedToken);\n    }\n\n    function nameForStakingToken(address _vaultToken)\n        external\n        view\n        returns (string memory)\n    {\n        string memory _pairedPrefix = pairedPrefix[_vaultToken];\n        if (bytes(_pairedPrefix).length == 0) {\n            _pairedPrefix = defaultPrefix;\n        }\n        address _pairedToken = pairedToken[_vaultToken];\n        if (_pairedToken == address(0)) {\n            _pairedToken = defaultPairedToken;\n        }\n\n        string memory symbol1 = IERC20Metadata(_vaultToken).symbol();\n        string memory symbol2 = IERC20Metadata(_pairedToken).symbol();\n        return string(abi.encodePacked(_pairedPrefix, symbol1, symbol2));\n    }\n\n    function pairForVaultToken(address _vaultToken, address _pairedToken)\n        external\n        view\n        returns (address)\n    {\n        return pairFor(uniLikeExchange, _vaultToken, _pairedToken);\n    }\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n}\n"
    },
    "contracts/solidity/testing/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/solidity/testing/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "contracts/solidity/testing/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Receiver.sol\";\nimport \"./ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/solidity/testing/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}"
    },
    "contracts/solidity/testing/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "contracts/solidity/testing/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/solidity/testing/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/solidity/testing/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/solidity/testing/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/solidity/token/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Initializable.sol\";\nimport \"../util/ContextUpgradeable.sol\";\nimport \"./IERC20Upgradeable.sol\";\nimport \"./IERC20Metadata.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is\n    Initializable,\n    ContextUpgradeable,\n    IERC20Upgradeable,\n    IERC20Metadata\n{\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_)\n        internal\n        initializer\n    {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_)\n        internal\n        initializer\n    {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function _setMetadata(string memory name_, string memory symbol_) internal {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(\n            currentAllowance >= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + addedValue\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(\n            senderBalance >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/solidity/token/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/solidity/token/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "contracts/solidity/token/TimelockRewardDistributionTokenImpl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../util/OwnableUpgradeable.sol\";\nimport \"../util/SafeMathUpgradeable.sol\";\nimport \"../util/SafeMathInt.sol\";\nimport \"../util/SafeERC20Upgradeable.sol\";\nimport \"./ERC20Upgradeable.sol\";\n\n/// @title Reward-Paying Token (renamed from Dividend)\n/// @author Roger Wu (https://github.com/roger-wu)\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute a target token\n///  to token holders as dividends and allows token holders to withdraw their dividends.\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\ncontract TimelockRewardDistributionTokenImpl is\n    OwnableUpgradeable,\n    ERC20Upgradeable\n{\n    using SafeMathUpgradeable for uint256;\n    using SafeMathInt for int256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public target;\n\n    // With `magnitude`, we can properly distribute dividends even if the amount of received target is small.\n    // For more discussion about choosing the value of `magnitude`,\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\n    uint256 internal constant magnitude = 2**128;\n\n    uint256 internal magnifiedRewardPerShare;\n\n    // About dividendCorrection:\n    // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\n    // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\n    //   `dividendOf(_user)` should not be changed,\n    //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\n    // To keep the `dividendOf(_user)` unchanged, we add a correction term:\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\n    //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\n    //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\n    // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\n    mapping(address => int256) internal magnifiedRewardCorrections;\n    mapping(address => uint256) internal withdrawnRewards;\n\n    mapping(address => uint256) internal timelock;\n\n    event Timelocked(address user, uint256 amount, uint256 until);\n\n    function __TimelockRewardDistributionToken_init(\n        IERC20Upgradeable _target,\n        string memory _name,\n        string memory _symbol\n    ) public initializer {\n        __Ownable_init();\n        __ERC20_init(_name, _symbol);\n        target = _target;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            allowance(sender, _msgSender()).sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    function mint(address account, uint256 amount) public virtual onlyOwner {\n        _mint(account, amount);\n    }\n\n    function timelockMint(\n        address account,\n        uint256 amount,\n        uint256 timelockLength\n    ) public virtual onlyOwner {\n        uint256 timelockFinish = block.timestamp + timelockLength;\n        timelock[account] = timelockFinish;\n        emit Timelocked(account, amount, timelockFinish);\n        _mint(account, amount);\n    }\n\n    function timelockUntil(address account) public view returns (uint256) {\n        return timelock[account];\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, without deducting from the caller's\n     * allowance. Dangerous.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     */\n    function burnFrom(address account, uint256 amount)\n        public\n        virtual\n        onlyOwner\n    {\n        _burn(account, amount);\n    }\n\n    /// @notice Distributes target to token holders as dividends.\n    /// @dev It reverts if the total supply of tokens is 0.\n    /// It emits the `RewardsDistributed` event if the amount of received target is greater than 0.\n    /// About undistributed target tokens:\n    ///   In each distribution, there is a small amount of target not distributed,\n    ///     the magnified amount of which is\n    ///     `(amount * magnitude) % totalSupply()`.\n    ///   With a well-chosen `magnitude`, the amount of undistributed target\n    ///     (de-magnified) in a distribution can be less than 1 wei.\n    ///   We can actually keep track of the undistributed target in a distribution\n    ///     and try to distribute it in the next distribution,\n    ///     but keeping track of such data on-chain costs much more than\n    ///     the saved target, so we don't do that.\n    function distributeRewards(uint256 amount) external virtual onlyOwner {\n        require(totalSupply() > 0, \"RewardDist: 0 supply\");\n        require(amount > 0, \"RewardDist: 0 amount\");\n\n        // Because we receive the tokens from the staking contract, we assume the tokens have been received.\n        magnifiedRewardPerShare = magnifiedRewardPerShare.add(\n            (amount).mul(magnitude) / totalSupply()\n        );\n\n        emit RewardsDistributed(msg.sender, amount);\n    }\n\n    /// @notice Withdraws the target distributed to the sender.\n    /// @dev It emits a `RewardWithdrawn` event if the amount of withdrawn target is greater than 0.\n    function withdrawReward(address user) external onlyOwner {\n        uint256 _withdrawableReward = withdrawableRewardOf(user);\n        if (_withdrawableReward > 0) {\n            withdrawnRewards[user] = withdrawnRewards[user].add(\n                _withdrawableReward\n            );\n            target.safeTransfer(user, _withdrawableReward);\n            emit RewardWithdrawn(user, _withdrawableReward);\n        }\n    }\n\n    /// @notice View the amount of dividend in wei that an address can withdraw.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\n    function dividendOf(address _owner) public view returns (uint256) {\n        return withdrawableRewardOf(_owner);\n    }\n\n    /// @notice View the amount of dividend in wei that an address can withdraw.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\n    function withdrawableRewardOf(address _owner)\n        internal\n        view\n        returns (uint256)\n    {\n        return accumulativeRewardOf(_owner).sub(withdrawnRewards[_owner]);\n    }\n\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\n    function withdrawnRewardOf(address _owner) public view returns (uint256) {\n        return withdrawnRewards[_owner];\n    }\n\n    /// @notice View the amount of dividend in wei that an address has earned in total.\n    /// @dev accumulativeRewardOf(_owner) = withdrawableRewardOf(_owner) + withdrawnRewardOf(_owner)\n    /// = (magnifiedRewardPerShare * balanceOf(_owner) + magnifiedRewardCorrections[_owner]) / magnitude\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\n    function accumulativeRewardOf(address _owner)\n        public\n        view\n        returns (uint256)\n    {\n        return\n            magnifiedRewardPerShare\n                .mul(balanceOf(_owner))\n                .toInt256()\n                .add(magnifiedRewardCorrections[_owner])\n                .toUint256Safe() / magnitude;\n    }\n\n    /// @dev Internal function that transfer tokens from one address to another.\n    /// Update magnifiedRewardCorrections to keep dividends unchanged.\n    /// @param from The address to transfer from.\n    /// @param to The address to transfer to.\n    /// @param value The amount to be transferred.\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal override {\n        require(block.timestamp > timelock[from], \"User locked\");\n        super._transfer(from, to, value);\n\n        int256 _magCorrection = magnifiedRewardPerShare.mul(value).toInt256();\n        magnifiedRewardCorrections[from] = magnifiedRewardCorrections[from].add(\n            _magCorrection\n        );\n        magnifiedRewardCorrections[to] = magnifiedRewardCorrections[to].sub(\n            _magCorrection\n        );\n    }\n\n    /// @dev Internal function that mints tokens to an account.\n    /// Update magnifiedRewardCorrections to keep dividends unchanged.\n    /// @param account The account that will receive the created tokens.\n    /// @param value The amount that will be created.\n    function _mint(address account, uint256 value) internal override {\n        super._mint(account, value);\n\n        magnifiedRewardCorrections[account] = magnifiedRewardCorrections[\n            account\n        ].sub((magnifiedRewardPerShare.mul(value)).toInt256());\n    }\n\n    /// @dev Internal function that burns an amount of the token of a given account.\n    /// Update magnifiedRewardCorrections to keep dividends unchanged.\n    /// @param account The account whose tokens will be burnt.\n    /// @param value The amount that will be burnt.\n    function _burn(address account, uint256 value) internal override {\n        require(block.timestamp > timelock[account], \"User locked\");\n        super._burn(account, value);\n\n        magnifiedRewardCorrections[account] = magnifiedRewardCorrections[\n            account\n        ].add((magnifiedRewardPerShare.mul(value)).toInt256());\n    }\n\n    /// @dev This event MUST emit when target is distributed to token holders.\n    /// @param from The address which sends target to this contract.\n    /// @param weiAmount The amount of distributed target in wei.\n    event RewardsDistributed(address indexed from, uint256 weiAmount);\n\n    /// @dev This event MUST emit when an address withdraws their dividend.\n    /// @param to The address which withdraws target from this contract.\n    /// @param weiAmount The amount of withdrawn target in wei.\n    event RewardWithdrawn(address indexed to, uint256 weiAmount);\n}\n"
    },
    "contracts/solidity/util/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/solidity/util/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {}\n\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/solidity/util/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../testing/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/solidity/util/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Initializable.sol\";\nimport \"./ContextUpgradeable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/solidity/util/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./OwnableUpgradeable.sol\";\n\ncontract PausableUpgradeable is OwnableUpgradeable {\n    function __Pausable_init() internal initializer {\n        __Ownable_init();\n    }\n\n    event SetPaused(uint256 lockId, bool paused);\n    event SetIsGuardian(address addr, bool isGuardian);\n\n    mapping(address => bool) public isGuardian;\n    mapping(uint256 => bool) public isPaused;\n\n    // 0 : createVault\n    // 1 : mint\n    // 2 : redeem\n    // 3 : swap\n    // 4 : flashloan\n\n    function onlyOwnerIfPaused(uint256 lockId) public view virtual {\n        require(!isPaused[lockId] || msg.sender == owner(), \"Paused\");\n    }\n\n    function unpause(uint256 lockId) public virtual onlyOwner {\n        isPaused[lockId] = false;\n        emit SetPaused(lockId, false);\n    }\n\n    function pause(uint256 lockId) public virtual {\n        require(isGuardian[msg.sender], \"Can't pause\");\n        isPaused[lockId] = true;\n        emit SetPaused(lockId, true);\n    }\n\n    function setIsGuardian(address addr, bool _isGuardian)\n        public\n        virtual\n        onlyOwner\n    {\n        isGuardian[addr] = _isGuardian;\n        emit SetIsGuardian(addr, _isGuardian);\n    }\n}\n"
    },
    "contracts/solidity/util/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/solidity/util/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../testing/IERC20.sol\";\nimport \"../testing/IERC20Permit.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(\n                oldAllowance >= value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(\n                token,\n                abi.encodeWithSelector(\n                    token.approve.selector,\n                    spender,\n                    newAllowance\n                )\n            );\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(\n            nonceAfter == nonceBefore + 1,\n            \"SafeERC20: permit did not succeed\"\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n"
    },
    "contracts/solidity/util/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\nimport \"../token/IERC20Upgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(\n                oldAllowance >= value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(\n                token,\n                abi.encodeWithSelector(\n                    token.approve.selector,\n                    spender,\n                    newAllowance\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data)\n        private\n    {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n"
    },
    "contracts/solidity/util/SafeMathInt.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title SafeMathInt\n * @dev Math operations with safety checks that revert on error\n * @dev SafeMath adapted for int256\n * Based on code of  https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMathInt.sol\n */\nlibrary SafeMathInt {\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Prevent overflow when multiplying INT256_MIN with -1\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\n        require(!(a == -2**255 && b == -1) && !(b == -2**255 && a == -1));\n\n        int256 c = a * b;\n        require((b == 0) || (c / b == a));\n        return c;\n    }\n\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        // Prevent overflow when dividing INT256_MIN by -1\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\n        require(!(a == -2**255 && b == -1) && (b > 0));\n\n        return a / b;\n    }\n\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\n\n        return a - b;\n    }\n\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n        return c;\n    }\n\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\n        require(a >= 0);\n        return uint256(a);\n    }\n}\n"
    },
    "contracts/solidity/util/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/solidity/util/SushiHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\ncontract SushiHelper {\n\n  /**\n   * @notice Calculates the CREATE2 address for a sushi pair without making any\n   * external calls.\n   * \n   * @return pair Address of our token pair\n   */\n\n  function pairFor(address sushiRouterFactory, address tokenA, address tokenB) external view returns (address pair) {\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\n    pair = address(uint160(uint256(keccak256(abi.encodePacked(\n      hex'ff',\n      sushiRouterFactory,\n      keccak256(abi.encodePacked(token0, token1)),\n      hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\n    )))));\n  }\n\n\n  /**\n   * @notice Returns sorted token addresses, used to handle return values from pairs sorted in\n   * this order.\n   */\n\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n      require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n      (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n      require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n  }\n\n}\n"
    },
    "contracts/solidity/zaps/NFTXVaultCreationZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interface/INFTXInventoryStaking.sol\";\nimport \"../interface/INFTXLPStaking.sol\";\nimport \"../interface/IUniswapV2Router01.sol\";\nimport \"../interface/INFTXVault.sol\";\nimport \"../interface/INFTXVaultFactory.sol\";\nimport \"../testing/IERC1155.sol\";\nimport \"../testing/ERC1155Holder.sol\";\nimport \"../util/Ownable.sol\";\nimport \"../util/ReentrancyGuard.sol\";\nimport \"../util/SafeERC20.sol\";\nimport \"../util/SushiHelper.sol\";\n\n\n/**\n * @notice A partial WETH interface.\n */\n\ninterface IWETH {\n  function deposit() external payable;\n  function transfer(address to, uint value) external returns (bool);\n  function withdraw(uint) external;\n  function balanceOf(address to) external view returns (uint256);\n  function approve(address guy, uint wad) external returns (bool);\n}\n\n\n/**\n * @notice An amalgomation of vault creation steps, merged and optimised in\n * a single contract call in an attempt reduce gas costs to the end-user.\n * \n * @author Twade\n */\n\ncontract NFTXVaultCreationZap is Ownable, ReentrancyGuard, ERC1155Holder {\n\n  using SafeERC20 for IERC20;\n\n  /// @notice Allows zap to be paused\n  bool public paused = false;\n\n  /// @notice An interface for the NFTX Vault Factory contract\n  INFTXVaultFactory public immutable vaultFactory;\n\n  /// @notice Holds the mapping of our sushi router\n  IUniswapV2Router01 public immutable sushiRouter;\n  SushiHelper internal immutable sushiHelper;\n\n  /// @notice An interface for the WETH contract\n  IWETH public immutable WETH;\n\n  /// @notice An interface for the NFTX Vault Factory contract\n  INFTXInventoryStaking public immutable inventoryStaking;\n  INFTXLPStaking public immutable lpStaking;\n\n  // Set a constant address for specific contracts that need special logic\n  address constant CRYPTO_PUNKS = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n\n  /// @notice Basic information pertaining to the vault\n  struct vaultInfo {\n    address assetAddress;      // 20/32\n    bool is1155;               // 21/32\n    bool allowAllItems;        // 22/32\n    string name;               // ??/32\n    string symbol;             // ??/32\n  }\n\n  /// @notice Fee information in 9-decimal format\n  struct vaultFeesConfig {\n    uint32 mintFee;\n    uint32 randomRedeemFee;\n    uint32 targetRedeemFee;\n    uint32 randomSwapFee;\n    uint32 targetSwapFee;\n  }\n\n  /// @notice Reference to the vault's eligibility implementation\n  struct vaultEligibilityStorage {\n    int moduleIndex;\n    bytes initData;\n  }\n\n  /// @notice Valid tokens to be transferred to the vault on creation\n  struct vaultTokens {\n    uint[] assetTokenIds;\n    uint[] assetTokenAmounts;\n\n    // Sushiswap integration for liquidity\n    uint minTokenIn;\n    uint minWethIn;\n    uint wethIn;\n  }\n\n\n  /**\n   * @notice Initialises our zap by setting contract addresses onto their\n   * respective interfaces.\n   */\n\n  constructor(\n    address _vaultFactory,\n    address _inventoryStaking,\n    address _lpStaking,\n    address _sushiRouter,\n    address _sushiHelper,\n    address _weth\n  ) Ownable() ReentrancyGuard() {\n    // Set our staking contracts\n    inventoryStaking = INFTXInventoryStaking(_inventoryStaking);\n    lpStaking = INFTXLPStaking(_lpStaking);\n\n    // Set our NFTX factory contract\n    vaultFactory = INFTXVaultFactory(_vaultFactory);\n\n    // Set our Sushi Router used for liquidity\n    sushiRouter = IUniswapV2Router01(_sushiRouter);\n    sushiHelper = SushiHelper(_sushiHelper);\n\n    // Set our chain's WETH contract\n    WETH = IWETH(_weth);\n    // setting infinite approval here to save on subsequent gas costs\n    IWETH(_weth).approve(_sushiRouter, type(uint256).max);\n  }\n\n\n  /**\n   * @notice Creates an NFTX vault, handling any desired settings and tokens.\n   * \n   * @dev Tokens are deposited into the vault prior to fees being sent.\n   * \n   * @param vaultData Basic information about the vault stored in `vaultInfo` struct\n   * @param vaultFeatures A numeric representation of boolean values for features on the vault\n   * @param vaultFees Fee definitions stored in a `vaultFeesConfig` struct\n   * @param eligibilityStorage Eligibility implementation, stored in a `vaultEligibilityStorage` struct\n   * @param assetTokens Tokens to be transferred to the vault in exchange for vault tokens\n   * \n   * @return vaultId_ The numeric ID of the NFTX vault\n   */\n\n  function createVault(\n    vaultInfo calldata vaultData,\n    uint vaultFeatures,\n    vaultFeesConfig calldata vaultFees,\n    vaultEligibilityStorage calldata eligibilityStorage,\n    vaultTokens calldata assetTokens\n  ) external nonReentrant payable returns (uint vaultId_) {\n    // Ensure our zap is not paused\n    require(!paused, 'Zap is paused');\n\n    // Get the amount of starting ETH in the contract\n    uint startingWeth = WETH.balanceOf(address(this));\n\n    // Create our vault skeleton\n    vaultId_ = vaultFactory.createVault(\n      vaultData.name,\n      vaultData.symbol,\n      vaultData.assetAddress,\n      vaultData.is1155,\n      vaultData.allowAllItems\n    );\n\n    // Deploy our vault's xToken\n    inventoryStaking.deployXTokenForVault(vaultId_);\n\n    // Build our vault interface\n    INFTXVault vault = INFTXVault(vaultFactory.vault(vaultId_));\n\n    // If we have a specified eligibility storage, add that on\n    if (eligibilityStorage.moduleIndex >= 0) {\n      vault.deployEligibilityStorage(\n        uint256(eligibilityStorage.moduleIndex),\n        eligibilityStorage.initData\n      );\n    }\n\n    // Mint and stake liquidity into the vault\n    uint length = assetTokens.assetTokenIds.length;\n\n    // If we don't have any tokens to send, we can skip our transfers\n    if (length > 0) {\n      // Determine the token type to alternate our transfer logic\n      if (!vaultData.is1155) {\n        // Iterate over our 721 tokens to transfer them all to our vault\n        for (uint i; i < length;) {\n          _transferFromERC721(vaultData.assetAddress, assetTokens.assetTokenIds[i], address(vault));\n\n          if(vaultData.assetAddress == CRYPTO_PUNKS) {\n            bytes memory data = abi.encodeWithSignature(\n                \"offerPunkForSaleToAddress(uint256,uint256,address)\",\n                assetTokens.assetTokenIds[i],\n                0,\n                address(vault)\n            );\n            (bool success, bytes memory resultData) = vaultData.assetAddress.call(data);\n            require(success, string(resultData));\n          }\n\n          unchecked { ++i; }\n        }\n      } else {\n        // Transfer all of our 1155 tokens to our zap, as the `mintTo` call on our\n        // vault requires the call sender to hold the ERC1155 token.\n        IERC1155(vaultData.assetAddress).safeBatchTransferFrom(\n          msg.sender,\n          address(this),\n          assetTokens.assetTokenIds,\n          assetTokens.assetTokenAmounts,\n          \"\"\n        );\n\n        // Approve our vault to play with our 1155 tokens\n        IERC1155(vaultData.assetAddress).setApprovalForAll(address(vault), true);\n      }\n\n      // We can now mint our asset tokens, giving the vault our tokens and storing them\n      // inside our zap, as we will shortly be staking them. Our zap is excluded from fees,\n      // so there should be no loss in the amount returned.\n      vault.mintTo(assetTokens.assetTokenIds, assetTokens.assetTokenAmounts, address(this));\n\n      // We now have tokens against our provided NFTs that we can now stake through either\n      // inventory or liquidity.\n\n      // Get our vaults base staking token. This is used to calculate the xToken\n      address baseToken = address(vault);\n\n      // We first want to set up our liquidity, as the returned values will be variable\n      if (assetTokens.minTokenIn > 0) {\n        require(msg.value >= assetTokens.wethIn, 'Insufficient msg.value sent for liquidity');\n\n        // Wrap ETH into WETH for our contract from the sender\n        WETH.deposit{value: msg.value}();\n\n        // Convert WETH to vault token\n        require(IERC20(baseToken).balanceOf(address(this)) >= assetTokens.minTokenIn, 'Insufficient tokens acquired for liquidity');\n\n        // Provide liquidity to sushiswap, using the vault tokens and pairing it with the\n        // liquidity amount specified in the call.\n        IERC20(baseToken).safeApprove(address(sushiRouter), assetTokens.minTokenIn);\n        (,, uint256 liquidity) = sushiRouter.addLiquidity(\n          baseToken,\n          address(WETH),\n          assetTokens.minTokenIn,\n          assetTokens.wethIn,\n          assetTokens.minTokenIn,\n          assetTokens.minWethIn,\n          address(this),\n          block.timestamp\n        );\n        IERC20(baseToken).safeApprove(address(sushiRouter), 0);\n\n        // Stake in LP rewards contract \n        address lpToken = sushiHelper.pairFor(sushiRouter.factory(), baseToken, address(WETH));\n        IERC20(lpToken).safeApprove(address(lpStaking), liquidity);\n        lpStaking.timelockDepositFor(vaultId_, msg.sender, liquidity, 48 hours);\n      }\n\n      // Return any token dust to the caller\n      uint256 remainingTokens = IERC20(baseToken).balanceOf(address(this));\n\n      // Any tokens that we have remaining after our liquidity staking are thrown into\n      // inventory to ensure what we don't have any token dust remaining.\n      if (remainingTokens > 0) {\n        // Make a direct timelock mint using the default timelock duration. This sends directly\n        // to our user, rather than via the zap, to avoid the timelock locking the tx.\n        IERC20(baseToken).transfer(inventoryStaking.vaultXToken(vaultId_), remainingTokens);\n        inventoryStaking.timelockMintFor(vaultId_, remainingTokens, msg.sender, 2);\n      }\n    }\n\n    // If we have specified vault features that aren't the default (all enabled)\n    // then update them\n    if (vaultFeatures < 31) {\n      vault.setVaultFeatures(\n        _getBoolean(vaultFeatures, 4),\n        _getBoolean(vaultFeatures, 3),\n        _getBoolean(vaultFeatures, 2),\n        _getBoolean(vaultFeatures, 1),\n        _getBoolean(vaultFeatures, 0)\n      );\n    }\n\n    // Set our vault fees, converting our 9-decimal to 18-decimal\n    vault.setFees(\n      uint256(vaultFees.mintFee) * 10e9,\n      uint256(vaultFees.randomRedeemFee) * 10e9,\n      uint256(vaultFees.targetRedeemFee) * 10e9,\n      uint256(vaultFees.randomSwapFee) * 10e9,\n      uint256(vaultFees.targetSwapFee) * 10e9\n    );\n\n    // Finalise our vault, preventing further edits\n    vault.finalizeVault();\n\n    // Now that all transactions are finished we can return any ETH dust left over\n    // from our liquidity staking.\n    uint remainingWEth = WETH.balanceOf(address(this)) - startingWeth;\n    if (remainingWEth > 0) {\n      WETH.withdraw(remainingWEth);\n      bool sent = payable(msg.sender).send(remainingWEth);\n      require(sent, \"Failed to send Ether\");\n    }\n  }\n\n\n  /**\n   * @notice Transfers our ERC721 tokens to a specified recipient.\n   * \n   * @param assetAddr Address of the asset being transferred\n   * @param tokenId The ID of the token being transferred\n   * @param to The address the token is being transferred to\n   */\n\n  function _transferFromERC721(address assetAddr, uint256 tokenId, address to) internal virtual {\n    bytes memory data;\n\n    if (assetAddr == CRYPTO_PUNKS) {\n      // Fix here for frontrun attack.\n      bytes memory punkIndexToAddress = abi.encodeWithSignature(\"punkIndexToAddress(uint256)\", tokenId);\n      (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\n      (address nftOwner) = abi.decode(result, (address));\n      require(checkSuccess && nftOwner == msg.sender, \"Not the NFT owner\");\n      data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\n    } else {\n      // We push to the vault to avoid an unneeded transfer.\n      data = abi.encodeWithSignature(\"safeTransferFrom(address,address,uint256)\", msg.sender, to, tokenId);\n    }\n\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\n    require(success, string(resultData));\n  }\n\n\n  /**\n   * @notice Reads a boolean at a set character index of a uint.\n   * \n   * @dev 0 and 1 define false and true respectively.\n   * \n   * @param _packedBools A numeric representation of a series of boolean values\n   * @param _boolNumber The character index of the boolean we are looking up\n   *\n   * @return bool The representation of the boolean value\n   */\n\n  function _getBoolean(uint256 _packedBools, uint256 _boolNumber) internal pure returns(bool) {\n    uint256 flag = (_packedBools >> _boolNumber) & uint256(1);\n    return (flag == 1 ? true : false);\n  }\n\n\n  /**\n   * @notice Allows our zap to be paused to prevent any processing.\n   * \n   * @param _paused New pause state\n   */\n\n  function pause(bool _paused) external onlyOwner {\n    paused = _paused;\n  }\n\n  receive() external payable {\n    require(msg.sender == address(WETH), \"Only WETH\");\n  }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}