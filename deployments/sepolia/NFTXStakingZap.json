{
  "address": "0x0001DbEC3Bd59fE1d8f6722E70D28bACB828c51d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftxFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sushiRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timelockUntil",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "UserStaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minWethIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wethIn",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity1155",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minEthIn",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity1155ETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minEthIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "addLiquidity1155ETHTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minWethIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wethIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "addLiquidity1155To",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minWethIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wethIn",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity721",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minWethIn",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity721ETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minWethIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "addLiquidity721ETHTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minWethIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wethIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "addLiquidity721To",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assignStakingContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inventoryLockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inventoryStaking",
      "outputs": [
        {
          "internalType": "contract INFTXInventoryStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "isAddressTimelockExcluded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpLockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpStaking",
      "outputs": [
        {
          "internalType": "contract INFTXLPStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftxFactory",
      "outputs": [
        {
          "internalType": "contract INFTXVaultFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "provideInventory1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "provideInventory721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "rescue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInventoryLockTime",
          "type": "uint256"
        }
      ],
      "name": "setInventoryLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLPLockTime",
          "type": "uint256"
        }
      ],
      "name": "setLPLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setTimelockExcludeList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockExcludeList",
      "outputs": [
        {
          "internalType": "contract ITimelockExcludeList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc4f76cb76de00daea3235d82a45af08ef90e2886e56722dfe560232341ec05d4",
  "receipt": {
    "to": null,
    "from": "0xDEA9196Dcdd2173D6E369c2AcC0faCc83fD9346a",
    "contractAddress": "0x0001DbEC3Bd59fE1d8f6722E70D28bACB828c51d",
    "transactionIndex": 12,
    "gasUsed": "3994012",
    "logsBloom": "0x
    "blockHash": "0xc488e95290795215c04271baeac698d5630ceaf569e7fcea4c30353e35bc6ae5",
    "transactionHash": "0xc4f76cb76de00daea3235d82a45af08ef90e2886e56722dfe560232341ec05d4",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 3334428,
        "transactionHash": "0xc4f76cb76de00daea3235d82a45af08ef90e2886e56722dfe560232341ec05d4",
        "address": "0x0001DbEC3Bd59fE1d8f6722E70D28bACB828c51d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dea9196dcdd2173d6e369c2acc0facc83fd9346a"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xc488e95290795215c04271baeac698d5630ceaf569e7fcea4c30353e35bc6ae5"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 3334428,
        "transactionHash": "0xc4f76cb76de00daea3235d82a45af08ef90e2886e56722dfe560232341ec05d4",
        "address": "0x16c1038a989E7c52c7B0FBDE889249C02d7e205D",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000001dbec3bd59fe1d8f6722e70d28bacb828c51d",
          "0x00000000000000000000000001a93b7153ee160f3176af0b0f31121df9f0ffa5"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 9,
        "blockHash": "0xc488e95290795215c04271baeac698d5630ceaf569e7fcea4c30353e35bc6ae5"
      }
    ],
    "blockNumber": 3334428,
    "cumulativeGasUsed": "4754888",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7B6768a235E3906D53d0cBd8e8A73201f5857992",
    "0x01a93b7153Ee160F3176af0B0F31121DF9f0FFA5"
  ],
  "numDeployments": 1,
  "solcInputHash": "2d454ec0cd5e2ba69d4608440183e71e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftxFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelockUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"UserStaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethIn\",\"type\":\"uint256\"}],\"name\":\"addLiquidity1155\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minEthIn\",\"type\":\"uint256\"}],\"name\":\"addLiquidity1155ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minEthIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidity1155ETHTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidity1155To\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethIn\",\"type\":\"uint256\"}],\"name\":\"addLiquidity721\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"}],\"name\":\"addLiquidity721ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidity721ETHTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidity721To\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assignStakingContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inventoryLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inventoryStaking\",\"outputs\":[{\"internalType\":\"contract INFTXInventoryStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"isAddressTimelockExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStaking\",\"outputs\":[{\"internalType\":\"contract INFTXLPStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftxFactory\",\"outputs\":[{\"internalType\":\"contract INFTXVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"provideInventory1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"provideInventory721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInventoryLockTime\",\"type\":\"uint256\"}],\"name\":\"setInventoryLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLPLockTime\",\"type\":\"uint256\"}],\"name\":\"setLPLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTimelockExcludeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockExcludeList\",\"outputs\":[{\"internalType\":\"contract ITimelockExcludeList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/solidity/NFTXStakingZap.sol\":\"NFTXStakingZap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/solidity/NFTXStakingZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./util/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./interface/INFTXLPStaking.sol\\\";\\nimport \\\"./interface/INFTXInventoryStaking.sol\\\";\\nimport \\\"./interface/INFTXVaultFactory.sol\\\";\\nimport \\\"./interface/INFTXVault.sol\\\";\\nimport \\\"./interface/INFTXSimpleFeeDistributor.sol\\\";\\nimport \\\"./interface/IUniswapV2Router01.sol\\\";\\nimport \\\"./interface/ITimelockExcludeList.sol\\\";\\nimport \\\"./token/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"./token/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"./token/IERC1155Upgradeable.sol\\\";\\n\\n// Authors: @0xKiwi_.\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ncontract NFTXStakingZap is\\n    Ownable,\\n    ReentrancyGuard,\\n    ERC721HolderUpgradeable,\\n    ERC1155HolderUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    IWETH public immutable WETH;\\n    INFTXLPStaking public lpStaking;\\n    INFTXInventoryStaking public inventoryStaking;\\n    INFTXVaultFactory public immutable nftxFactory;\\n    IUniswapV2Router01 public immutable sushiRouter;\\n    ITimelockExcludeList public timelockExcludeList;\\n\\n    uint256 public lpLockTime = 48 hours;\\n    uint256 public inventoryLockTime = 7 days;\\n    uint256 constant BASE = 1e18;\\n\\n    event UserStaked(\\n        uint256 vaultId,\\n        uint256 count,\\n        uint256 lpBalance,\\n        uint256 timelockUntil,\\n        address sender\\n    );\\n\\n    constructor(address _nftxFactory, address _sushiRouter)\\n        Ownable()\\n        ReentrancyGuard()\\n    {\\n        nftxFactory = INFTXVaultFactory(_nftxFactory);\\n        sushiRouter = IUniswapV2Router01(_sushiRouter);\\n        WETH = IWETH(IUniswapV2Router01(_sushiRouter).WETH());\\n        IERC20Upgradeable(address(IUniswapV2Router01(_sushiRouter).WETH()))\\n            .safeApprove(_sushiRouter, type(uint256).max);\\n    }\\n\\n    function assignStakingContracts() public {\\n        require(\\n            address(lpStaking) == address(0) ||\\n                address(inventoryStaking) == address(0),\\n            \\\"not zero\\\"\\n        );\\n        lpStaking = INFTXLPStaking(\\n            INFTXSimpleFeeDistributor(\\n                INFTXVaultFactory(nftxFactory).feeDistributor()\\n            ).lpStaking()\\n        );\\n        inventoryStaking = INFTXInventoryStaking(\\n            INFTXSimpleFeeDistributor(\\n                INFTXVaultFactory(nftxFactory).feeDistributor()\\n            ).inventoryStaking()\\n        );\\n    }\\n\\n    function setTimelockExcludeList(address addr) external onlyOwner {\\n        timelockExcludeList = ITimelockExcludeList(addr);\\n    }\\n\\n    function setLPLockTime(uint256 newLPLockTime) external onlyOwner {\\n        require(newLPLockTime <= 7 days, \\\"Lock too long\\\");\\n        lpLockTime = newLPLockTime;\\n    }\\n\\n    function setInventoryLockTime(uint256 newInventoryLockTime)\\n        external\\n        onlyOwner\\n    {\\n        require(newInventoryLockTime <= 14 days, \\\"Lock too long\\\");\\n        inventoryLockTime = newInventoryLockTime;\\n    }\\n\\n    function isAddressTimelockExcluded(address addr, uint256 vaultId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        if (address(timelockExcludeList) == address(0)) {\\n            return false;\\n        } else {\\n            return timelockExcludeList.isExcluded(addr, vaultId);\\n        }\\n    }\\n\\n    function provideInventory721(uint256 vaultId, uint256[] calldata tokenIds)\\n        external\\n    {\\n        uint256 count = tokenIds.length;\\n        INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\\n        uint256 timelockTime = isAddressTimelockExcluded(msg.sender, vaultId)\\n            ? 0\\n            : inventoryLockTime;\\n        inventoryStaking.timelockMintFor(\\n            vaultId,\\n            count * BASE,\\n            msg.sender,\\n            timelockTime\\n        );\\n        address xToken = inventoryStaking.vaultXToken(vaultId);\\n        uint256 oldBal = IERC20Upgradeable(vault).balanceOf(xToken);\\n        uint256[] memory amounts = new uint256[](0);\\n        address assetAddress = vault.assetAddress();\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            transferFromERC721(assetAddress, tokenIds[i], address(vault));\\n            approveERC721(assetAddress, address(vault), tokenIds[i]);\\n        }\\n        vault.mintTo(tokenIds, amounts, address(xToken));\\n        uint256 newBal = IERC20Upgradeable(vault).balanceOf(xToken);\\n        require(newBal == oldBal + count * BASE, \\\"Incorrect vtokens minted\\\");\\n        uint256 lockEndTime = block.timestamp + timelockTime;\\n        emit UserStaked(vaultId, tokenIds.length, 0, lockEndTime, msg.sender);\\n    }\\n\\n    function provideInventory1155(\\n        uint256 vaultId,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) external {\\n        uint256 length = tokenIds.length;\\n        require(length == amounts.length, \\\"Not equal length\\\");\\n        uint256 count;\\n        for (uint256 i; i < length; ++i) {\\n            count += amounts[i];\\n        }\\n        INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\\n        uint256 timelockTime = isAddressTimelockExcluded(msg.sender, vaultId)\\n            ? 0\\n            : inventoryLockTime;\\n        inventoryStaking.timelockMintFor(\\n            vaultId,\\n            count * BASE,\\n            msg.sender,\\n            timelockTime\\n        );\\n        address xToken = inventoryStaking.vaultXToken(vaultId);\\n        uint256 oldBal = IERC20Upgradeable(vault).balanceOf(address(xToken));\\n        IERC1155Upgradeable nft = IERC1155Upgradeable(vault.assetAddress());\\n        nft.safeBatchTransferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenIds,\\n            amounts,\\n            \\\"\\\"\\n        );\\n        nft.setApprovalForAll(address(vault), true);\\n        vault.mintTo(tokenIds, amounts, address(xToken));\\n        uint256 newBal = IERC20Upgradeable(vault).balanceOf(address(xToken));\\n        require(newBal == oldBal + count * BASE, \\\"Incorrect vtokens minted\\\");\\n        uint256 lockEndTime = block.timestamp + timelockTime;\\n        emit UserStaked(vaultId, tokenIds.length, 0, lockEndTime, msg.sender);\\n    }\\n\\n    function addLiquidity721ETH(\\n        uint256 vaultId,\\n        uint256[] calldata ids,\\n        uint256 minWethIn\\n    ) external payable returns (uint256) {\\n        return addLiquidity721ETHTo(vaultId, ids, minWethIn, msg.sender);\\n    }\\n\\n    function addLiquidity721ETHTo(\\n        uint256 vaultId,\\n        uint256[] memory ids,\\n        uint256 minWethIn,\\n        address to\\n    ) public payable nonReentrant returns (uint256) {\\n        require(to != address(0) && to != address(this));\\n        WETH.deposit{value: msg.value}();\\n        (, uint256 amountEth, uint256 liquidity) = _addLiquidity721WETH(\\n            vaultId,\\n            ids,\\n            minWethIn,\\n            msg.value,\\n            to\\n        );\\n\\n        // Return extras.\\n        uint256 remaining = msg.value - amountEth;\\n        if (remaining != 0) {\\n            WETH.withdraw(remaining);\\n            (bool success, ) = payable(to).call{value: remaining}(\\\"\\\");\\n            require(\\n                success,\\n                \\\"Address: unable to send value, recipient may have reverted\\\"\\n            );\\n        }\\n\\n        return liquidity;\\n    }\\n\\n    function addLiquidity1155ETH(\\n        uint256 vaultId,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        uint256 minEthIn\\n    ) external payable returns (uint256) {\\n        return\\n            addLiquidity1155ETHTo(vaultId, ids, amounts, minEthIn, msg.sender);\\n    }\\n\\n    function addLiquidity1155ETHTo(\\n        uint256 vaultId,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        uint256 minEthIn,\\n        address to\\n    ) public payable nonReentrant returns (uint256) {\\n        require(to != address(0) && to != address(this));\\n        WETH.deposit{value: msg.value}();\\n        // Finish this.\\n        (, uint256 amountEth, uint256 liquidity) = _addLiquidity1155WETH(\\n            vaultId,\\n            ids,\\n            amounts,\\n            minEthIn,\\n            msg.value,\\n            to\\n        );\\n\\n        // Return extras.\\n        uint256 remaining = msg.value - amountEth;\\n        if (remaining != 0) {\\n            WETH.withdraw(remaining);\\n            (bool success, ) = payable(to).call{value: remaining}(\\\"\\\");\\n            require(\\n                success,\\n                \\\"Address: unable to send value, recipient may have reverted\\\"\\n            );\\n        }\\n\\n        return liquidity;\\n    }\\n\\n    function addLiquidity721(\\n        uint256 vaultId,\\n        uint256[] calldata ids,\\n        uint256 minWethIn,\\n        uint256 wethIn\\n    ) external returns (uint256) {\\n        return addLiquidity721To(vaultId, ids, minWethIn, wethIn, msg.sender);\\n    }\\n\\n    function addLiquidity721To(\\n        uint256 vaultId,\\n        uint256[] memory ids,\\n        uint256 minWethIn,\\n        uint256 wethIn,\\n        address to\\n    ) public nonReentrant returns (uint256) {\\n        require(to != address(0) && to != address(this));\\n        IERC20Upgradeable(address(WETH)).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            wethIn\\n        );\\n        (, uint256 amountEth, uint256 liquidity) = _addLiquidity721WETH(\\n            vaultId,\\n            ids,\\n            minWethIn,\\n            wethIn,\\n            to\\n        );\\n\\n        // Return extras.\\n        uint256 remaining = wethIn - amountEth;\\n        if (remaining != 0) {\\n            WETH.transfer(to, remaining);\\n        }\\n\\n        return liquidity;\\n    }\\n\\n    function addLiquidity1155(\\n        uint256 vaultId,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        uint256 minWethIn,\\n        uint256 wethIn\\n    ) public returns (uint256) {\\n        return\\n            addLiquidity1155To(\\n                vaultId,\\n                ids,\\n                amounts,\\n                minWethIn,\\n                wethIn,\\n                msg.sender\\n            );\\n    }\\n\\n    function addLiquidity1155To(\\n        uint256 vaultId,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        uint256 minWethIn,\\n        uint256 wethIn,\\n        address to\\n    ) public nonReentrant returns (uint256) {\\n        require(to != address(0) && to != address(this));\\n        IERC20Upgradeable(address(WETH)).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            wethIn\\n        );\\n        (, uint256 amountEth, uint256 liquidity) = _addLiquidity1155WETH(\\n            vaultId,\\n            ids,\\n            amounts,\\n            minWethIn,\\n            wethIn,\\n            to\\n        );\\n\\n        // Return extras.\\n        uint256 remaining = wethIn - amountEth;\\n        if (remaining != 0) {\\n            WETH.transfer(to, remaining);\\n        }\\n\\n        return liquidity;\\n    }\\n\\n    function _addLiquidity721WETH(\\n        uint256 vaultId,\\n        uint256[] memory ids,\\n        uint256 minWethIn,\\n        uint256 wethIn,\\n        address to\\n    )\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(nftxFactory.excludedFromFees(address(this)));\\n        address vault = nftxFactory.vault(vaultId);\\n\\n        // Transfer tokens to zap and mint to NFTX.\\n        address assetAddress = INFTXVault(vault).assetAddress();\\n        uint256 length = ids.length;\\n        for (uint256 i; i < length; i++) {\\n            transferFromERC721(assetAddress, ids[i], vault);\\n            approveERC721(assetAddress, vault, ids[i]);\\n        }\\n        uint256[] memory emptyIds;\\n        INFTXVault(vault).mint(ids, emptyIds);\\n        uint256 balance = length * BASE; // We should not be experiencing fees.\\n\\n        return\\n            _addLiquidityAndLock(\\n                vaultId,\\n                vault,\\n                balance,\\n                minWethIn,\\n                wethIn,\\n                to\\n            );\\n    }\\n\\n    function _addLiquidity1155WETH(\\n        uint256 vaultId,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        uint256 minWethIn,\\n        uint256 wethIn,\\n        address to\\n    )\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(nftxFactory.excludedFromFees(address(this)));\\n        address vault = nftxFactory.vault(vaultId);\\n\\n        // Transfer tokens to zap and mint to NFTX.\\n        address assetAddress = INFTXVault(vault).assetAddress();\\n        IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(\\n            msg.sender,\\n            address(this),\\n            ids,\\n            amounts,\\n            \\\"\\\"\\n        );\\n        IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\\n\\n        uint256 count = INFTXVault(vault).mint(ids, amounts);\\n        uint256 balance = (count * BASE); // We should not be experiencing fees.\\n\\n        return\\n            _addLiquidityAndLock(\\n                vaultId,\\n                vault,\\n                balance,\\n                minWethIn,\\n                wethIn,\\n                to\\n            );\\n    }\\n\\n    function _addLiquidityAndLock(\\n        uint256 vaultId,\\n        address vault,\\n        uint256 minTokenIn,\\n        uint256 minWethIn,\\n        uint256 wethIn,\\n        address to\\n    )\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // Provide liquidity.\\n        IERC20Upgradeable(vault).safeApprove(address(sushiRouter), minTokenIn);\\n        (\\n            uint256 amountToken,\\n            uint256 amountEth,\\n            uint256 liquidity\\n        ) = sushiRouter.addLiquidity(\\n                address(vault),\\n                address(WETH),\\n                minTokenIn,\\n                wethIn,\\n                minTokenIn,\\n                minWethIn,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n        // Stake in LP rewards contract\\n        IERC20Upgradeable(pairFor(vault, address(WETH))).safeApprove(\\n            address(lpStaking),\\n            liquidity\\n        );\\n        uint256 timelockTime = isAddressTimelockExcluded(msg.sender, vaultId)\\n            ? 0\\n            : lpLockTime;\\n        lpStaking.timelockDepositFor(vaultId, to, liquidity, timelockTime);\\n\\n        uint256 remaining = minTokenIn - amountToken;\\n        if (remaining != 0) {\\n            IERC20Upgradeable(vault).safeTransfer(to, remaining);\\n        }\\n\\n        uint256 lockEndTime = block.timestamp + timelockTime;\\n        emit UserStaked(vaultId, minTokenIn, liquidity, lockEndTime, to);\\n        return (amountToken, amountEth, liquidity);\\n    }\\n\\n    function transferFromERC721(\\n        address assetAddr,\\n        uint256 tokenId,\\n        address to\\n    ) internal virtual {\\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n        bytes memory data;\\n        if (assetAddr == kitties) {\\n            // Cryptokitties.\\n            data = abi.encodeWithSignature(\\n                \\\"transferFrom(address,address,uint256)\\\",\\n                msg.sender,\\n                to,\\n                tokenId\\n            );\\n        } else if (assetAddr == punks) {\\n            // CryptoPunks.\\n            // Fix here for frontrun attack. Added in v1.0.2.\\n            bytes memory punkIndexToAddress = abi.encodeWithSignature(\\n                \\\"punkIndexToAddress(uint256)\\\",\\n                tokenId\\n            );\\n            (bool checkSuccess, bytes memory result) = address(assetAddr)\\n                .staticcall(punkIndexToAddress);\\n            address nftOwner = abi.decode(result, (address));\\n            require(\\n                checkSuccess && nftOwner == msg.sender,\\n                \\\"Not the NFT owner\\\"\\n            );\\n            data = abi.encodeWithSignature(\\\"buyPunk(uint256)\\\", tokenId);\\n        } else {\\n            // Default.\\n            // We push to the vault to avoid an unneeded transfer.\\n            data = abi.encodeWithSignature(\\n                \\\"safeTransferFrom(address,address,uint256)\\\",\\n                msg.sender,\\n                to,\\n                tokenId\\n            );\\n        }\\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\\n        require(success, string(resultData));\\n    }\\n\\n    function approveERC721(\\n        address assetAddr,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n        bytes memory data;\\n        if (assetAddr == kitties) {\\n            // Cryptokitties.\\n            // data = abi.encodeWithSignature(\\\"approve(address,uint256)\\\", to, tokenId);\\n            // No longer needed to approve with pushing.\\n            return;\\n        } else if (assetAddr == punks) {\\n            // CryptoPunks.\\n            data = abi.encodeWithSignature(\\n                \\\"offerPunkForSaleToAddress(uint256,uint256,address)\\\",\\n                tokenId,\\n                0,\\n                to\\n            );\\n        } else {\\n            // No longer needed to approve with pushing.\\n            return;\\n        }\\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\\n        require(success, string(resultData));\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (address pair)\\n    {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            sushiRouter.factory(),\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            hex\\\"e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == address(WETH), \\\"Only WETH\\\");\\n    }\\n\\n    function rescue(address token) external onlyOwner {\\n        if (token == address(0)) {\\n            (bool success, ) = payable(msg.sender).call{\\n                value: address(this).balance\\n            }(\\\"\\\");\\n            require(\\n                success,\\n                \\\"Address: unable to send value, recipient may have reverted\\\"\\n            );\\n        } else {\\n            IERC20Upgradeable(token).safeTransfer(\\n                msg.sender,\\n                IERC20Upgradeable(token).balanceOf(address(this))\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x15f01dca92b0e8a54fa32ce44d4b0350908a1a8c1aa1eb2339589266b9951645\",\"license\":\"MIT\"},\"contracts/solidity/interface/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXEligibility {\\n    // Read functions.\\n    function name() external pure returns (string memory);\\n\\n    function finalized() external view returns (bool);\\n\\n    function targetAsset() external pure returns (address);\\n\\n    function checkAllEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool[] memory);\\n\\n    function checkAllIneligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\\n\\n    // Write functions.\\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\\n\\n    function beforeMintHook(uint256[] calldata tokenIds) external;\\n\\n    function afterMintHook(uint256[] calldata tokenIds) external;\\n\\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\\n\\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xd932fdc4ea04b9d685f094b4405e64da8f3ab46cd701b22223f2a28d42973c70\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXInventoryStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./INFTXVaultFactory.sol\\\";\\n\\ninterface INFTXInventoryStaking {\\n    function nftxVaultFactory() external view returns (INFTXVaultFactory);\\n\\n    function vaultXToken(uint256 vaultId) external view returns (address);\\n\\n    function xTokenAddr(address baseToken) external view returns (address);\\n\\n    function xTokenShareValue(uint256 vaultId) external view returns (uint256);\\n\\n    function __NFTXInventoryStaking_init(address nftxFactory) external;\\n\\n    function deployXTokenForVault(uint256 vaultId) external;\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function timelockMintFor(\\n        uint256 vaultId,\\n        uint256 amount,\\n        address to,\\n        uint256 timelockLength\\n    ) external returns (uint256);\\n\\n    function deposit(uint256 vaultId, uint256 _amount) external;\\n\\n    function withdraw(uint256 vaultId, uint256 _share) external;\\n}\\n\",\"keccak256\":\"0x80540f3c1ec01c54afc55dd9343e9973e8ea4f11ac12e2129d3cb088f8380649\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXLPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXLPStaking {\\n    function nftxVaultFactory() external view returns (address);\\n\\n    function rewardDistTokenImpl() external view returns (address);\\n\\n    function stakingTokenProvider() external view returns (address);\\n\\n    function vaultToken(address _stakingToken) external view returns (address);\\n\\n    function stakingToken(address _vaultToken) external view returns (address);\\n\\n    function rewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function newRewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function oldRewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function unusedRewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function rewardDistributionTokenAddr(\\n        address stakedToken,\\n        address rewardToken\\n    ) external view returns (address);\\n\\n    // Write functions.\\n    function __NFTXLPStaking__init(address _stakingTokenProvider) external;\\n\\n    function setNFTXVaultFactory(address newFactory) external;\\n\\n    function setStakingTokenProvider(address newProvider) external;\\n\\n    function addPoolForVault(uint256 vaultId) external;\\n\\n    function updatePoolForVault(uint256 vaultId) external;\\n\\n    function updatePoolForVaults(uint256[] calldata vaultId) external;\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function deposit(uint256 vaultId, uint256 amount) external;\\n\\n    function timelockDepositFor(\\n        uint256 vaultId,\\n        address account,\\n        uint256 amount,\\n        uint256 timelockLength\\n    ) external;\\n\\n    function exit(uint256 vaultId, uint256 amount) external;\\n\\n    function rescue(uint256 vaultId) external;\\n\\n    function withdraw(uint256 vaultId, uint256 amount) external;\\n\\n    function claimRewards(uint256 vaultId) external;\\n}\\n\",\"keccak256\":\"0x8060d654324a6785929a06f45ffe9f4d2944eeca59b050ba66faf9af70e19861\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXSimpleFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXSimpleFeeDistributor {\\n    struct FeeReceiver {\\n        uint256 allocPoint;\\n        address receiver;\\n        bool isContract;\\n    }\\n\\n    function nftxVaultFactory() external view returns (address);\\n\\n    function lpStaking() external view returns (address);\\n\\n    function inventoryStaking() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function allocTotal() external view returns (uint256);\\n\\n    // Write functions.\\n    function __SimpleFeeDistributor__init__(\\n        address _lpStaking,\\n        address _treasury\\n    ) external;\\n\\n    function rescueTokens(address token) external;\\n\\n    function distribute(uint256 vaultId) external;\\n\\n    function addReceiver(\\n        uint256 _allocPoint,\\n        address _receiver,\\n        bool _isContract\\n    ) external;\\n\\n    function initializeVaultReceivers(uint256 _vaultId) external;\\n\\n    function changeReceiverAlloc(uint256 _idx, uint256 _allocPoint) external;\\n\\n    function changeReceiverAddress(\\n        uint256 _idx,\\n        address _address,\\n        bool _isContract\\n    ) external;\\n\\n    function removeReceiver(uint256 _receiverIdx) external;\\n\\n    // Configuration functions.\\n    function setTreasuryAddress(address _treasury) external;\\n\\n    function setLPStakingAddress(address _lpStaking) external;\\n\\n    function setInventoryStakingAddress(address _inventoryStaking) external;\\n\\n    function setNFTXVaultFactory(address _factory) external;\\n}\\n\",\"keccak256\":\"0xf093e5492f2f3f559b9e99016fed6f5aa717c0e20c8b2e76e376b8eb020a23c7\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\nimport \\\"./INFTXVaultFactory.sol\\\";\\nimport \\\"./INFTXEligibility.sol\\\";\\n\\ninterface INFTXVault is IERC20Upgradeable {\\n    function manager() external view returns (address);\\n\\n    function assetAddress() external view returns (address);\\n\\n    function vaultFactory() external view returns (INFTXVaultFactory);\\n\\n    function eligibilityStorage() external view returns (INFTXEligibility);\\n\\n    function is1155() external view returns (bool);\\n\\n    function allowAllItems() external view returns (bool);\\n\\n    function enableMint() external view returns (bool);\\n\\n    function enableRandomRedeem() external view returns (bool);\\n\\n    function enableTargetRedeem() external view returns (bool);\\n\\n    function enableRandomSwap() external view returns (bool);\\n\\n    function enableTargetSwap() external view returns (bool);\\n\\n    function vaultId() external view returns (uint256);\\n\\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\\n\\n    function allHoldings() external view returns (uint256[] memory);\\n\\n    function totalHoldings() external view returns (uint256);\\n\\n    function mintFee() external view returns (uint256);\\n\\n    function randomRedeemFee() external view returns (uint256);\\n\\n    function targetRedeemFee() external view returns (uint256);\\n\\n    function randomSwapFee() external view returns (uint256);\\n\\n    function targetSwapFee() external view returns (uint256);\\n\\n    function vaultFees()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    event VaultInit(\\n        uint256 indexed vaultId,\\n        address assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    );\\n\\n    event ManagerSet(address manager);\\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\\n    // event CustomEligibilityDeployed(address eligibilityAddr);\\n\\n    event EnableMintUpdated(bool enabled);\\n    event EnableRandomRedeemUpdated(bool enabled);\\n    event EnableTargetRedeemUpdated(bool enabled);\\n    event EnableRandomSwapUpdated(bool enabled);\\n    event EnableTargetSwapUpdated(bool enabled);\\n\\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\\n    event Swapped(\\n        uint256[] nftIds,\\n        uint256[] amounts,\\n        uint256[] specificIds,\\n        uint256[] redeemedIds,\\n        address to\\n    );\\n\\n    function __NFTXVault_init(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _assetAddress,\\n        bool _is1155,\\n        bool _allowAllItems\\n    ) external;\\n\\n    function finalizeVault() external;\\n\\n    function setVaultMetadata(string memory name_, string memory symbol_)\\n        external;\\n\\n    function setVaultFeatures(\\n        bool _enableMint,\\n        bool _enableRandomRedeem,\\n        bool _enableTargetRedeem,\\n        bool _enableRandomSwap,\\n        bool _enableTargetSwap\\n    ) external;\\n\\n    function setFees(\\n        uint256 _mintFee,\\n        uint256 _randomRedeemFee,\\n        uint256 _targetRedeemFee,\\n        uint256 _randomSwapFee,\\n        uint256 _targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees() external;\\n\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\n    // a similar interface.\\n    function deployEligibilityStorage(\\n        uint256 moduleIndex,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    // The manager has control over options like fees and features\\n    function setManager(address _manager) external;\\n\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\n    ) external returns (uint256);\\n\\n    function mintTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        address to\\n    ) external returns (uint256);\\n\\n    function redeem(uint256 amount, uint256[] calldata specificIds)\\n        external\\n        returns (uint256[] calldata);\\n\\n    function redeemTo(\\n        uint256 amount,\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function swap(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds\\n    ) external returns (uint256[] calldata);\\n\\n    function swapTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function allValidNFTs(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x2d3a6170188b0e18d6744b9ea5414e8f01946302b390b032bed94546ce3f5f41\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/IBeacon.sol\\\";\\n\\ninterface INFTXVaultFactory is IBeacon {\\n    // Read functions.\\n    function numVaults() external view returns (uint256);\\n\\n    function zapContract() external view returns (address);\\n\\n    function zapContracts(address addr) external view returns (bool);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function eligibilityManager() external view returns (address);\\n\\n    function vault(uint256 vaultId) external view returns (address);\\n\\n    function allVaults() external view returns (address[] memory);\\n\\n    function vaultsForAsset(address asset)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function isLocked(uint256 id) external view returns (bool);\\n\\n    function excludedFromFees(address addr) external view returns (bool);\\n\\n    function factoryMintFee() external view returns (uint64);\\n\\n    function factoryRandomRedeemFee() external view returns (uint64);\\n\\n    function factoryTargetRedeemFee() external view returns (uint64);\\n\\n    function factoryRandomSwapFee() external view returns (uint64);\\n\\n    function factoryTargetSwapFee() external view returns (uint64);\\n\\n    function vaultFees(uint256 vaultId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    event NewFeeDistributor(address oldDistributor, address newDistributor);\\n    event NewZapContract(address oldZap, address newZap);\\n    event UpdatedZapContract(address zap, bool excluded);\\n    event FeeExclusion(address feeExcluded, bool excluded);\\n    event NewEligibilityManager(address oldEligManager, address newEligManager);\\n    event NewVault(\\n        uint256 indexed vaultId,\\n        address vaultAddress,\\n        address assetAddress\\n    );\\n    event UpdateVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n    event DisableVaultFees(uint256 vaultId);\\n    event UpdateFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n\\n    // Write functions.\\n    function __NFTXVaultFactory_init(\\n        address _vaultImpl,\\n        address _feeDistributor\\n    ) external;\\n\\n    function createVault(\\n        string calldata name,\\n        string calldata symbol,\\n        address _assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    ) external returns (uint256);\\n\\n    function setFeeDistributor(address _feeDistributor) external;\\n\\n    function setEligibilityManager(address _eligibilityManager) external;\\n\\n    function setZapContract(address _zapContract, bool _excluded) external;\\n\\n    function setFeeExclusion(address _excludedAddr, bool excluded) external;\\n\\n    function setFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function setVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees(uint256 vaultId) external;\\n}\\n\",\"keccak256\":\"0xb6d64ca7f387cb11b1a345add3556c21d2b3c9fa9b8d8645a3312bcbb33ce9bb\",\"license\":\"MIT\"},\"contracts/solidity/interface/ITimelockExcludeList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITimelockExcludeList {\\n    function isExcluded(address addr, uint256 vaultId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x2d3930257422b12987fe227b9ed08a8485768eb2756cff136882c53989852401\",\"license\":\"MIT\"},\"contracts/solidity/interface/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x9d9507bd23206f8914e46b21966e1a06659a2b98741d91cf200e000ffc6b0f9c\",\"license\":\"MIT\"},\"contracts/solidity/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function childImplementation() external view returns (address);\\n\\n    function upgradeChildTo(address newImplementation) external;\\n}\\n\",\"keccak256\":\"0xd9b361e1d9b9a4bde9801abb5692e9fd7018cb52505d3a47dc7b5dd968bcad28\",\"license\":\"MIT\"},\"contracts/solidity/token/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155HolderUpgradeable is ERC1155ReceiverUpgradeable {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0a587387492c9ba5f5620cbbae619ae3a20bf612df7ca27336cbacedc831dfe4\",\"license\":\"MIT\"},\"contracts/solidity/token/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../util/ERC165Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is\\n    ERC165Upgradeable,\\n    IERC1155ReceiverUpgradeable\\n{\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xd7f7789da0b41f951db4f53a48f704c1b22e3b248d8455a5e52ee1becf564673\",\"license\":\"MIT\"},\"contracts/solidity/token/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x506eed822bcdae377524d871984befa72f5a35f064dff9729602f023dc6e4c95\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x6d374da0f9e9acbfa496ca04a6828efe7cf00845bb4918e3bdf794701efabde8\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdef1a66125379a97fe41534944cc128c8b93287690b114df5365033d385c148e\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x57ee5f4c65fa0d2e023e97cb265784084412c700117cac90cfe29bf4bab3c7fc\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"contracts/solidity/util/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd38318b34491b4e11bab877e4dbafbf51111b69b09307b01ca952cf24e4229d0\",\"license\":\"MIT\"},\"contracts/solidity/util/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x556f1630ad6f0c8e666a674dc9bd279ca2eeb3d20fb2211c05ba7fdb9ed5ca53\",\"license\":\"MIT\"},\"contracts/solidity/util/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data)\\n        private\\n    {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x795b61b6dcbaad0d7c4c64c36c4a95a9be5e8786a31dae3200f80f11037b744e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040526202a30060055562093a806006553480156200001f57600080fd5b5060405162004c8b38038062004c8b8339810160408190526200004291620005fd565b6200004d33620001a6565b600180556001600160601b0319606083811b821660a05282901b1660c052604080516315ab88c960e31b815290516001600160a01b0383169163ad5c4648916004808301926020929190829003018186803b158015620000ac57600080fd5b505afa158015620000c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e79190620005e0565b6001600160a01b03166080816001600160a01b031660601b815250506200019e81600019836001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156200014557600080fd5b505afa1580156200015a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001809190620005e0565b6001600160a01b0316620001f660201b620024ab179092919060201c565b5050620006f5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b801580620002845750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156200024757600080fd5b505afa1580156200025c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000282919062000656565b155b620002fc5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084015b60405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620003549185916200035916565b505050565b6000620003b5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200043760201b62002640179092919060201c565b805190915015620003545780806020019051810190620003d6919062000634565b620003545760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620002f3565b606062000448848460008562000452565b90505b9392505050565b606082471015620004b55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620002f3565b843b620005055760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620002f3565b600080866001600160a01b031685876040516200052391906200066f565b60006040518083038185875af1925050503d806000811462000562576040519150601f19603f3d011682016040523d82523d6000602084013e62000567565b606091505b5090925090506200057a82828662000585565b979650505050505050565b60608315620005965750816200044b565b825115620005a75782518084602001fd5b8160405162461bcd60e51b8152600401620002f391906200068d565b80516001600160a01b0381168114620005db57600080fd5b919050565b600060208284031215620005f2578081fd5b6200044b82620005c3565b6000806040838503121562000610578081fd5b6200061b83620005c3565b91506200062b60208401620005c3565b90509250929050565b60006020828403121562000646578081fd5b815180151581146200044b578182fd5b60006020828403121562000668578081fd5b5051919050565b6000825162000683818460208701620006c2565b9190910192915050565b6020815260008251806020840152620006ae816040850160208701620006c2565b601f01601f19169190910160400192915050565b60005b83811015620006df578181015183820152602001620006c5565b83811115620006ef576000848401525b50505050565b60805160601c60a05160601c60c05160601c6144c3620007c860003960008181610429015281816133a60152818161345a01526136e30152600081816103f5015281816110780152818161119f0152818161141f01528181611e96015281816126b90152818161275501528181612a110152612aad0152600081816101ec015281816105ce015281816107dd0152818161085701528181610a2101528181610a9a01528181611a2301528181611ad701528181611c8a01528181611d3d0152818161340301526134f801526144c36000f3fe6080604052600436106101dc5760003560e01c806384d5a23211610102578063ad402dfc11610095578063c46c4e8a11610064578063c46c4e8a14610648578063cd9d37b71461065e578063f23a6e611461067e578063f2fde38b146106c357600080fd5b8063ad402dfc146105a9578063ad5c4648146105bc578063bc197c81146105f0578063bdd8172b1461063557600080fd5b806392054f8b116100d157806392054f8b146105335780639bf1401c146105535780639d2cbed014610573578063a7b128461461059357600080fd5b806384d5a232146104c0578063881b2f2d146104e05780638da5cb5b146105005780639199fc9c1461051e57600080fd5b80634a5ff0611161017a578063715018a611610149578063715018a61461044b578063739697751461046057806374a1b0b014610480578063839006f2146104a057600080fd5b80634a5ff061146103b057806353b573bf146103d05780635ee50f88146103e35780636d13582c1461041757600080fd5b806311ad9d38116101b657806311ad9d38146102e8578063150b7a02146103205780631809d2c21461037d5780631a6907cd1461039d57600080fd5b806301ffc9a714610265578063021001551461029a57806310cde786146102c857600080fd5b3661026057336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461025e5760405162461bcd60e51b815260206004820152600960248201527f4f6e6c792057455448000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b005b600080fd5b34801561027157600080fd5b50610285610280366004613c8b565b6106e3565b60405190151581526020015b60405180910390f35b3480156102a657600080fd5b506102ba6102b5366004613fd5565b61074c565b604051908152602001610291565b3480156102d457600080fd5b506102ba6102e3366004613f59565b6108e6565b3480156102f457600080fd5b50600454610308906001600160a01b031681565b6040516001600160a01b039091168152602001610291565b34801561032c57600080fd5b5061036461033b366004613b6f565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516001600160e01b03199091168152602001610291565b34801561038957600080fd5b506102ba610398366004613e74565b610900565b6102ba6103ab366004613e23565b610944565b3480156103bc57600080fd5b506102ba6103cb3660046140c7565b610990565b6102ba6103de366004613da4565b610b28565b3480156103ef57600080fd5b506103087f000000000000000000000000000000000000000000000000000000000000000081565b34801561042357600080fd5b506103087f000000000000000000000000000000000000000000000000000000000000000081565b34801561045757600080fd5b5061025e610ba7565b34801561046c57600080fd5b5061025e61047b366004613cb3565b610c1c565b34801561048c57600080fd5b50600354610308906001600160a01b031681565b3480156104ac57600080fd5b5061025e6104bb366004613a8d565b610ccd565b3480156104cc57600080fd5b5061025e6104db366004613cb3565b610e97565b3480156104ec57600080fd5b506102856104fb366004613c40565b610f48565b34801561050c57600080fd5b506000546001600160a01b0316610308565b34801561052a57600080fd5b5061025e611009565b34801561053f57600080fd5b5061025e61054e366004613a8d565b6112cd565b34801561055f57600080fd5b50600254610308906001600160a01b031681565b34801561057f57600080fd5b5061025e61058e366004613d2d565b611365565b34801561059f57600080fd5b506102ba60055481565b6102ba6105b7366004613ed0565b61199d565b3480156105c857600080fd5b506103087f000000000000000000000000000000000000000000000000000000000000000081565b3480156105fc57600080fd5b5061036461060b366004613ac5565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6102ba610643366004614066565b611c04565b34801561065457600080fd5b506102ba60065481565b34801561066a57600080fd5b5061025e610679366004613ce3565b611e7b565b34801561068a57600080fd5b50610364610699366004613bd9565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b3480156106cf57600080fd5b5061025e6106de366004613a8d565b6123bd565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061074657507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6000600260015414156107a15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610255565b60026001556001600160a01b038216158015906107c757506001600160a01b0382163014155b6107d057600080fd5b6108056001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612657565b600080610816898989898989612695565b92509250506000828661082991906143ee565b905080156108d55760405163a9059cbb60e01b81526001600160a01b038681166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561089b57600080fd5b505af11580156108af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d39190613c6b565b505b506001805598975050505050505050565b60006108f686868686863361074c565b9695505050505050565b60006108f686868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250889250879150339050610990565b600061098785858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250339150611c049050565b95945050505050565b6000600260015414156109e55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610255565b60026001556001600160a01b03821615801590610a0b57506001600160a01b0382163014155b610a1457600080fd5b610a496001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612657565b600080610a5988888888886129ed565b925092505060008286610a6c91906143ee565b90508015610b185760405163a9059cbb60e01b81526001600160a01b038681166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b158015610ade57600080fd5b505af1158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b169190613c6b565b505b5060018055979650505050505050565b6000610b9c8787878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a92508991829185019084908082843760009201919091525088925033915061199d9050565b979650505050505050565b33610bba6000546001600160a01b031690565b6001600160a01b031614610c105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610255565b610c1a6000612ce9565b565b33610c2f6000546001600160a01b031690565b6001600160a01b031614610c855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610255565b62127500811115610cc85760405162461bcd60e51b815260206004820152600d60248201526c4c6f636b20746f6f206c6f6e6760981b6044820152606401610255565b600655565b33610ce06000546001600160a01b031690565b6001600160a01b031614610d365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610255565b6001600160a01b038116610e0657604051600090339047908381818185875af1925050503d8060008114610d86576040519150601f19603f3d011682016040523d82523d6000602084013e610d8b565b606091505b5050905080610e025760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610255565b5050565b6040516370a0823160e01b8152306004820152610e949033906001600160a01b038416906370a082319060240160206040518083038186803b158015610e4b57600080fd5b505afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e839190613ccb565b6001600160a01b0384169190612d46565b50565b33610eaa6000546001600160a01b031690565b6001600160a01b031614610f005760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610255565b62093a80811115610f435760405162461bcd60e51b815260206004820152600d60248201526c4c6f636b20746f6f206c6f6e6760981b6044820152606401610255565b600555565b6004546000906001600160a01b0316610f6357506000610746565b600480546040517f81e97b660000000000000000000000000000000000000000000000000000000081526001600160a01b0386811693820193909352602481018590529116906381e97b669060440160206040518083038186803b158015610fca57600080fd5b505afa158015610fde573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110029190613c6b565b9392505050565b6002546001600160a01b0316158061102a57506003546001600160a01b0316155b6110765760405162461bcd60e51b815260206004820152600860248201527f6e6f74207a65726f0000000000000000000000000000000000000000000000006044820152606401610255565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630d43e8ad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110cf57600080fd5b505afa1580156110e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111079190613aa9565b6001600160a01b0316639bf1401c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561113f57600080fd5b505afa158015611153573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111779190613aa9565b600260006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630d43e8ad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f657600080fd5b505afa15801561120a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122e9190613aa9565b6001600160a01b03166374a1b0b06040518163ffffffff1660e01b815260040160206040518083038186803b15801561126657600080fd5b505afa15801561127a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129e9190613aa9565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b336112e06000546001600160a01b031690565b6001600160a01b0316146113365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610255565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b828181146113b55760405162461bcd60e51b815260206004820152601060248201527f4e6f7420657175616c206c656e677468000000000000000000000000000000006044820152606401610255565b6000805b82811015611405578484828181106113e157634e487b7160e01b600052603260045260246000fd5b90506020020135826113f391906143b7565b91506113fe81614431565b90506113b9565b506040516340d1b7db60e11b8152600481018890526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906381a36fb69060240160206040518083038186803b15801561146957600080fd5b505afa15801561147d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a19190613aa9565b905060006114af338a610f48565b6114bb576006546114be565b60005b6003549091506001600160a01b0316632699f55a8a6114e5670de0b6b3a7640000876143cf565b6040516001600160e01b031960e085901b1681526004810192909252602482015233604482015260648101849052608401602060405180830381600087803b15801561153057600080fd5b505af1158015611544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115689190613ccb565b5060035460405162d3f20f60e21b8152600481018b90526000916001600160a01b03169063034fc83c9060240160206040518083038186803b1580156115ad57600080fd5b505afa1580156115c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e59190613aa9565b6040516370a0823160e01b81526001600160a01b0380831660048301529192506000918516906370a082319060240160206040518083038186803b15801561162c57600080fd5b505afa158015611640573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116649190613ccb565b90506000846001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a157600080fd5b505afa1580156116b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d99190613aa9565b9050806001600160a01b0316632eb2c2d633308e8e8e8e6040518763ffffffff1660e01b8152600401611711969594939291906141f6565b600060405180830381600087803b15801561172b57600080fd5b505af115801561173f573d6000803e3d6000fd5b505060405163a22cb46560e01b81526001600160a01b038881166004830152600160248301528416925063a22cb4659150604401600060405180830381600087803b15801561178d57600080fd5b505af11580156117a1573d6000803e3d6000fd5b5050604051635882017560e11b81526001600160a01b038816925063b10402ea91506117d9908e908e908e908e908a906004016142aa565b602060405180830381600087803b1580156117f357600080fd5b505af1158015611807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182b9190613ccb565b506040516370a0823160e01b81526001600160a01b038481166004830152600091908716906370a082319060240160206040518083038186803b15801561187157600080fd5b505afa158015611885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a99190613ccb565b90506118bd670de0b6b3a7640000886143cf565b6118c790846143b7565b81146119155760405162461bcd60e51b815260206004820152601860248201527f496e636f72726563742076746f6b656e73206d696e74656400000000000000006044820152606401610255565b600061192186426143b7565b90507f9f69538b20901013ea360bae2dce4079d45308fcfed02b3f0768c9f70f4ba9c08e8e8e9050600084336040516119859594939291909485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b60405180910390a15050505050505050505050505050565b6000600260015414156119f25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610255565b60026001556001600160a01b03821615801590611a1857506001600160a01b0382163014155b611a2157600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611a7c57600080fd5b505af1158015611a90573d6000803e3d6000fd5b5050505050600080611aa6888888883489612695565b925092505060008234611ab991906143ee565b90508015610b1857604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611b2357600080fd5b505af1158015611b37573d6000803e3d6000fd5b505050506000856001600160a01b03168260405160006040518083038185875af1925050503d8060008114611b88576040519150601f19603f3d011682016040523d82523d6000602084013e611b8d565b606091505b5050905080610b165760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610255565b600060026001541415611c595760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610255565b60026001556001600160a01b03821615801590611c7f57506001600160a01b0382163014155b611c8857600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611ce357600080fd5b505af1158015611cf7573d6000803e3d6000fd5b5050505050600080611d0c87878734886129ed565b925092505060008234611d1f91906143ee565b90508015611e6c57604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611d8957600080fd5b505af1158015611d9d573d6000803e3d6000fd5b505050506000856001600160a01b03168260405160006040518083038185875af1925050503d8060008114611dee576040519150601f19603f3d011682016040523d82523d6000602084013e611df3565b606091505b5050905080611e6a5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610255565b505b50600180559695505050505050565b6040516340d1b7db60e11b81526004810184905281906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906381a36fb69060240160206040518083038186803b158015611ee057600080fd5b505afa158015611ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f189190613aa9565b90506000611f263387610f48565b611f3257600654611f35565b60005b6003549091506001600160a01b0316632699f55a87611f5c670de0b6b3a7640000876143cf565b6040516001600160e01b031960e085901b1681526004810192909252602482015233604482015260648101849052608401602060405180830381600087803b158015611fa757600080fd5b505af1158015611fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdf9190613ccb565b5060035460405162d3f20f60e21b8152600481018890526000916001600160a01b03169063034fc83c9060240160206040518083038186803b15801561202457600080fd5b505afa158015612038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205c9190613aa9565b6040516370a0823160e01b81526001600160a01b0380831660048301529192506000918516906370a082319060240160206040518083038186803b1580156120a357600080fd5b505afa1580156120b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120db9190613ccb565b60408051600080825260208201909252919250506000856001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561212a57600080fd5b505afa15801561213e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121629190613aa9565b90508760005b818110156121e2576121a1838c8c8481811061219457634e487b7160e01b600052603260045260246000fd5b905060200201358a612d76565b6121d283898d8d858181106121c657634e487b7160e01b600052603260045260246000fd5b905060200201356130a6565b6121db81614431565b9050612168565b50604051635882017560e11b81526001600160a01b0388169063b10402ea90612215908d908d9088908b906004016142ed565b602060405180830381600087803b15801561222f57600080fd5b505af1158015612243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122679190613ccb565b506040516370a0823160e01b81526001600160a01b038681166004830152600091908916906370a082319060240160206040518083038186803b1580156122ad57600080fd5b505afa1580156122c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e59190613ccb565b90506122f9670de0b6b3a76400008a6143cf565b61230390866143b7565b81146123515760405162461bcd60e51b815260206004820152601860248201527f496e636f72726563742076746f6b656e73206d696e74656400000000000000006044820152606401610255565b600061235d88426143b7565b604080518f8152602081018e90526000818301526060810183905233608082015290519192507f9f69538b20901013ea360bae2dce4079d45308fcfed02b3f0768c9f70f4ba9c0919081900360a00190a150505050505050505050505050565b336123d06000546001600160a01b031690565b6001600160a01b0316146124265760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610255565b6001600160a01b0381166124a25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610255565b610e9481612ce9565b80158061254d57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561251357600080fd5b505afa158015612527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254b9190613ccb565b155b6125bf5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610255565b6040516001600160a01b03831660248201526044810182905261263b9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261317a565b505050565b606061264f848460008561325f565b949350505050565b6040516001600160a01b038085166024830152831660448201526064810182905261268f9085906323b872dd60e01b90608401612604565b50505050565b6040516306df336560e51b8152306004820152600090819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dbe66ca09060240160206040518083038186803b1580156126fb57600080fd5b505afa15801561270f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127339190613c6b565b61273c57600080fd5b6040516340d1b7db60e11b8152600481018a90526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906381a36fb69060240160206040518083038186803b15801561279f57600080fd5b505afa1580156127b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d79190613aa9565b90506000816001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561281457600080fd5b505afa158015612828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284c9190613aa9565b6040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081529091506001600160a01b03821690632eb2c2d69061289a90339030908f908f90600401614252565b600060405180830381600087803b1580156128b457600080fd5b505af11580156128c8573d6000803e3d6000fd5b505060405163a22cb46560e01b81526001600160a01b038581166004830152600160248301528416925063a22cb4659150604401600060405180830381600087803b15801561291657600080fd5b505af115801561292a573d6000803e3d6000fd5b5050604051630f57464360e21b8152600092506001600160a01b0385169150633d5d190c9061295f908e908e9060040161432e565b602060405180830381600087803b15801561297957600080fd5b505af115801561298d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b19190613ccb565b905060006129c7670de0b6b3a7640000836143cf565b90506129d78d85838d8d8d613393565b9650965096505050505096509650969350505050565b6040516306df336560e51b8152306004820152600090819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dbe66ca09060240160206040518083038186803b158015612a5357600080fd5b505afa158015612a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8b9190613c6b565b612a9457600080fd5b6040516340d1b7db60e11b8152600481018990526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906381a36fb69060240160206040518083038186803b158015612af757600080fd5b505afa158015612b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2f9190613aa9565b90506000816001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b6c57600080fd5b505afa158015612b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba49190613aa9565b895190915060005b81811015612c2a57612be6838c8381518110612bd857634e487b7160e01b600052603260045260246000fd5b602002602001015186612d76565b612c1883858d8481518110612c0b57634e487b7160e01b600052603260045260246000fd5b60200260200101516130a6565b80612c2281614431565b915050612bac565b50604051630f57464360e21b81526060906001600160a01b03851690633d5d190c90612c5c908e90859060040161432e565b602060405180830381600087803b158015612c7657600080fd5b505af1158015612c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cae9190613ccb565b506000612cc3670de0b6b3a7640000846143cf565b9050612cd38d86838e8e8e613393565b9750975097505050505050955095509592505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03831660248201526044810182905261263b90849063a9059cbb60e01b90606401612604565b7306012c8cf97bead5deae237070f9587f8e7a266d73b47e3cd837ddf8e4c57f05d70ab865de6e193bbb60606001600160a01b038616831415612e06576040513360248201526001600160a01b03851660448201526064810186905260840160408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790529050613019565b816001600160a01b0316866001600160a01b03161415612fb157600085604051602401612e3591815260200190565b60408051601f198184030181529181526020820180516001600160e01b03167f58178168000000000000000000000000000000000000000000000000000000001790525190915060009081906001600160a01b038a1690612e979085906141da565b600060405180830381855afa9150503d8060008114612ed2576040519150601f19603f3d011682016040523d82523d6000602084013e612ed7565b606091505b5091509150600081806020019051810190612ef29190613aa9565b9050828015612f0957506001600160a01b03811633145b612f555760405162461bcd60e51b815260206004820152601160248201527f4e6f7420746865204e4654206f776e65720000000000000000000000000000006044820152606401610255565b604051602481018a905260440160408051601f198184030181529190526020810180516001600160e01b03167f8264fe980000000000000000000000000000000000000000000000000000000017905294506130199350505050565b6040513360248201526001600160a01b03851660448201526064810186905260840160408051601f198184030181529190526020810180516001600160e01b03167f42842e0e0000000000000000000000000000000000000000000000000000000017905290505b600080876001600160a01b03168360405161303491906141da565b6000604051808303816000865af19150503d8060008114613071576040519150601f19603f3d011682016040523d82523d6000602084013e613076565b606091505b509150915081819061309b5760405162461bcd60e51b81526004016102559190614353565b505050505050505050565b7306012c8cf97bead5deae237070f9587f8e7a266d73b47e3cd837ddf8e4c57f05d70ab865de6e193bbb60606001600160a01b0386168314156130eb57505050505050565b816001600160a01b0316866001600160a01b031614156131725760405160248101859052600060448201526001600160a01b038616606482015260840160408051601f198184030181529190526020810180516001600160e01b03167fbf31196f000000000000000000000000000000000000000000000000000000001790529050613019565b505050505050565b60006131cf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126409092919063ffffffff16565b80519091501561263b57808060200190518101906131ed9190613c6b565b61263b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610255565b6060824710156132d75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610255565b843b6133255760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610255565b600080866001600160a01b0316858760405161334191906141da565b60006040518083038185875af1925050503d806000811461337e576040519150601f19603f3d011682016040523d82523d6000602084013e613383565b606091505b5091509150610b9c828286613695565b600080806133cb6001600160a01b0389167f0000000000000000000000000000000000000000000000000000000000000000896124ab565b6040517fe8e337000000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015260448201899052606482018790526084820189905260a482018890523060c48301524260e4830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e8e337009061010401606060405180830381600087803b1580156134a157600080fd5b505af11580156134b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d99190614126565b600254929550909350915061352c906001600160a01b03168261351c8e7f00000000000000000000000000000000000000000000000000000000000000006136ce565b6001600160a01b031691906124ab565b6000613538338e610f48565b61354457600554613547565b60005b9050600260009054906101000a90046001600160a01b03166001600160a01b0316636c9b95888e8a85856040518563ffffffff1660e01b81526004016135af94939291909384526001600160a01b039290921660208401526040830152606082015260800190565b600060405180830381600087803b1580156135c957600080fd5b505af11580156135dd573d6000803e3d6000fd5b505050506000848c6135ef91906143ee565b9050801561360b5761360b6001600160a01b038e168a83612d46565b600061361783426143b7565b90507f9f69538b20901013ea360bae2dce4079d45308fcfed02b3f0768c9f70f4ba9c08f8e86848e6040516136779594939291909485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b60405180910390a150939d929c50909a509098505050505050505050565b606083156136a4575081611002565b8251156136b45782518084602001fd5b8160405162461bcd60e51b81526004016102559190614353565b60008060006136dd858561384c565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561373a57600080fd5b505afa15801561374e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137729190613aa9565b6040516bffffffffffffffffffffffff19606085811b8216602084015284901b1660348201526048016040516020818303038152906040528051906020012060405160200161382b9291907fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6bffffffffffffffffffffffff1916600183015260158201527fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303603582015260550190565b60408051601f19818403018152919052805160209091012095945050505050565b600080826001600160a01b0316846001600160a01b031614156138d75760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152608401610255565b826001600160a01b0316846001600160a01b0316106138f75782846138fa565b83835b90925090506001600160a01b0382166139555760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606401610255565b9250929050565b60008083601f84011261396d578182fd5b50813567ffffffffffffffff811115613984578182fd5b6020830191508360208260051b850101111561395557600080fd5b600082601f8301126139af578081fd5b8135602067ffffffffffffffff8211156139cb576139cb614462565b8160051b6139da828201614386565b8381528281019086840183880185018910156139f4578687fd5b8693505b85841015613a165780358352600193909301929184019184016139f8565b50979650505050505050565b600082601f830112613a32578081fd5b813567ffffffffffffffff811115613a4c57613a4c614462565b613a5f601f8201601f1916602001614386565b818152846020838601011115613a73578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215613a9e578081fd5b813561100281614478565b600060208284031215613aba578081fd5b815161100281614478565b600080600080600060a08688031215613adc578081fd5b8535613ae781614478565b94506020860135613af781614478565b9350604086013567ffffffffffffffff80821115613b13578283fd5b613b1f89838a0161399f565b94506060880135915080821115613b34578283fd5b613b4089838a0161399f565b93506080880135915080821115613b55578283fd5b50613b6288828901613a22565b9150509295509295909350565b60008060008060808587031215613b84578384fd5b8435613b8f81614478565b93506020850135613b9f81614478565b925060408501359150606085013567ffffffffffffffff811115613bc1578182fd5b613bcd87828801613a22565b91505092959194509250565b600080600080600060a08688031215613bf0578081fd5b8535613bfb81614478565b94506020860135613c0b81614478565b93506040860135925060608601359150608086013567ffffffffffffffff811115613c34578182fd5b613b6288828901613a22565b60008060408385031215613c52578182fd5b8235613c5d81614478565b946020939093013593505050565b600060208284031215613c7c578081fd5b81518015158114611002578182fd5b600060208284031215613c9c578081fd5b81356001600160e01b031981168114611002578182fd5b600060208284031215613cc4578081fd5b5035919050565b600060208284031215613cdc578081fd5b5051919050565b600080600060408486031215613cf7578081fd5b83359250602084013567ffffffffffffffff811115613d14578182fd5b613d208682870161395c565b9497909650939450505050565b600080600080600060608688031215613d44578283fd5b85359450602086013567ffffffffffffffff80821115613d62578485fd5b613d6e89838a0161395c565b90965094506040880135915080821115613d86578283fd5b50613d938882890161395c565b969995985093965092949392505050565b60008060008060008060808789031215613dbc578384fd5b86359550602087013567ffffffffffffffff80821115613dda578586fd5b613de68a838b0161395c565b90975095506040890135915080821115613dfe578283fd5b50613e0b89828a0161395c565b979a9699509497949695606090950135949350505050565b60008060008060608587031215613e38578182fd5b84359350602085013567ffffffffffffffff811115613e55578283fd5b613e618782880161395c565b9598909750949560400135949350505050565b600080600080600060808688031215613e8b578283fd5b85359450602086013567ffffffffffffffff811115613ea8578384fd5b613eb48882890161395c565b9699909850959660408101359660609091013595509350505050565b600080600080600060a08688031215613ee7578283fd5b85359450602086013567ffffffffffffffff80821115613f05578485fd5b613f1189838a0161399f565b95506040880135915080821115613f26578485fd5b50613f338882890161399f565b935050606086013591506080860135613f4b81614478565b809150509295509295909350565b600080600080600060a08688031215613f70578283fd5b85359450602086013567ffffffffffffffff80821115613f8e578485fd5b613f9a89838a0161399f565b95506040880135915080821115613faf578485fd5b50613fbc8882890161399f565b9598949750949560608101359550608001359392505050565b60008060008060008060c08789031215613fed578384fd5b86359550602087013567ffffffffffffffff8082111561400b578586fd5b6140178a838b0161399f565b9650604089013591508082111561402c578586fd5b5061403989828a0161399f565b945050606087013592506080870135915060a087013561405881614478565b809150509295509295509295565b6000806000806080858703121561407b578182fd5b84359350602085013567ffffffffffffffff811115614098578283fd5b6140a48782880161399f565b9350506040850135915060608501356140bc81614478565b939692955090935050565b600080600080600060a086880312156140de578283fd5b85359450602086013567ffffffffffffffff8111156140fb578384fd5b6141078882890161399f565b94505060408601359250606086013591506080860135613f4b81614478565b60008060006060848603121561413a578081fd5b8351925060208401519150604084015190509250925092565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614184578081fd5b8260051b80836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b838110156141cf578151875295820195908201906001016141b3565b509495945050505050565b600082516141ec818460208701614405565b9190910192915050565b60006001600160a01b03808916835280881660208401525060a0604083015261422360a083018688614153565b8281036060840152614236818587614153565b8381036080909401939093525081526020019695505050505050565b60006001600160a01b03808716835280861660208401525060a0604083015261427e60a08301856141a0565b828103606084015261429081856141a0565b838103608090940193909352508152602001949350505050565b6060815260006142be606083018789614153565b82810360208401526142d1818688614153565b9150506001600160a01b03831660408301529695505050505050565b606081526000614301606083018688614153565b828103602084015261431381866141a0565b9150506001600160a01b038316604083015295945050505050565b60408152600061434160408301856141a0565b828103602084015261098781856141a0565b6020815260008251806020840152614372816040850160208701614405565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156143af576143af614462565b604052919050565b600082198211156143ca576143ca61444c565b500190565b60008160001904831182151516156143e9576143e961444c565b500290565b6000828210156144005761440061444c565b500390565b60005b83811015614420578181015183820152602001614408565b8381111561268f5750506000910152565b60006000198214156144455761444561444c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e9457600080fdfea2646970667358221220e707b4c08376887d0b8025e542902aa6a17c75c65774f599a5b4af9dbfe7d55464736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101dc5760003560e01c806384d5a23211610102578063ad402dfc11610095578063c46c4e8a11610064578063c46c4e8a14610648578063cd9d37b71461065e578063f23a6e611461067e578063f2fde38b146106c357600080fd5b8063ad402dfc146105a9578063ad5c4648146105bc578063bc197c81146105f0578063bdd8172b1461063557600080fd5b806392054f8b116100d157806392054f8b146105335780639bf1401c146105535780639d2cbed014610573578063a7b128461461059357600080fd5b806384d5a232146104c0578063881b2f2d146104e05780638da5cb5b146105005780639199fc9c1461051e57600080fd5b80634a5ff0611161017a578063715018a611610149578063715018a61461044b578063739697751461046057806374a1b0b014610480578063839006f2146104a057600080fd5b80634a5ff061146103b057806353b573bf146103d05780635ee50f88146103e35780636d13582c1461041757600080fd5b806311ad9d38116101b657806311ad9d38146102e8578063150b7a02146103205780631809d2c21461037d5780631a6907cd1461039d57600080fd5b806301ffc9a714610265578063021001551461029a57806310cde786146102c857600080fd5b3661026057336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461025e5760405162461bcd60e51b815260206004820152600960248201527f4f6e6c792057455448000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b005b600080fd5b34801561027157600080fd5b50610285610280366004613c8b565b6106e3565b60405190151581526020015b60405180910390f35b3480156102a657600080fd5b506102ba6102b5366004613fd5565b61074c565b604051908152602001610291565b3480156102d457600080fd5b506102ba6102e3366004613f59565b6108e6565b3480156102f457600080fd5b50600454610308906001600160a01b031681565b6040516001600160a01b039091168152602001610291565b34801561032c57600080fd5b5061036461033b366004613b6f565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516001600160e01b03199091168152602001610291565b34801561038957600080fd5b506102ba610398366004613e74565b610900565b6102ba6103ab366004613e23565b610944565b3480156103bc57600080fd5b506102ba6103cb3660046140c7565b610990565b6102ba6103de366004613da4565b610b28565b3480156103ef57600080fd5b506103087f000000000000000000000000000000000000000000000000000000000000000081565b34801561042357600080fd5b506103087f000000000000000000000000000000000000000000000000000000000000000081565b34801561045757600080fd5b5061025e610ba7565b34801561046c57600080fd5b5061025e61047b366004613cb3565b610c1c565b34801561048c57600080fd5b50600354610308906001600160a01b031681565b3480156104ac57600080fd5b5061025e6104bb366004613a8d565b610ccd565b3480156104cc57600080fd5b5061025e6104db366004613cb3565b610e97565b3480156104ec57600080fd5b506102856104fb366004613c40565b610f48565b34801561050c57600080fd5b506000546001600160a01b0316610308565b34801561052a57600080fd5b5061025e611009565b34801561053f57600080fd5b5061025e61054e366004613a8d565b6112cd565b34801561055f57600080fd5b50600254610308906001600160a01b031681565b34801561057f57600080fd5b5061025e61058e366004613d2d565b611365565b34801561059f57600080fd5b506102ba60055481565b6102ba6105b7366004613ed0565b61199d565b3480156105c857600080fd5b506103087f000000000000000000000000000000000000000000000000000000000000000081565b3480156105fc57600080fd5b5061036461060b366004613ac5565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6102ba610643366004614066565b611c04565b34801561065457600080fd5b506102ba60065481565b34801561066a57600080fd5b5061025e610679366004613ce3565b611e7b565b34801561068a57600080fd5b50610364610699366004613bd9565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b3480156106cf57600080fd5b5061025e6106de366004613a8d565b6123bd565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061074657507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6000600260015414156107a15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610255565b60026001556001600160a01b038216158015906107c757506001600160a01b0382163014155b6107d057600080fd5b6108056001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612657565b600080610816898989898989612695565b92509250506000828661082991906143ee565b905080156108d55760405163a9059cbb60e01b81526001600160a01b038681166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561089b57600080fd5b505af11580156108af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d39190613c6b565b505b506001805598975050505050505050565b60006108f686868686863361074c565b9695505050505050565b60006108f686868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250889250879150339050610990565b600061098785858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250339150611c049050565b95945050505050565b6000600260015414156109e55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610255565b60026001556001600160a01b03821615801590610a0b57506001600160a01b0382163014155b610a1457600080fd5b610a496001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612657565b600080610a5988888888886129ed565b925092505060008286610a6c91906143ee565b90508015610b185760405163a9059cbb60e01b81526001600160a01b038681166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b158015610ade57600080fd5b505af1158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b169190613c6b565b505b5060018055979650505050505050565b6000610b9c8787878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a92508991829185019084908082843760009201919091525088925033915061199d9050565b979650505050505050565b33610bba6000546001600160a01b031690565b6001600160a01b031614610c105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610255565b610c1a6000612ce9565b565b33610c2f6000546001600160a01b031690565b6001600160a01b031614610c855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610255565b62127500811115610cc85760405162461bcd60e51b815260206004820152600d60248201526c4c6f636b20746f6f206c6f6e6760981b6044820152606401610255565b600655565b33610ce06000546001600160a01b031690565b6001600160a01b031614610d365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610255565b6001600160a01b038116610e0657604051600090339047908381818185875af1925050503d8060008114610d86576040519150601f19603f3d011682016040523d82523d6000602084013e610d8b565b606091505b5050905080610e025760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610255565b5050565b6040516370a0823160e01b8152306004820152610e949033906001600160a01b038416906370a082319060240160206040518083038186803b158015610e4b57600080fd5b505afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e839190613ccb565b6001600160a01b0384169190612d46565b50565b33610eaa6000546001600160a01b031690565b6001600160a01b031614610f005760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610255565b62093a80811115610f435760405162461bcd60e51b815260206004820152600d60248201526c4c6f636b20746f6f206c6f6e6760981b6044820152606401610255565b600555565b6004546000906001600160a01b0316610f6357506000610746565b600480546040517f81e97b660000000000000000000000000000000000000000000000000000000081526001600160a01b0386811693820193909352602481018590529116906381e97b669060440160206040518083038186803b158015610fca57600080fd5b505afa158015610fde573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110029190613c6b565b9392505050565b6002546001600160a01b0316158061102a57506003546001600160a01b0316155b6110765760405162461bcd60e51b815260206004820152600860248201527f6e6f74207a65726f0000000000000000000000000000000000000000000000006044820152606401610255565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630d43e8ad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110cf57600080fd5b505afa1580156110e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111079190613aa9565b6001600160a01b0316639bf1401c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561113f57600080fd5b505afa158015611153573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111779190613aa9565b600260006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630d43e8ad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f657600080fd5b505afa15801561120a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122e9190613aa9565b6001600160a01b03166374a1b0b06040518163ffffffff1660e01b815260040160206040518083038186803b15801561126657600080fd5b505afa15801561127a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129e9190613aa9565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b336112e06000546001600160a01b031690565b6001600160a01b0316146113365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610255565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b828181146113b55760405162461bcd60e51b815260206004820152601060248201527f4e6f7420657175616c206c656e677468000000000000000000000000000000006044820152606401610255565b6000805b82811015611405578484828181106113e157634e487b7160e01b600052603260045260246000fd5b90506020020135826113f391906143b7565b91506113fe81614431565b90506113b9565b506040516340d1b7db60e11b8152600481018890526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906381a36fb69060240160206040518083038186803b15801561146957600080fd5b505afa15801561147d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a19190613aa9565b905060006114af338a610f48565b6114bb576006546114be565b60005b6003549091506001600160a01b0316632699f55a8a6114e5670de0b6b3a7640000876143cf565b6040516001600160e01b031960e085901b1681526004810192909252602482015233604482015260648101849052608401602060405180830381600087803b15801561153057600080fd5b505af1158015611544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115689190613ccb565b5060035460405162d3f20f60e21b8152600481018b90526000916001600160a01b03169063034fc83c9060240160206040518083038186803b1580156115ad57600080fd5b505afa1580156115c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e59190613aa9565b6040516370a0823160e01b81526001600160a01b0380831660048301529192506000918516906370a082319060240160206040518083038186803b15801561162c57600080fd5b505afa158015611640573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116649190613ccb565b90506000846001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a157600080fd5b505afa1580156116b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d99190613aa9565b9050806001600160a01b0316632eb2c2d633308e8e8e8e6040518763ffffffff1660e01b8152600401611711969594939291906141f6565b600060405180830381600087803b15801561172b57600080fd5b505af115801561173f573d6000803e3d6000fd5b505060405163a22cb46560e01b81526001600160a01b038881166004830152600160248301528416925063a22cb4659150604401600060405180830381600087803b15801561178d57600080fd5b505af11580156117a1573d6000803e3d6000fd5b5050604051635882017560e11b81526001600160a01b038816925063b10402ea91506117d9908e908e908e908e908a906004016142aa565b602060405180830381600087803b1580156117f357600080fd5b505af1158015611807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182b9190613ccb565b506040516370a0823160e01b81526001600160a01b038481166004830152600091908716906370a082319060240160206040518083038186803b15801561187157600080fd5b505afa158015611885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a99190613ccb565b90506118bd670de0b6b3a7640000886143cf565b6118c790846143b7565b81146119155760405162461bcd60e51b815260206004820152601860248201527f496e636f72726563742076746f6b656e73206d696e74656400000000000000006044820152606401610255565b600061192186426143b7565b90507f9f69538b20901013ea360bae2dce4079d45308fcfed02b3f0768c9f70f4ba9c08e8e8e9050600084336040516119859594939291909485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b60405180910390a15050505050505050505050505050565b6000600260015414156119f25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610255565b60026001556001600160a01b03821615801590611a1857506001600160a01b0382163014155b611a2157600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611a7c57600080fd5b505af1158015611a90573d6000803e3d6000fd5b5050505050600080611aa6888888883489612695565b925092505060008234611ab991906143ee565b90508015610b1857604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611b2357600080fd5b505af1158015611b37573d6000803e3d6000fd5b505050506000856001600160a01b03168260405160006040518083038185875af1925050503d8060008114611b88576040519150601f19603f3d011682016040523d82523d6000602084013e611b8d565b606091505b5050905080610b165760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610255565b600060026001541415611c595760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610255565b60026001556001600160a01b03821615801590611c7f57506001600160a01b0382163014155b611c8857600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611ce357600080fd5b505af1158015611cf7573d6000803e3d6000fd5b5050505050600080611d0c87878734886129ed565b925092505060008234611d1f91906143ee565b90508015611e6c57604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611d8957600080fd5b505af1158015611d9d573d6000803e3d6000fd5b505050506000856001600160a01b03168260405160006040518083038185875af1925050503d8060008114611dee576040519150601f19603f3d011682016040523d82523d6000602084013e611df3565b606091505b5050905080611e6a5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610255565b505b50600180559695505050505050565b6040516340d1b7db60e11b81526004810184905281906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906381a36fb69060240160206040518083038186803b158015611ee057600080fd5b505afa158015611ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f189190613aa9565b90506000611f263387610f48565b611f3257600654611f35565b60005b6003549091506001600160a01b0316632699f55a87611f5c670de0b6b3a7640000876143cf565b6040516001600160e01b031960e085901b1681526004810192909252602482015233604482015260648101849052608401602060405180830381600087803b158015611fa757600080fd5b505af1158015611fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdf9190613ccb565b5060035460405162d3f20f60e21b8152600481018890526000916001600160a01b03169063034fc83c9060240160206040518083038186803b15801561202457600080fd5b505afa158015612038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205c9190613aa9565b6040516370a0823160e01b81526001600160a01b0380831660048301529192506000918516906370a082319060240160206040518083038186803b1580156120a357600080fd5b505afa1580156120b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120db9190613ccb565b60408051600080825260208201909252919250506000856001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561212a57600080fd5b505afa15801561213e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121629190613aa9565b90508760005b818110156121e2576121a1838c8c8481811061219457634e487b7160e01b600052603260045260246000fd5b905060200201358a612d76565b6121d283898d8d858181106121c657634e487b7160e01b600052603260045260246000fd5b905060200201356130a6565b6121db81614431565b9050612168565b50604051635882017560e11b81526001600160a01b0388169063b10402ea90612215908d908d9088908b906004016142ed565b602060405180830381600087803b15801561222f57600080fd5b505af1158015612243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122679190613ccb565b506040516370a0823160e01b81526001600160a01b038681166004830152600091908916906370a082319060240160206040518083038186803b1580156122ad57600080fd5b505afa1580156122c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e59190613ccb565b90506122f9670de0b6b3a76400008a6143cf565b61230390866143b7565b81146123515760405162461bcd60e51b815260206004820152601860248201527f496e636f72726563742076746f6b656e73206d696e74656400000000000000006044820152606401610255565b600061235d88426143b7565b604080518f8152602081018e90526000818301526060810183905233608082015290519192507f9f69538b20901013ea360bae2dce4079d45308fcfed02b3f0768c9f70f4ba9c0919081900360a00190a150505050505050505050505050565b336123d06000546001600160a01b031690565b6001600160a01b0316146124265760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610255565b6001600160a01b0381166124a25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610255565b610e9481612ce9565b80158061254d57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561251357600080fd5b505afa158015612527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254b9190613ccb565b155b6125bf5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610255565b6040516001600160a01b03831660248201526044810182905261263b9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261317a565b505050565b606061264f848460008561325f565b949350505050565b6040516001600160a01b038085166024830152831660448201526064810182905261268f9085906323b872dd60e01b90608401612604565b50505050565b6040516306df336560e51b8152306004820152600090819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dbe66ca09060240160206040518083038186803b1580156126fb57600080fd5b505afa15801561270f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127339190613c6b565b61273c57600080fd5b6040516340d1b7db60e11b8152600481018a90526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906381a36fb69060240160206040518083038186803b15801561279f57600080fd5b505afa1580156127b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d79190613aa9565b90506000816001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561281457600080fd5b505afa158015612828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284c9190613aa9565b6040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081529091506001600160a01b03821690632eb2c2d69061289a90339030908f908f90600401614252565b600060405180830381600087803b1580156128b457600080fd5b505af11580156128c8573d6000803e3d6000fd5b505060405163a22cb46560e01b81526001600160a01b038581166004830152600160248301528416925063a22cb4659150604401600060405180830381600087803b15801561291657600080fd5b505af115801561292a573d6000803e3d6000fd5b5050604051630f57464360e21b8152600092506001600160a01b0385169150633d5d190c9061295f908e908e9060040161432e565b602060405180830381600087803b15801561297957600080fd5b505af115801561298d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b19190613ccb565b905060006129c7670de0b6b3a7640000836143cf565b90506129d78d85838d8d8d613393565b9650965096505050505096509650969350505050565b6040516306df336560e51b8152306004820152600090819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dbe66ca09060240160206040518083038186803b158015612a5357600080fd5b505afa158015612a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8b9190613c6b565b612a9457600080fd5b6040516340d1b7db60e11b8152600481018990526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906381a36fb69060240160206040518083038186803b158015612af757600080fd5b505afa158015612b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2f9190613aa9565b90506000816001600160a01b0316631ba46cfd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b6c57600080fd5b505afa158015612b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba49190613aa9565b895190915060005b81811015612c2a57612be6838c8381518110612bd857634e487b7160e01b600052603260045260246000fd5b602002602001015186612d76565b612c1883858d8481518110612c0b57634e487b7160e01b600052603260045260246000fd5b60200260200101516130a6565b80612c2281614431565b915050612bac565b50604051630f57464360e21b81526060906001600160a01b03851690633d5d190c90612c5c908e90859060040161432e565b602060405180830381600087803b158015612c7657600080fd5b505af1158015612c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cae9190613ccb565b506000612cc3670de0b6b3a7640000846143cf565b9050612cd38d86838e8e8e613393565b9750975097505050505050955095509592505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03831660248201526044810182905261263b90849063a9059cbb60e01b90606401612604565b7306012c8cf97bead5deae237070f9587f8e7a266d73b47e3cd837ddf8e4c57f05d70ab865de6e193bbb60606001600160a01b038616831415612e06576040513360248201526001600160a01b03851660448201526064810186905260840160408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790529050613019565b816001600160a01b0316866001600160a01b03161415612fb157600085604051602401612e3591815260200190565b60408051601f198184030181529181526020820180516001600160e01b03167f58178168000000000000000000000000000000000000000000000000000000001790525190915060009081906001600160a01b038a1690612e979085906141da565b600060405180830381855afa9150503d8060008114612ed2576040519150601f19603f3d011682016040523d82523d6000602084013e612ed7565b606091505b5091509150600081806020019051810190612ef29190613aa9565b9050828015612f0957506001600160a01b03811633145b612f555760405162461bcd60e51b815260206004820152601160248201527f4e6f7420746865204e4654206f776e65720000000000000000000000000000006044820152606401610255565b604051602481018a905260440160408051601f198184030181529190526020810180516001600160e01b03167f8264fe980000000000000000000000000000000000000000000000000000000017905294506130199350505050565b6040513360248201526001600160a01b03851660448201526064810186905260840160408051601f198184030181529190526020810180516001600160e01b03167f42842e0e0000000000000000000000000000000000000000000000000000000017905290505b600080876001600160a01b03168360405161303491906141da565b6000604051808303816000865af19150503d8060008114613071576040519150601f19603f3d011682016040523d82523d6000602084013e613076565b606091505b509150915081819061309b5760405162461bcd60e51b81526004016102559190614353565b505050505050505050565b7306012c8cf97bead5deae237070f9587f8e7a266d73b47e3cd837ddf8e4c57f05d70ab865de6e193bbb60606001600160a01b0386168314156130eb57505050505050565b816001600160a01b0316866001600160a01b031614156131725760405160248101859052600060448201526001600160a01b038616606482015260840160408051601f198184030181529190526020810180516001600160e01b03167fbf31196f000000000000000000000000000000000000000000000000000000001790529050613019565b505050505050565b60006131cf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126409092919063ffffffff16565b80519091501561263b57808060200190518101906131ed9190613c6b565b61263b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610255565b6060824710156132d75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610255565b843b6133255760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610255565b600080866001600160a01b0316858760405161334191906141da565b60006040518083038185875af1925050503d806000811461337e576040519150601f19603f3d011682016040523d82523d6000602084013e613383565b606091505b5091509150610b9c828286613695565b600080806133cb6001600160a01b0389167f0000000000000000000000000000000000000000000000000000000000000000896124ab565b6040517fe8e337000000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015260448201899052606482018790526084820189905260a482018890523060c48301524260e4830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e8e337009061010401606060405180830381600087803b1580156134a157600080fd5b505af11580156134b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d99190614126565b600254929550909350915061352c906001600160a01b03168261351c8e7f00000000000000000000000000000000000000000000000000000000000000006136ce565b6001600160a01b031691906124ab565b6000613538338e610f48565b61354457600554613547565b60005b9050600260009054906101000a90046001600160a01b03166001600160a01b0316636c9b95888e8a85856040518563ffffffff1660e01b81526004016135af94939291909384526001600160a01b039290921660208401526040830152606082015260800190565b600060405180830381600087803b1580156135c957600080fd5b505af11580156135dd573d6000803e3d6000fd5b505050506000848c6135ef91906143ee565b9050801561360b5761360b6001600160a01b038e168a83612d46565b600061361783426143b7565b90507f9f69538b20901013ea360bae2dce4079d45308fcfed02b3f0768c9f70f4ba9c08f8e86848e6040516136779594939291909485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b60405180910390a150939d929c50909a509098505050505050505050565b606083156136a4575081611002565b8251156136b45782518084602001fd5b8160405162461bcd60e51b81526004016102559190614353565b60008060006136dd858561384c565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561373a57600080fd5b505afa15801561374e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137729190613aa9565b6040516bffffffffffffffffffffffff19606085811b8216602084015284901b1660348201526048016040516020818303038152906040528051906020012060405160200161382b9291907fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6bffffffffffffffffffffffff1916600183015260158201527fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303603582015260550190565b60408051601f19818403018152919052805160209091012095945050505050565b600080826001600160a01b0316846001600160a01b031614156138d75760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152608401610255565b826001600160a01b0316846001600160a01b0316106138f75782846138fa565b83835b90925090506001600160a01b0382166139555760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606401610255565b9250929050565b60008083601f84011261396d578182fd5b50813567ffffffffffffffff811115613984578182fd5b6020830191508360208260051b850101111561395557600080fd5b600082601f8301126139af578081fd5b8135602067ffffffffffffffff8211156139cb576139cb614462565b8160051b6139da828201614386565b8381528281019086840183880185018910156139f4578687fd5b8693505b85841015613a165780358352600193909301929184019184016139f8565b50979650505050505050565b600082601f830112613a32578081fd5b813567ffffffffffffffff811115613a4c57613a4c614462565b613a5f601f8201601f1916602001614386565b818152846020838601011115613a73578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215613a9e578081fd5b813561100281614478565b600060208284031215613aba578081fd5b815161100281614478565b600080600080600060a08688031215613adc578081fd5b8535613ae781614478565b94506020860135613af781614478565b9350604086013567ffffffffffffffff80821115613b13578283fd5b613b1f89838a0161399f565b94506060880135915080821115613b34578283fd5b613b4089838a0161399f565b93506080880135915080821115613b55578283fd5b50613b6288828901613a22565b9150509295509295909350565b60008060008060808587031215613b84578384fd5b8435613b8f81614478565b93506020850135613b9f81614478565b925060408501359150606085013567ffffffffffffffff811115613bc1578182fd5b613bcd87828801613a22565b91505092959194509250565b600080600080600060a08688031215613bf0578081fd5b8535613bfb81614478565b94506020860135613c0b81614478565b93506040860135925060608601359150608086013567ffffffffffffffff811115613c34578182fd5b613b6288828901613a22565b60008060408385031215613c52578182fd5b8235613c5d81614478565b946020939093013593505050565b600060208284031215613c7c578081fd5b81518015158114611002578182fd5b600060208284031215613c9c578081fd5b81356001600160e01b031981168114611002578182fd5b600060208284031215613cc4578081fd5b5035919050565b600060208284031215613cdc578081fd5b5051919050565b600080600060408486031215613cf7578081fd5b83359250602084013567ffffffffffffffff811115613d14578182fd5b613d208682870161395c565b9497909650939450505050565b600080600080600060608688031215613d44578283fd5b85359450602086013567ffffffffffffffff80821115613d62578485fd5b613d6e89838a0161395c565b90965094506040880135915080821115613d86578283fd5b50613d938882890161395c565b969995985093965092949392505050565b60008060008060008060808789031215613dbc578384fd5b86359550602087013567ffffffffffffffff80821115613dda578586fd5b613de68a838b0161395c565b90975095506040890135915080821115613dfe578283fd5b50613e0b89828a0161395c565b979a9699509497949695606090950135949350505050565b60008060008060608587031215613e38578182fd5b84359350602085013567ffffffffffffffff811115613e55578283fd5b613e618782880161395c565b9598909750949560400135949350505050565b600080600080600060808688031215613e8b578283fd5b85359450602086013567ffffffffffffffff811115613ea8578384fd5b613eb48882890161395c565b9699909850959660408101359660609091013595509350505050565b600080600080600060a08688031215613ee7578283fd5b85359450602086013567ffffffffffffffff80821115613f05578485fd5b613f1189838a0161399f565b95506040880135915080821115613f26578485fd5b50613f338882890161399f565b935050606086013591506080860135613f4b81614478565b809150509295509295909350565b600080600080600060a08688031215613f70578283fd5b85359450602086013567ffffffffffffffff80821115613f8e578485fd5b613f9a89838a0161399f565b95506040880135915080821115613faf578485fd5b50613fbc8882890161399f565b9598949750949560608101359550608001359392505050565b60008060008060008060c08789031215613fed578384fd5b86359550602087013567ffffffffffffffff8082111561400b578586fd5b6140178a838b0161399f565b9650604089013591508082111561402c578586fd5b5061403989828a0161399f565b945050606087013592506080870135915060a087013561405881614478565b809150509295509295509295565b6000806000806080858703121561407b578182fd5b84359350602085013567ffffffffffffffff811115614098578283fd5b6140a48782880161399f565b9350506040850135915060608501356140bc81614478565b939692955090935050565b600080600080600060a086880312156140de578283fd5b85359450602086013567ffffffffffffffff8111156140fb578384fd5b6141078882890161399f565b94505060408601359250606086013591506080860135613f4b81614478565b60008060006060848603121561413a578081fd5b8351925060208401519150604084015190509250925092565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614184578081fd5b8260051b80836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b838110156141cf578151875295820195908201906001016141b3565b509495945050505050565b600082516141ec818460208701614405565b9190910192915050565b60006001600160a01b03808916835280881660208401525060a0604083015261422360a083018688614153565b8281036060840152614236818587614153565b8381036080909401939093525081526020019695505050505050565b60006001600160a01b03808716835280861660208401525060a0604083015261427e60a08301856141a0565b828103606084015261429081856141a0565b838103608090940193909352508152602001949350505050565b6060815260006142be606083018789614153565b82810360208401526142d1818688614153565b9150506001600160a01b03831660408301529695505050505050565b606081526000614301606083018688614153565b828103602084015261431381866141a0565b9150506001600160a01b038316604083015295945050505050565b60408152600061434160408301856141a0565b828103602084015261098781856141a0565b6020815260008251806020840152614372816040850160208701614405565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156143af576143af614462565b604052919050565b600082198211156143ca576143ca61444c565b500190565b60008160001904831182151516156143e9576143e961444c565b500290565b6000828210156144005761440061444c565b500390565b60005b83811015614420578181015183820152602001614408565b8381111561268f5750506000910152565b60006000198214156144455761444561444c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e9457600080fdfea2646970667358221220e707b4c08376887d0b8025e542902aa6a17c75c65774f599a5b4af9dbfe7d55464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7239,
        "contract": "contracts/solidity/NFTXStakingZap.sol:NFTXStakingZap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7207,
        "contract": "contracts/solidity/NFTXStakingZap.sol:NFTXStakingZap",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7353,
        "contract": "contracts/solidity/NFTXStakingZap.sol:NFTXStakingZap",
        "label": "lpStaking",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(INFTXLPStaking)13878"
      },
      {
        "astId": 7356,
        "contract": "contracts/solidity/NFTXStakingZap.sol:NFTXStakingZap",
        "label": "inventoryStaking",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(INFTXInventoryStaking)13727"
      },
      {
        "astId": 7365,
        "contract": "contracts/solidity/NFTXStakingZap.sol:NFTXStakingZap",
        "label": "timelockExcludeList",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ITimelockExcludeList)14671"
      },
      {
        "astId": 7368,
        "contract": "contracts/solidity/NFTXStakingZap.sol:NFTXStakingZap",
        "label": "lpLockTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7371,
        "contract": "contracts/solidity/NFTXStakingZap.sol:NFTXStakingZap",
        "label": "inventoryLockTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(INFTXInventoryStaking)13727": {
        "encoding": "inplace",
        "label": "contract INFTXInventoryStaking",
        "numberOfBytes": "20"
      },
      "t_contract(INFTXLPStaking)13878": {
        "encoding": "inplace",
        "label": "contract INFTXLPStaking",
        "numberOfBytes": "20"
      },
      "t_contract(ITimelockExcludeList)14671": {
        "encoding": "inplace",
        "label": "contract ITimelockExcludeList",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}