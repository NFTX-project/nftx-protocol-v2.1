{
  "address": "0xc6d7E3d586Dc53031aC7D452477c16CDf45d14ee",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "AddFeeReceiver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "PauseDistribution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "RemoveFeeReceiver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isGuardian",
          "type": "bool"
        }
      ],
      "name": "SetIsGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "SetPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newReceiver",
          "type": "address"
        }
      ],
      "name": "UpdateFeeReceiverAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "UpdateFeeReceiverAlloc",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newInventoryStaking",
          "type": "address"
        }
      ],
      "name": "UpdateInventoryStakingAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLPStaking",
          "type": "address"
        }
      ],
      "name": "UpdateLPStakingAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "UpdateNFTXVaultFactory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "UpdateTreasuryAddress",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpStaking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "__SimpleFeeDistributor__init__",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isContract",
          "type": "bool"
        }
      ],
      "name": "addReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_receiverIdx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isContract",
          "type": "bool"
        }
      ],
      "name": "changeReceiverAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_receiverIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "changeReceiverAlloc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feeReceivers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isContract",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "initializeVaultReceivers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inventoryStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftxVaultFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "onlyOwnerIfPaused",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_pause",
          "type": "bool"
        }
      ],
      "name": "pauseFeeDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_receiverIdx",
          "type": "uint256"
        }
      ],
      "name": "removeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inventoryStaking",
          "type": "address"
        }
      ],
      "name": "setInventoryStakingAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isGuardian",
          "type": "bool"
        }
      ],
      "name": "setIsGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpStaking",
          "type": "address"
        }
      ],
      "name": "setLPStakingAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "setNFTXVaultFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc46860e5aae5d44fd4bf738a274981261822898475d7bd3aa2d10bc656cc1b29",
  "receipt": {
    "to": null,
    "from": "0xDEA9196Dcdd2173D6E369c2AcC0faCc83fD9346a",
    "contractAddress": "0xc6d7E3d586Dc53031aC7D452477c16CDf45d14ee",
    "transactionIndex": 104,
    "gasUsed": "2234621",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x923ed74e6da46323a96afb8f6dce41a68b8c6c184de05a6513f80ce929ffc347",
    "transactionHash": "0xc46860e5aae5d44fd4bf738a274981261822898475d7bd3aa2d10bc656cc1b29",
    "logs": [],
    "blockNumber": 4291107,
    "cumulativeGasUsed": "20836039",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2d454ec0cd5e2ba69d4608440183e71e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"AddFeeReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PauseDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"RemoveFeeReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isGuardian\",\"type\":\"bool\"}],\"name\":\"SetIsGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"UpdateFeeReceiverAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"UpdateFeeReceiverAlloc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newInventoryStaking\",\"type\":\"address\"}],\"name\":\"UpdateInventoryStakingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLPStaking\",\"type\":\"address\"}],\"name\":\"UpdateLPStakingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"UpdateNFTXVaultFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"UpdateTreasuryAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"__SimpleFeeDistributor__init__\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isContract\",\"type\":\"bool\"}],\"name\":\"addReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_receiverIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isContract\",\"type\":\"bool\"}],\"name\":\"changeReceiverAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_receiverIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"changeReceiverAlloc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeReceivers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isContract\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"initializeVaultReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inventoryStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftxVaultFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"onlyOwnerIfPaused\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pauseFeeDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_receiverIdx\",\"type\":\"uint256\"}],\"name\":\"removeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inventoryStaking\",\"type\":\"address\"}],\"name\":\"setInventoryStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isGuardian\",\"type\":\"bool\"}],\"name\":\"setIsGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpStaking\",\"type\":\"address\"}],\"name\":\"setLPStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setNFTXVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/solidity/NFTXSimpleFeeDistributor.sol\":\"NFTXSimpleFeeDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/solidity/NFTXSimpleFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./util/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./util/PausableUpgradeable.sol\\\";\\nimport \\\"./util/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./interface/INFTXSimpleFeeDistributor.sol\\\";\\nimport \\\"./interface/INFTXVaultFactory.sol\\\";\\nimport \\\"./interface/INFTXLPStaking.sol\\\";\\nimport \\\"./interface/INFTXInventoryStaking.sol\\\";\\n\\ncontract NFTXSimpleFeeDistributor is\\n    INFTXSimpleFeeDistributor,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    bool public distributionPaused;\\n\\n    address public override nftxVaultFactory;\\n    address public override lpStaking;\\n    address public override treasury;\\n\\n    // Total allocation points per vault.\\n    uint256 public override allocTotal;\\n    FeeReceiver[] public feeReceivers;\\n\\n    address public override inventoryStaking;\\n\\n    event UpdateTreasuryAddress(address newTreasury);\\n    event UpdateLPStakingAddress(address newLPStaking);\\n    event UpdateInventoryStakingAddress(address newInventoryStaking);\\n    event UpdateNFTXVaultFactory(address factory);\\n    event PauseDistribution(bool paused);\\n\\n    event AddFeeReceiver(address receiver, uint256 allocPoint);\\n    event UpdateFeeReceiverAlloc(address receiver, uint256 allocPoint);\\n    event UpdateFeeReceiverAddress(address oldReceiver, address newReceiver);\\n    event RemoveFeeReceiver(address receiver);\\n\\n    function __SimpleFeeDistributor__init__(\\n        address _lpStaking,\\n        address _treasury\\n    ) public override initializer {\\n        __Pausable_init();\\n        setTreasuryAddress(_treasury);\\n        setLPStakingAddress(_lpStaking);\\n\\n        _addReceiver(0.8 ether, lpStaking, true);\\n    }\\n\\n    function distribute(uint256 vaultId)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n    {\\n        require(nftxVaultFactory != address(0));\\n        address _vault = INFTXVaultFactory(nftxVaultFactory).vault(vaultId);\\n\\n        uint256 tokenBalance = IERC20Upgradeable(_vault).balanceOf(\\n            address(this)\\n        );\\n\\n        if (distributionPaused || allocTotal == 0) {\\n            IERC20Upgradeable(_vault).safeTransfer(treasury, tokenBalance);\\n            return;\\n        }\\n\\n        uint256 length = feeReceivers.length;\\n        uint256 leftover;\\n        for (uint256 i; i < length; ++i) {\\n            FeeReceiver memory _feeReceiver = feeReceivers[i];\\n            uint256 amountToSend = leftover +\\n                ((tokenBalance * _feeReceiver.allocPoint) / allocTotal);\\n            uint256 currentTokenBalance = IERC20Upgradeable(_vault).balanceOf(\\n                address(this)\\n            );\\n            amountToSend = amountToSend > currentTokenBalance\\n                ? currentTokenBalance\\n                : amountToSend;\\n            bool complete = _sendForReceiver(\\n                _feeReceiver,\\n                vaultId,\\n                _vault,\\n                amountToSend\\n            );\\n            if (!complete) {\\n                uint256 remaining = IERC20Upgradeable(_vault).allowance(\\n                    address(this),\\n                    _feeReceiver.receiver\\n                );\\n                IERC20Upgradeable(_vault).safeApprove(_feeReceiver.receiver, 0);\\n                leftover = remaining;\\n            } else {\\n                leftover = 0;\\n            }\\n        }\\n\\n        if (leftover != 0) {\\n            uint256 currentTokenBalance = IERC20Upgradeable(_vault).balanceOf(\\n                address(this)\\n            );\\n            IERC20Upgradeable(_vault).safeTransfer(\\n                treasury,\\n                currentTokenBalance\\n            );\\n        }\\n    }\\n\\n    function addReceiver(\\n        uint256 _allocPoint,\\n        address _receiver,\\n        bool _isContract\\n    ) external virtual override onlyOwner {\\n        _addReceiver(_allocPoint, _receiver, _isContract);\\n    }\\n\\n    function initializeVaultReceivers(uint256 _vaultId) external override {\\n        require(msg.sender == nftxVaultFactory, \\\"FeeReceiver: not factory\\\");\\n        INFTXLPStaking(lpStaking).addPoolForVault(_vaultId);\\n        if (inventoryStaking != address(0))\\n            INFTXInventoryStaking(inventoryStaking).deployXTokenForVault(\\n                _vaultId\\n            );\\n    }\\n\\n    function changeReceiverAlloc(uint256 _receiverIdx, uint256 _allocPoint)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            _receiverIdx < feeReceivers.length,\\n            \\\"FeeDistributor: Out of bounds\\\"\\n        );\\n        FeeReceiver storage feeReceiver = feeReceivers[_receiverIdx];\\n        allocTotal -= feeReceiver.allocPoint;\\n        feeReceiver.allocPoint = _allocPoint;\\n        allocTotal += _allocPoint;\\n        emit UpdateFeeReceiverAlloc(feeReceiver.receiver, _allocPoint);\\n    }\\n\\n    function changeReceiverAddress(\\n        uint256 _receiverIdx,\\n        address _address,\\n        bool _isContract\\n    ) public virtual override onlyOwner {\\n        FeeReceiver storage feeReceiver = feeReceivers[_receiverIdx];\\n        address oldReceiver = feeReceiver.receiver;\\n        feeReceiver.receiver = _address;\\n        feeReceiver.isContract = _isContract;\\n        emit UpdateFeeReceiverAddress(oldReceiver, _address);\\n    }\\n\\n    function removeReceiver(uint256 _receiverIdx)\\n        external\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        uint256 arrLength = feeReceivers.length;\\n        require(_receiverIdx < arrLength, \\\"FeeDistributor: Out of bounds\\\");\\n        emit RemoveFeeReceiver(feeReceivers[_receiverIdx].receiver);\\n        allocTotal -= feeReceivers[_receiverIdx].allocPoint;\\n        // Copy the last element to what is being removed and remove the last element.\\n        feeReceivers[_receiverIdx] = feeReceivers[arrLength - 1];\\n        feeReceivers.pop();\\n    }\\n\\n    function setTreasuryAddress(address _treasury) public override onlyOwner {\\n        require(_treasury != address(0), \\\"Treasury != address(0)\\\");\\n        treasury = _treasury;\\n        emit UpdateTreasuryAddress(_treasury);\\n    }\\n\\n    function setLPStakingAddress(address _lpStaking) public override onlyOwner {\\n        require(_lpStaking != address(0), \\\"LPStaking != address(0)\\\");\\n        lpStaking = _lpStaking;\\n        emit UpdateLPStakingAddress(_lpStaking);\\n    }\\n\\n    function setInventoryStakingAddress(address _inventoryStaking)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        inventoryStaking = _inventoryStaking;\\n        emit UpdateInventoryStakingAddress(_inventoryStaking);\\n    }\\n\\n    function setNFTXVaultFactory(address _factory) external override onlyOwner {\\n        require(\\n            address(nftxVaultFactory) == address(0),\\n            \\\"nftxVaultFactory is immutable\\\"\\n        );\\n        nftxVaultFactory = _factory;\\n        emit UpdateNFTXVaultFactory(_factory);\\n    }\\n\\n    function pauseFeeDistribution(bool _pause) external onlyOwner {\\n        distributionPaused = _pause;\\n        emit PauseDistribution(_pause);\\n    }\\n\\n    function rescueTokens(address _address) external override onlyOwner {\\n        uint256 balance = IERC20Upgradeable(_address).balanceOf(address(this));\\n        IERC20Upgradeable(_address).safeTransfer(msg.sender, balance);\\n    }\\n\\n    function _addReceiver(\\n        uint256 _allocPoint,\\n        address _receiver,\\n        bool _isContract\\n    ) internal virtual {\\n        FeeReceiver memory _feeReceiver = FeeReceiver(\\n            _allocPoint,\\n            _receiver,\\n            _isContract\\n        );\\n        feeReceivers.push(_feeReceiver);\\n        allocTotal += _allocPoint;\\n        emit AddFeeReceiver(_receiver, _allocPoint);\\n    }\\n\\n    function _sendForReceiver(\\n        FeeReceiver memory _receiver,\\n        uint256 _vaultId,\\n        address _vault,\\n        uint256 amountToSend\\n    ) internal virtual returns (bool) {\\n        if (_receiver.isContract) {\\n            IERC20Upgradeable(_vault).safeIncreaseAllowance(\\n                _receiver.receiver,\\n                amountToSend\\n            );\\n\\n            bytes memory payload = abi.encodeWithSelector(\\n                INFTXLPStaking.receiveRewards.selector,\\n                _vaultId,\\n                amountToSend\\n            );\\n            (bool success, ) = address(_receiver.receiver).call(payload);\\n\\n            // If the allowance has not been spent, it means we can pass it forward to next.\\n            return\\n                success &&\\n                IERC20Upgradeable(_vault).allowance(\\n                    address(this),\\n                    _receiver.receiver\\n                ) ==\\n                0;\\n        } else {\\n            IERC20Upgradeable(_vault).safeTransfer(\\n                _receiver.receiver,\\n                amountToSend\\n            );\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf63f2d415030911aef1d2cf46ea766e5674bfd711e09a74d9906ba99d6eb6ed8\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXInventoryStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./INFTXVaultFactory.sol\\\";\\n\\ninterface INFTXInventoryStaking {\\n    function nftxVaultFactory() external view returns (INFTXVaultFactory);\\n\\n    function vaultXToken(uint256 vaultId) external view returns (address);\\n\\n    function xTokenAddr(address baseToken) external view returns (address);\\n\\n    function xTokenShareValue(uint256 vaultId) external view returns (uint256);\\n\\n    function __NFTXInventoryStaking_init(address nftxFactory) external;\\n\\n    function deployXTokenForVault(uint256 vaultId) external;\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function timelockMintFor(\\n        uint256 vaultId,\\n        uint256 amount,\\n        address to,\\n        uint256 timelockLength\\n    ) external returns (uint256);\\n\\n    function deposit(uint256 vaultId, uint256 _amount) external;\\n\\n    function withdraw(uint256 vaultId, uint256 _share) external;\\n}\\n\",\"keccak256\":\"0x80540f3c1ec01c54afc55dd9343e9973e8ea4f11ac12e2129d3cb088f8380649\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXLPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXLPStaking {\\n    function nftxVaultFactory() external view returns (address);\\n\\n    function rewardDistTokenImpl() external view returns (address);\\n\\n    function stakingTokenProvider() external view returns (address);\\n\\n    function vaultToken(address _stakingToken) external view returns (address);\\n\\n    function stakingToken(address _vaultToken) external view returns (address);\\n\\n    function rewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function newRewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function oldRewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function unusedRewardDistributionToken(uint256 vaultId)\\n        external\\n        view\\n        returns (address);\\n\\n    function rewardDistributionTokenAddr(\\n        address stakedToken,\\n        address rewardToken\\n    ) external view returns (address);\\n\\n    // Write functions.\\n    function __NFTXLPStaking__init(address _stakingTokenProvider) external;\\n\\n    function setNFTXVaultFactory(address newFactory) external;\\n\\n    function setStakingTokenProvider(address newProvider) external;\\n\\n    function addPoolForVault(uint256 vaultId) external;\\n\\n    function updatePoolForVault(uint256 vaultId) external;\\n\\n    function updatePoolForVaults(uint256[] calldata vaultId) external;\\n\\n    function receiveRewards(uint256 vaultId, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function deposit(uint256 vaultId, uint256 amount) external;\\n\\n    function timelockDepositFor(\\n        uint256 vaultId,\\n        address account,\\n        uint256 amount,\\n        uint256 timelockLength\\n    ) external;\\n\\n    function exit(uint256 vaultId, uint256 amount) external;\\n\\n    function rescue(uint256 vaultId) external;\\n\\n    function withdraw(uint256 vaultId, uint256 amount) external;\\n\\n    function claimRewards(uint256 vaultId) external;\\n}\\n\",\"keccak256\":\"0x8060d654324a6785929a06f45ffe9f4d2944eeca59b050ba66faf9af70e19861\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXSimpleFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXSimpleFeeDistributor {\\n    struct FeeReceiver {\\n        uint256 allocPoint;\\n        address receiver;\\n        bool isContract;\\n    }\\n\\n    function nftxVaultFactory() external view returns (address);\\n\\n    function lpStaking() external view returns (address);\\n\\n    function inventoryStaking() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function allocTotal() external view returns (uint256);\\n\\n    // Write functions.\\n    function __SimpleFeeDistributor__init__(\\n        address _lpStaking,\\n        address _treasury\\n    ) external;\\n\\n    function rescueTokens(address token) external;\\n\\n    function distribute(uint256 vaultId) external;\\n\\n    function addReceiver(\\n        uint256 _allocPoint,\\n        address _receiver,\\n        bool _isContract\\n    ) external;\\n\\n    function initializeVaultReceivers(uint256 _vaultId) external;\\n\\n    function changeReceiverAlloc(uint256 _idx, uint256 _allocPoint) external;\\n\\n    function changeReceiverAddress(\\n        uint256 _idx,\\n        address _address,\\n        bool _isContract\\n    ) external;\\n\\n    function removeReceiver(uint256 _receiverIdx) external;\\n\\n    // Configuration functions.\\n    function setTreasuryAddress(address _treasury) external;\\n\\n    function setLPStakingAddress(address _lpStaking) external;\\n\\n    function setInventoryStakingAddress(address _inventoryStaking) external;\\n\\n    function setNFTXVaultFactory(address _factory) external;\\n}\\n\",\"keccak256\":\"0xf093e5492f2f3f559b9e99016fed6f5aa717c0e20c8b2e76e376b8eb020a23c7\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/IBeacon.sol\\\";\\n\\ninterface INFTXVaultFactory is IBeacon {\\n    // Read functions.\\n    function numVaults() external view returns (uint256);\\n\\n    function zapContract() external view returns (address);\\n\\n    function zapContracts(address addr) external view returns (bool);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function eligibilityManager() external view returns (address);\\n\\n    function vault(uint256 vaultId) external view returns (address);\\n\\n    function allVaults() external view returns (address[] memory);\\n\\n    function vaultsForAsset(address asset)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function isLocked(uint256 id) external view returns (bool);\\n\\n    function excludedFromFees(address addr) external view returns (bool);\\n\\n    function factoryMintFee() external view returns (uint64);\\n\\n    function factoryRandomRedeemFee() external view returns (uint64);\\n\\n    function factoryTargetRedeemFee() external view returns (uint64);\\n\\n    function factoryRandomSwapFee() external view returns (uint64);\\n\\n    function factoryTargetSwapFee() external view returns (uint64);\\n\\n    function vaultFees(uint256 vaultId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    event NewFeeDistributor(address oldDistributor, address newDistributor);\\n    event NewZapContract(address oldZap, address newZap);\\n    event UpdatedZapContract(address zap, bool excluded);\\n    event FeeExclusion(address feeExcluded, bool excluded);\\n    event NewEligibilityManager(address oldEligManager, address newEligManager);\\n    event NewVault(\\n        uint256 indexed vaultId,\\n        address vaultAddress,\\n        address assetAddress\\n    );\\n    event UpdateVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n    event DisableVaultFees(uint256 vaultId);\\n    event UpdateFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n\\n    // Write functions.\\n    function __NFTXVaultFactory_init(\\n        address _vaultImpl,\\n        address _feeDistributor\\n    ) external;\\n\\n    function createVault(\\n        string calldata name,\\n        string calldata symbol,\\n        address _assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    ) external returns (uint256);\\n\\n    function setFeeDistributor(address _feeDistributor) external;\\n\\n    function setEligibilityManager(address _eligibilityManager) external;\\n\\n    function setZapContract(address _zapContract, bool _excluded) external;\\n\\n    function setFeeExclusion(address _excludedAddr, bool excluded) external;\\n\\n    function setFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function setVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees(uint256 vaultId) external;\\n}\\n\",\"keccak256\":\"0xb6d64ca7f387cb11b1a345add3556c21d2b3c9fa9b8d8645a3312bcbb33ce9bb\",\"license\":\"MIT\"},\"contracts/solidity/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function childImplementation() external view returns (address);\\n\\n    function upgradeChildTo(address newImplementation) external;\\n}\\n\",\"keccak256\":\"0xd9b361e1d9b9a4bde9801abb5692e9fd7018cb52505d3a47dc7b5dd968bcad28\",\"license\":\"MIT\"},\"contracts/solidity/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            _initializing || !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04ad3c77a6a5006b66f1642cc3353b8009215d734eb80f069ed42a6c09460391\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x57ee5f4c65fa0d2e023e97cb265784084412c700117cac90cfe29bf4bab3c7fc\",\"license\":\"MIT\"},\"contracts/solidity/util/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd38318b34491b4e11bab877e4dbafbf51111b69b09307b01ca952cf24e4229d0\",\"license\":\"MIT\"},\"contracts/solidity/util/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {}\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8d6fce5d0897740611b909a023e797e08d324503881d9839969124076fe9eb44\",\"license\":\"MIT\"},\"contracts/solidity/util/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x76303f728817d84e7de3b7bb8839a3b30f5e078e223c7dbbbcc45da3d4dc905c\",\"license\":\"MIT\"},\"contracts/solidity/util/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\n\\ncontract PausableUpgradeable is OwnableUpgradeable {\\n    function __Pausable_init() internal initializer {\\n        __Ownable_init();\\n    }\\n\\n    event SetPaused(uint256 lockId, bool paused);\\n    event SetIsGuardian(address addr, bool isGuardian);\\n\\n    mapping(address => bool) public isGuardian;\\n    mapping(uint256 => bool) public isPaused;\\n\\n    // 0 : createVault\\n    // 1 : mint\\n    // 2 : redeem\\n    // 3 : swap\\n    // 4 : flashloan\\n\\n    function onlyOwnerIfPaused(uint256 lockId) public view virtual {\\n        require(!isPaused[lockId] || msg.sender == owner(), \\\"Paused\\\");\\n    }\\n\\n    function unpause(uint256 lockId) public virtual onlyOwner {\\n        isPaused[lockId] = false;\\n        emit SetPaused(lockId, false);\\n    }\\n\\n    function pause(uint256 lockId) public virtual {\\n        require(isGuardian[msg.sender], \\\"Can't pause\\\");\\n        isPaused[lockId] = true;\\n        emit SetPaused(lockId, true);\\n    }\\n\\n    function setIsGuardian(address addr, bool _isGuardian)\\n        public\\n        virtual\\n        onlyOwner\\n    {\\n        isGuardian[addr] = _isGuardian;\\n        emit SetIsGuardian(addr, _isGuardian);\\n    }\\n}\\n\",\"keccak256\":\"0xd540474b3adf43fe5c4a47b11b89a452c1f16f36b05e3f4ca626b71a1e33b689\",\"license\":\"MIT\"},\"contracts/solidity/util/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa9f12a4d5b2176c3699ea7fe4234ffa276c461c89400242cd2f85e32e92bd627\",\"license\":\"MIT\"},\"contracts/solidity/util/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data)\\n        private\\n    {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x795b61b6dcbaad0d7c4c64c36c4a95a9be5e8786a31dae3200f80f11037b744e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612785806100206000396000f3fe608060405234801561001057600080fd5b50600436106101ce5760003560e01c806374a1b0b011610104578063a534cbbd116100a2578063bdf2a43c11610071578063bdf2a43c14610408578063d46307dc1461042b578063f2fde38b1461043e578063fabc1cbc1461045157600080fd5b8063a534cbbd146103bc578063a77abced146103cf578063aa463065146103e2578063af056847146103f557600080fd5b80638da5cb5b116100de5780638da5cb5b14610372578063915c5baf1461038357806391c05b0b146103965780639bf1401c146103a957600080fd5b806374a1b0b0146103395780637c77b6161461034c5780638c0fd23d1461035f57600080fd5b806336d4d031116101715780635b3817601161014b5780635b381760146102d357806361d027b31461030b5780636605bfda1461031e578063715018a61461033157600080fd5b806336d4d031146102835780633801daf1146102965780634912300d146102c657600080fd5b80630c68ba21116101ad5780630c68ba2114610217578063136439dd1461024a57806319d3d2a41461025d57806323845fb51461027057600080fd5b8062ae3bf8146101d357806303220d02146101e857806308131951146101fb575b600080fd5b6101e66101e136600461248b565b610464565b005b6101e66101f6366004612590565b610545565b610204609c5481565b6040519081526020015b60405180910390f35b61023a61022536600461248b565b60976020526000908152604090205460ff1681565b604051901515815260200161020e565b6101e6610258366004612560565b610641565b6101e661026b366004612560565b6106f8565b6101e661027e3660046124fb565b61085c565b6101e661029136600461248b565b610907565b6099546102ae9061010090046001600160a01b031681565b6040516001600160a01b03909116815260200161020e565b60995461023a9060ff1681565b6102e66102e1366004612560565b6109f3565b604080519384526001600160a01b03909216602084015215159082015260600161020e565b609b546102ae906001600160a01b031681565b6101e661032c36600461248b565b610a36565b6101e6610b22565b609e546102ae906001600160a01b031681565b6101e661035a366004612560565b610bb4565b6101e661036d366004612528565b610c28565b6065546001600160a01b03166102ae565b6101e66103913660046124c3565b610cb1565b6101e66103a4366004612560565b610da1565b609a546102ae906001600160a01b031681565b6101e66103ca36600461248b565b61121c565b6101e66103dd36600461248b565b6112b2565b6101e66103f03660046125d1565b6113c5565b6101e6610403366004612560565b611516565b61023a610416366004612560565b60986020526000908152604090205460ff1681565b6101e6610439366004612590565b61178e565b6101e661044c36600461248b565b6117e1565b6101e661045f366004612560565b611901565b6065546001600160a01b031633146104b15760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064015b60405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b1580156104f357600080fd5b505afa158015610507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052b9190612578565b90506105416001600160a01b0383163383611996565b5050565b6065546001600160a01b0316331461058d5760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6000609d84815481106105b057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206002909102016001810180546001600160a01b0387811674ffffffffffffffffffffffffffffffffffffffffff1983168117600160a01b89151502179093556040805191909216808252948101929092529193507f466bf064fd123a99d87cf265d40a3335a650757a2a5ece87ce6f888419f56d32910160405180910390a15050505050565b3360009081526097602052604090205460ff166106a05760405162461bcd60e51b815260206004820152600b60248201527f43616e277420706175736500000000000000000000000000000000000000000060448201526064016104a8565b600081815260986020908152604091829020805460ff191660019081179091558251848152918201527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d7491015b60405180910390a150565b60995461010090046001600160a01b031633146107575760405162461bcd60e51b815260206004820152601860248201527f46656552656365697665723a206e6f7420666163746f7279000000000000000060448201526064016104a8565b609a546040517f87a6753f000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03909116906387a6753f90602401600060405180830381600087803b1580156107b657600080fd5b505af11580156107ca573d6000803e3d6000fd5b5050609e546001600160a01b0316159150610859905057609e546040517ff0f2a4d7000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b039091169063f0f2a4d790602401600060405180830381600087803b15801561084057600080fd5b505af1158015610854573d6000803e3d6000fd5b505050505b50565b6065546001600160a01b031633146108a45760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6001600160a01b038216600081815260976020908152604091829020805460ff19168515159081179091558251938452908301527fd0b6b573d5442f7c29fd50d9735ae341581c25c6ed07748d50eda519f1ffa88a910160405180910390a15050565b6065546001600160a01b0316331461094f5760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6001600160a01b0381166109a55760405162461bcd60e51b815260206004820152601760248201527f4c505374616b696e6720213d206164647265737328302900000000000000000060448201526064016104a8565b609a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f4de1363210f44b38c4e5a2ccac49005c6fc0041f1ead7de1bbc6fd23735a4fdc906020016106ed565b609d8181548110610a0357600080fd5b6000918252602090912060029091020180546001909101549091506001600160a01b03811690600160a01b900460ff1683565b6065546001600160a01b03163314610a7e5760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6001600160a01b038116610ad45760405162461bcd60e51b815260206004820152601660248201527f547265617375727920213d20616464726573732830290000000000000000000060448201526064016104a8565b609b80546001600160a01b0319166001600160a01b0383169081179091556040519081527f30d36c1dd67e2019526263df539f65050c3b537a6acf65766b5da7de7128cf36906020016106ed565b6065546001600160a01b03163314610b6a5760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b60008181526098602052604090205460ff161580610bdc57506065546001600160a01b031633145b6108595760405162461bcd60e51b815260206004820152600660248201527f506175736564000000000000000000000000000000000000000000000000000060448201526064016104a8565b6065546001600160a01b03163314610c705760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6099805460ff19168215159081179091556040519081527fb008f183388020de01fd4365e295aa904b691f98e63fd033f74f75273b6b285f906020016106ed565b600054610100900460ff1680610cca575060005460ff16155b610d2d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104a8565b600054610100900460ff16158015610d4f576000805461ffff19166101011790555b610d57611a3f565b610d6082610a36565b610d6983610907565b609a54610d8a90670b1a2bc2ec500000906001600160a01b03166001611af9565b8015610d9c576000805461ff00191690555b505050565b60026001541415610df45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104a8565b600260015560995461010090046001600160a01b0316610e1357600080fd5b6099546040517f81a36fb60000000000000000000000000000000000000000000000000000000081526004810183905260009161010090046001600160a01b0316906381a36fb69060240160206040518083038186803b158015610e7657600080fd5b505afa158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae91906124a7565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015610ef357600080fd5b505afa158015610f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2b9190612578565b60995490915060ff1680610f3f5750609c54155b15610f6557609b54610f5e906001600160a01b03848116911683611996565b5050611215565b609d546000805b82811015611170576000609d8281548110610f9757634e487b7160e01b600052603260045260246000fd5b600091825260208083206040805160608101825260029490940290910180548085526001909101546001600160a01b03811693850193909352600160a01b90920460ff16151590830152609c54919350610ff19088612679565b610ffb9190612659565b6110059085612641565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038916906370a082319060240160206040518083038186803b15801561104a57600080fd5b505afa15801561105e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110829190612578565b90508082116110915781611093565b805b915060006110a3848b8b86611c17565b905080611156576020840151604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201526000918b169063dd62ed3e9060440160206040518083038186803b1580156110f957600080fd5b505afa15801561110d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111319190612578565b602086015190915061114f906001600160a01b038c16906000611dcf565b955061115b565b600095505b5050505080611169906126db565b9050610f6c565b508015611210576040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b1580156111b957600080fd5b505afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190612578565b609b5490915061120e906001600160a01b03878116911683611996565b505b505050505b5060018055565b6065546001600160a01b031633146112645760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b609e80546001600160a01b0319166001600160a01b0383169081179091556040519081527f6e74da1326dcd8931bd9213a2f7ecf361c7008ccad60543e78b5cd50ca6e556a906020016106ed565b6065546001600160a01b031633146112fa5760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b60995461010090046001600160a01b0316156113585760405162461bcd60e51b815260206004820152601d60248201527f6e6674785661756c74466163746f727920697320696d6d757461626c6500000060448201526064016104a8565b609980547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038416908102919091179091556040519081527f2693263e4020b2649b9bcc9a4b68c471d4ac35c81baa35264c695d647822b1a2906020016106ed565b6065546001600160a01b0316331461140d5760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b609d54821061145e5760405162461bcd60e51b815260206004820152601d60248201527f4665654469737472696275746f723a204f7574206f6620626f756e647300000060448201526064016104a8565b6000609d838154811061148157634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020190508060000154609c60008282546114a79190612698565b9091555050818155609c80548391906000906114c4908490612641565b90915550506001810154604080516001600160a01b039092168252602082018490527fbf9a378b372297e179e435cdca3b5215960b36e3489288832cbdc7f323ff987d910160405180910390a1505050565b6065546001600160a01b0316331461155e5760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b609d548082106115b05760405162461bcd60e51b815260206004820152601d60248201527f4665654469737472696275746f723a204f7574206f6620626f756e647300000060448201526064016104a8565b7fef79c7490a6b7ae3d254565a3bdf2a58d73afe9877306e1c74121209a5527021609d83815481106115f257634e487b7160e01b600052603260045260246000fd5b6000918252602091829020600290910201600101546040516001600160a01b0390911681520160405180910390a1609d828154811061164157634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160000154609c60008282546116649190612698565b90915550609d9050611677600183612698565b8154811061169557634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201609d83815481106116c457634e487b7160e01b600052603260045260246000fd5b600091825260209091208254600290920201908155600191820180549290910180546001600160a01b031981166001600160a01b039094169384178255915460ff600160a01b918290041615150274ffffffffffffffffffffffffffffffffffffffffff19909216909217179055609d80548061175157634e487b7160e01b600052603160045260246000fd5b600082815260208120600260001990930192830201908155600101805474ffffffffffffffffffffffffffffffffffffffffff1916905590555050565b6065546001600160a01b031633146117d65760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b610d9c838383611af9565b6065546001600160a01b031633146118295760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6001600160a01b0381166118a55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104a8565b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146119495760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6000818152609860209081526040808320805460ff191690558051848152918201929092527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d7491016106ed565b6040516001600160a01b038316602482015260448101829052610d9c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611efa565b600054610100900460ff1680611a58575060005460ff16155b611abb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104a8565b600054610100900460ff16158015611add576000805461ffff19166101011790555b611ae5611fdf565b8015610859576000805461ff001916905550565b604080516060810182528481526001600160a01b0384811660208301908152841515938301938452609d8054600181018255600091825284517fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7b60029092029182015591517fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7c909201805495519290931674ffffffffffffffffffffffffffffffffffffffffff1990951694909417600160a01b91151591909102179055609c805491928692611bca908490612641565b9091555050604080516001600160a01b0385168152602081018690527f555ceefe9e17f4ae5f15e17c385a8eb55c46bddb25897aeabadcda1815dd5a75910160405180910390a150505050565b6000846040015115611da9576020850151611c3d906001600160a01b038516908461208d565b604080516024810186905260448082018590528251808303909101815260649091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff36d52da00000000000000000000000000000000000000000000000000000000179052870151915190916000916001600160a01b0390911690611ccb9084906125f2565b6000604051808303816000865af19150503d8060008114611d08576040519150601f19603f3d011682016040523d82523d6000602084013e611d0d565b606091505b50509050808015611da057506020870151604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529086169063dd62ed3e9060440160206040518083038186803b158015611d6657600080fd5b505afa158015611d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9e9190612578565b155b92505050611dc7565b6020850151611dc3906001600160a01b0385169084611996565b5060015b949350505050565b801580611e585750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611e1e57600080fd5b505afa158015611e32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e569190612578565b155b611eca5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016104a8565b6040516001600160a01b038316602482015260448101829052610d9c90849063095ea7b360e01b906064016119db565b6000611f4f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121549092919063ffffffff16565b805190915015610d9c5780806020019051810190611f6d9190612544565b610d9c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104a8565b600054610100900460ff1680611ff8575060005460ff16155b61205b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104a8565b600054610100900460ff1615801561207d576000805461ffff19166101011790555b61208561216d565b611ae561221e565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156120d957600080fd5b505afa1580156120ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121119190612578565b61211b9190612641565b6040516001600160a01b03851660248201526044810182905290915061214e90859063095ea7b360e01b906064016119db565b50505050565b60606121638484600085612313565b90505b9392505050565b600054610100900460ff1680612186575060005460ff16155b6121e95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104a8565b600054610100900460ff16158015611ae5576000805461ffff19166101011790558015610859576000805461ff001916905550565b600054610100900460ff1680612237575060005460ff16155b61229a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104a8565b600054610100900460ff161580156122bc576000805461ffff19166101011790555b606580546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610859576000805461ff001916905550565b60608247101561238b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104a8565b843b6123d95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a8565b600080866001600160a01b031685876040516123f591906125f2565b60006040518083038185875af1925050503d8060008114612432576040519150601f19603f3d011682016040523d82523d6000602084013e612437565b606091505b5091509150612447828286612452565b979650505050505050565b60608315612461575081612166565b8251156124715782518084602001fd5b8160405162461bcd60e51b81526004016104a8919061260e565b60006020828403121561249c578081fd5b81356121668161270c565b6000602082840312156124b8578081fd5b81516121668161270c565b600080604083850312156124d5578081fd5b82356124e08161270c565b915060208301356124f08161270c565b809150509250929050565b6000806040838503121561250d578182fd5b82356125188161270c565b915060208301356124f081612721565b600060208284031215612539578081fd5b813561216681612721565b600060208284031215612555578081fd5b815161216681612721565b600060208284031215612571578081fd5b5035919050565b600060208284031215612589578081fd5b5051919050565b6000806000606084860312156125a4578081fd5b8335925060208401356125b68161270c565b915060408401356125c681612721565b809150509250925092565b600080604083850312156125e3578182fd5b50508035926020909101359150565b600082516126048184602087016126af565b9190910192915050565b602081526000825180602084015261262d8160408501602087016126af565b601f01601f19169190910160400192915050565b60008219821115612654576126546126f6565b500190565b60008261267457634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612693576126936126f6565b500290565b6000828210156126aa576126aa6126f6565b500390565b60005b838110156126ca5781810151838201526020016126b2565b8381111561214e5750506000910152565b60006000198214156126ef576126ef6126f6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461085957600080fd5b801515811461085957600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220e9b795c694834cae2100a5a38d9ac44f95df8dc2fb79302e6d7279147d751bed64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ce5760003560e01c806374a1b0b011610104578063a534cbbd116100a2578063bdf2a43c11610071578063bdf2a43c14610408578063d46307dc1461042b578063f2fde38b1461043e578063fabc1cbc1461045157600080fd5b8063a534cbbd146103bc578063a77abced146103cf578063aa463065146103e2578063af056847146103f557600080fd5b80638da5cb5b116100de5780638da5cb5b14610372578063915c5baf1461038357806391c05b0b146103965780639bf1401c146103a957600080fd5b806374a1b0b0146103395780637c77b6161461034c5780638c0fd23d1461035f57600080fd5b806336d4d031116101715780635b3817601161014b5780635b381760146102d357806361d027b31461030b5780636605bfda1461031e578063715018a61461033157600080fd5b806336d4d031146102835780633801daf1146102965780634912300d146102c657600080fd5b80630c68ba21116101ad5780630c68ba2114610217578063136439dd1461024a57806319d3d2a41461025d57806323845fb51461027057600080fd5b8062ae3bf8146101d357806303220d02146101e857806308131951146101fb575b600080fd5b6101e66101e136600461248b565b610464565b005b6101e66101f6366004612590565b610545565b610204609c5481565b6040519081526020015b60405180910390f35b61023a61022536600461248b565b60976020526000908152604090205460ff1681565b604051901515815260200161020e565b6101e6610258366004612560565b610641565b6101e661026b366004612560565b6106f8565b6101e661027e3660046124fb565b61085c565b6101e661029136600461248b565b610907565b6099546102ae9061010090046001600160a01b031681565b6040516001600160a01b03909116815260200161020e565b60995461023a9060ff1681565b6102e66102e1366004612560565b6109f3565b604080519384526001600160a01b03909216602084015215159082015260600161020e565b609b546102ae906001600160a01b031681565b6101e661032c36600461248b565b610a36565b6101e6610b22565b609e546102ae906001600160a01b031681565b6101e661035a366004612560565b610bb4565b6101e661036d366004612528565b610c28565b6065546001600160a01b03166102ae565b6101e66103913660046124c3565b610cb1565b6101e66103a4366004612560565b610da1565b609a546102ae906001600160a01b031681565b6101e66103ca36600461248b565b61121c565b6101e66103dd36600461248b565b6112b2565b6101e66103f03660046125d1565b6113c5565b6101e6610403366004612560565b611516565b61023a610416366004612560565b60986020526000908152604090205460ff1681565b6101e6610439366004612590565b61178e565b6101e661044c36600461248b565b6117e1565b6101e661045f366004612560565b611901565b6065546001600160a01b031633146104b15760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064015b60405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b1580156104f357600080fd5b505afa158015610507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052b9190612578565b90506105416001600160a01b0383163383611996565b5050565b6065546001600160a01b0316331461058d5760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6000609d84815481106105b057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206002909102016001810180546001600160a01b0387811674ffffffffffffffffffffffffffffffffffffffffff1983168117600160a01b89151502179093556040805191909216808252948101929092529193507f466bf064fd123a99d87cf265d40a3335a650757a2a5ece87ce6f888419f56d32910160405180910390a15050505050565b3360009081526097602052604090205460ff166106a05760405162461bcd60e51b815260206004820152600b60248201527f43616e277420706175736500000000000000000000000000000000000000000060448201526064016104a8565b600081815260986020908152604091829020805460ff191660019081179091558251848152918201527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d7491015b60405180910390a150565b60995461010090046001600160a01b031633146107575760405162461bcd60e51b815260206004820152601860248201527f46656552656365697665723a206e6f7420666163746f7279000000000000000060448201526064016104a8565b609a546040517f87a6753f000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03909116906387a6753f90602401600060405180830381600087803b1580156107b657600080fd5b505af11580156107ca573d6000803e3d6000fd5b5050609e546001600160a01b0316159150610859905057609e546040517ff0f2a4d7000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b039091169063f0f2a4d790602401600060405180830381600087803b15801561084057600080fd5b505af1158015610854573d6000803e3d6000fd5b505050505b50565b6065546001600160a01b031633146108a45760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6001600160a01b038216600081815260976020908152604091829020805460ff19168515159081179091558251938452908301527fd0b6b573d5442f7c29fd50d9735ae341581c25c6ed07748d50eda519f1ffa88a910160405180910390a15050565b6065546001600160a01b0316331461094f5760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6001600160a01b0381166109a55760405162461bcd60e51b815260206004820152601760248201527f4c505374616b696e6720213d206164647265737328302900000000000000000060448201526064016104a8565b609a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f4de1363210f44b38c4e5a2ccac49005c6fc0041f1ead7de1bbc6fd23735a4fdc906020016106ed565b609d8181548110610a0357600080fd5b6000918252602090912060029091020180546001909101549091506001600160a01b03811690600160a01b900460ff1683565b6065546001600160a01b03163314610a7e5760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6001600160a01b038116610ad45760405162461bcd60e51b815260206004820152601660248201527f547265617375727920213d20616464726573732830290000000000000000000060448201526064016104a8565b609b80546001600160a01b0319166001600160a01b0383169081179091556040519081527f30d36c1dd67e2019526263df539f65050c3b537a6acf65766b5da7de7128cf36906020016106ed565b6065546001600160a01b03163314610b6a5760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b60008181526098602052604090205460ff161580610bdc57506065546001600160a01b031633145b6108595760405162461bcd60e51b815260206004820152600660248201527f506175736564000000000000000000000000000000000000000000000000000060448201526064016104a8565b6065546001600160a01b03163314610c705760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6099805460ff19168215159081179091556040519081527fb008f183388020de01fd4365e295aa904b691f98e63fd033f74f75273b6b285f906020016106ed565b600054610100900460ff1680610cca575060005460ff16155b610d2d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104a8565b600054610100900460ff16158015610d4f576000805461ffff19166101011790555b610d57611a3f565b610d6082610a36565b610d6983610907565b609a54610d8a90670b1a2bc2ec500000906001600160a01b03166001611af9565b8015610d9c576000805461ff00191690555b505050565b60026001541415610df45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104a8565b600260015560995461010090046001600160a01b0316610e1357600080fd5b6099546040517f81a36fb60000000000000000000000000000000000000000000000000000000081526004810183905260009161010090046001600160a01b0316906381a36fb69060240160206040518083038186803b158015610e7657600080fd5b505afa158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae91906124a7565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015610ef357600080fd5b505afa158015610f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2b9190612578565b60995490915060ff1680610f3f5750609c54155b15610f6557609b54610f5e906001600160a01b03848116911683611996565b5050611215565b609d546000805b82811015611170576000609d8281548110610f9757634e487b7160e01b600052603260045260246000fd5b600091825260208083206040805160608101825260029490940290910180548085526001909101546001600160a01b03811693850193909352600160a01b90920460ff16151590830152609c54919350610ff19088612679565b610ffb9190612659565b6110059085612641565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038916906370a082319060240160206040518083038186803b15801561104a57600080fd5b505afa15801561105e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110829190612578565b90508082116110915781611093565b805b915060006110a3848b8b86611c17565b905080611156576020840151604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201526000918b169063dd62ed3e9060440160206040518083038186803b1580156110f957600080fd5b505afa15801561110d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111319190612578565b602086015190915061114f906001600160a01b038c16906000611dcf565b955061115b565b600095505b5050505080611169906126db565b9050610f6c565b508015611210576040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b1580156111b957600080fd5b505afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190612578565b609b5490915061120e906001600160a01b03878116911683611996565b505b505050505b5060018055565b6065546001600160a01b031633146112645760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b609e80546001600160a01b0319166001600160a01b0383169081179091556040519081527f6e74da1326dcd8931bd9213a2f7ecf361c7008ccad60543e78b5cd50ca6e556a906020016106ed565b6065546001600160a01b031633146112fa5760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b60995461010090046001600160a01b0316156113585760405162461bcd60e51b815260206004820152601d60248201527f6e6674785661756c74466163746f727920697320696d6d757461626c6500000060448201526064016104a8565b609980547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038416908102919091179091556040519081527f2693263e4020b2649b9bcc9a4b68c471d4ac35c81baa35264c695d647822b1a2906020016106ed565b6065546001600160a01b0316331461140d5760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b609d54821061145e5760405162461bcd60e51b815260206004820152601d60248201527f4665654469737472696275746f723a204f7574206f6620626f756e647300000060448201526064016104a8565b6000609d838154811061148157634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020190508060000154609c60008282546114a79190612698565b9091555050818155609c80548391906000906114c4908490612641565b90915550506001810154604080516001600160a01b039092168252602082018490527fbf9a378b372297e179e435cdca3b5215960b36e3489288832cbdc7f323ff987d910160405180910390a1505050565b6065546001600160a01b0316331461155e5760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b609d548082106115b05760405162461bcd60e51b815260206004820152601d60248201527f4665654469737472696275746f723a204f7574206f6620626f756e647300000060448201526064016104a8565b7fef79c7490a6b7ae3d254565a3bdf2a58d73afe9877306e1c74121209a5527021609d83815481106115f257634e487b7160e01b600052603260045260246000fd5b6000918252602091829020600290910201600101546040516001600160a01b0390911681520160405180910390a1609d828154811061164157634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160000154609c60008282546116649190612698565b90915550609d9050611677600183612698565b8154811061169557634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201609d83815481106116c457634e487b7160e01b600052603260045260246000fd5b600091825260209091208254600290920201908155600191820180549290910180546001600160a01b031981166001600160a01b039094169384178255915460ff600160a01b918290041615150274ffffffffffffffffffffffffffffffffffffffffff19909216909217179055609d80548061175157634e487b7160e01b600052603160045260246000fd5b600082815260208120600260001990930192830201908155600101805474ffffffffffffffffffffffffffffffffffffffffff1916905590555050565b6065546001600160a01b031633146117d65760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b610d9c838383611af9565b6065546001600160a01b031633146118295760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6001600160a01b0381166118a55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104a8565b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146119495760405162461bcd60e51b8152602060048201819052602482015260008051602061273083398151915260448201526064016104a8565b6000818152609860209081526040808320805460ff191690558051848152918201929092527f77f1fcfcce67dc392d64f842056d2ec06c80986c47c910f7e79c5b23a2738d7491016106ed565b6040516001600160a01b038316602482015260448101829052610d9c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611efa565b600054610100900460ff1680611a58575060005460ff16155b611abb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104a8565b600054610100900460ff16158015611add576000805461ffff19166101011790555b611ae5611fdf565b8015610859576000805461ff001916905550565b604080516060810182528481526001600160a01b0384811660208301908152841515938301938452609d8054600181018255600091825284517fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7b60029092029182015591517fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7c909201805495519290931674ffffffffffffffffffffffffffffffffffffffffff1990951694909417600160a01b91151591909102179055609c805491928692611bca908490612641565b9091555050604080516001600160a01b0385168152602081018690527f555ceefe9e17f4ae5f15e17c385a8eb55c46bddb25897aeabadcda1815dd5a75910160405180910390a150505050565b6000846040015115611da9576020850151611c3d906001600160a01b038516908461208d565b604080516024810186905260448082018590528251808303909101815260649091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff36d52da00000000000000000000000000000000000000000000000000000000179052870151915190916000916001600160a01b0390911690611ccb9084906125f2565b6000604051808303816000865af19150503d8060008114611d08576040519150601f19603f3d011682016040523d82523d6000602084013e611d0d565b606091505b50509050808015611da057506020870151604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529086169063dd62ed3e9060440160206040518083038186803b158015611d6657600080fd5b505afa158015611d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9e9190612578565b155b92505050611dc7565b6020850151611dc3906001600160a01b0385169084611996565b5060015b949350505050565b801580611e585750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611e1e57600080fd5b505afa158015611e32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e569190612578565b155b611eca5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016104a8565b6040516001600160a01b038316602482015260448101829052610d9c90849063095ea7b360e01b906064016119db565b6000611f4f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121549092919063ffffffff16565b805190915015610d9c5780806020019051810190611f6d9190612544565b610d9c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104a8565b600054610100900460ff1680611ff8575060005460ff16155b61205b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104a8565b600054610100900460ff1615801561207d576000805461ffff19166101011790555b61208561216d565b611ae561221e565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156120d957600080fd5b505afa1580156120ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121119190612578565b61211b9190612641565b6040516001600160a01b03851660248201526044810182905290915061214e90859063095ea7b360e01b906064016119db565b50505050565b60606121638484600085612313565b90505b9392505050565b600054610100900460ff1680612186575060005460ff16155b6121e95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104a8565b600054610100900460ff16158015611ae5576000805461ffff19166101011790558015610859576000805461ff001916905550565b600054610100900460ff1680612237575060005460ff16155b61229a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104a8565b600054610100900460ff161580156122bc576000805461ffff19166101011790555b606580546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610859576000805461ff001916905550565b60608247101561238b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104a8565b843b6123d95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a8565b600080866001600160a01b031685876040516123f591906125f2565b60006040518083038185875af1925050503d8060008114612432576040519150601f19603f3d011682016040523d82523d6000602084013e612437565b606091505b5091509150612447828286612452565b979650505050505050565b60608315612461575081612166565b8251156124715782518084602001fd5b8160405162461bcd60e51b81526004016104a8919061260e565b60006020828403121561249c578081fd5b81356121668161270c565b6000602082840312156124b8578081fd5b81516121668161270c565b600080604083850312156124d5578081fd5b82356124e08161270c565b915060208301356124f08161270c565b809150509250929050565b6000806040838503121561250d578182fd5b82356125188161270c565b915060208301356124f081612721565b600060208284031215612539578081fd5b813561216681612721565b600060208284031215612555578081fd5b815161216681612721565b600060208284031215612571578081fd5b5035919050565b600060208284031215612589578081fd5b5051919050565b6000806000606084860312156125a4578081fd5b8335925060208401356125b68161270c565b915060408401356125c681612721565b809150509250925092565b600080604083850312156125e3578182fd5b50508035926020909101359150565b600082516126048184602087016126af565b9190910192915050565b602081526000825180602084015261262d8160408501602087016126af565b601f01601f19169190910160400192915050565b60008219821115612654576126546126f6565b500190565b60008261267457634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612693576126936126f6565b500290565b6000828210156126aa576126aa6126f6565b500390565b60005b838110156126ca5781810151838201526020016126b2565b8381111561214e5750506000910152565b60006000198214156126ef576126ef6126f6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461085957600080fd5b801515811461085957600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220e9b795c694834cae2100a5a38d9ac44f95df8dc2fb79302e6d7279147d751bed64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15315,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15318,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 19527,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 19570,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 18468,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 19234,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 19353,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19384,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "isGuardian",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19388,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "isPaused",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 6439,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "distributionPaused",
        "offset": 0,
        "slot": "153",
        "type": "t_bool"
      },
      {
        "astId": 6442,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "nftxVaultFactory",
        "offset": 1,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 6445,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "lpStaking",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 6448,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "treasury",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 6451,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "allocTotal",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 6455,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "feeReceivers",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_struct(FeeReceiver)13887_storage)dyn_storage"
      },
      {
        "astId": 6458,
        "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
        "label": "inventoryStaking",
        "offset": 0,
        "slot": "158",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(FeeReceiver)13887_storage)dyn_storage": {
        "base": "t_struct(FeeReceiver)13887_storage",
        "encoding": "dynamic_array",
        "label": "struct INFTXSimpleFeeDistributor.FeeReceiver[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(FeeReceiver)13887_storage": {
        "encoding": "inplace",
        "label": "struct INFTXSimpleFeeDistributor.FeeReceiver",
        "members": [
          {
            "astId": 13882,
            "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
            "label": "allocPoint",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13884,
            "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13886,
            "contract": "contracts/solidity/NFTXSimpleFeeDistributor.sol:NFTXSimpleFeeDistributor",
            "label": "isContract",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}