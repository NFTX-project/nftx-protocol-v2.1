{
  "language": "Solidity",
  "sources": {
    "contracts/solidity/interface/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC-1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(\n        bytes32 hash,\n        bytes memory signature\n    ) external view returns (bytes4 magicValue);\n}\n"
    },
    "contracts/solidity/interface/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/solidity/interface/IERC3156Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n */\ninterface IERC3156FlashBorrowerUpgradeable {\n    /**\n     * @dev Receive a flash loan.\n     * @param initiator The initiator of the loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param fee The additional amount of tokens to repay.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\n     */\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32);\n}\n\n/**\n * @dev Interface of the ERC3156 FlashLender, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n */\ninterface IERC3156FlashLenderUpgradeable {\n    /**\n     * @dev The amount of currency available to be lended.\n     * @param token The loan currency.\n     * @return The amount of `token` that can be borrowed.\n     */\n    function maxFlashLoan(address token) external view returns (uint256);\n\n    /**\n     * @dev The fee to be charged for a given loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n     */\n    function flashFee(address token, uint256 amount)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Initiate a flash loan.\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     */\n    function flashLoan(\n        IERC3156FlashBorrowerUpgradeable receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n"
    },
    "contracts/solidity/interface/INFTXEligibility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface INFTXEligibility {\n    // Read functions.\n    function name() external pure returns (string memory);\n\n    function finalized() external view returns (bool);\n\n    function targetAsset() external pure returns (address);\n\n    function checkAllEligible(uint256[] calldata tokenIds)\n        external\n        view\n        returns (bool);\n\n    function checkEligible(uint256[] calldata tokenIds)\n        external\n        view\n        returns (bool[] memory);\n\n    function checkAllIneligible(uint256[] calldata tokenIds)\n        external\n        view\n        returns (bool);\n\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\n\n    // Write functions.\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\n\n    function beforeMintHook(uint256[] calldata tokenIds) external;\n\n    function afterMintHook(uint256[] calldata tokenIds) external;\n\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\n\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\n}\n"
    },
    "contracts/solidity/interface/INFTXEligibilityManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface INFTXEligibilityManager {\n    function nftxVaultFactory() external returns (address);\n\n    function eligibilityImpl() external returns (address);\n\n    function deployEligibility(uint256 vaultId, bytes calldata initData)\n        external\n        returns (address);\n}\n"
    },
    "contracts/solidity/interface/INFTXFeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface INFTXFeeDistributor {\n    struct FeeReceiver {\n        uint256 allocPoint;\n        address receiver;\n        bool isContract;\n    }\n\n    function nftxVaultFactory() external returns (address);\n\n    function lpStaking() external returns (address);\n\n    function treasury() external returns (address);\n\n    function defaultTreasuryAlloc() external returns (uint256);\n\n    function defaultLPAlloc() external returns (uint256);\n\n    function allocTotal(uint256 vaultId) external returns (uint256);\n\n    function specificTreasuryAlloc(uint256 vaultId) external returns (uint256);\n\n    // Write functions.\n    function __FeeDistributor__init__(address _lpStaking, address _treasury)\n        external;\n\n    function rescueTokens(address token) external;\n\n    function distribute(uint256 vaultId) external;\n\n    function addReceiver(\n        uint256 _vaultId,\n        uint256 _allocPoint,\n        address _receiver,\n        bool _isContract\n    ) external;\n\n    function initializeVaultReceivers(uint256 _vaultId) external;\n\n    function changeMultipleReceiverAlloc(\n        uint256[] memory _vaultIds,\n        uint256[] memory _receiverIdxs,\n        uint256[] memory allocPoints\n    ) external;\n\n    function changeMultipleReceiverAddress(\n        uint256[] memory _vaultIds,\n        uint256[] memory _receiverIdxs,\n        address[] memory addresses,\n        bool[] memory isContracts\n    ) external;\n\n    function changeReceiverAlloc(\n        uint256 _vaultId,\n        uint256 _idx,\n        uint256 _allocPoint\n    ) external;\n\n    function changeReceiverAddress(\n        uint256 _vaultId,\n        uint256 _idx,\n        address _address,\n        bool _isContract\n    ) external;\n\n    function removeReceiver(uint256 _vaultId, uint256 _receiverIdx) external;\n\n    // Configuration functions.\n    function setTreasuryAddress(address _treasury) external;\n\n    function setDefaultTreasuryAlloc(uint256 _allocPoint) external;\n\n    function setSpecificTreasuryAlloc(uint256 _vaultId, uint256 _allocPoint)\n        external;\n\n    function setLPStakingAddress(address _lpStaking) external;\n\n    function setNFTXVaultFactory(address _factory) external;\n\n    function setDefaultLPAlloc(uint256 _allocPoint) external;\n}\n"
    },
    "contracts/solidity/interface/INFTXInventoryStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./INFTXVaultFactory.sol\";\n\ninterface INFTXInventoryStaking {\n    function nftxVaultFactory() external view returns (INFTXVaultFactory);\n\n    function vaultXToken(uint256 vaultId) external view returns (address);\n\n    function xTokenAddr(address baseToken) external view returns (address);\n\n    function xTokenShareValue(uint256 vaultId) external view returns (uint256);\n\n    function __NFTXInventoryStaking_init(address nftxFactory) external;\n\n    function deployXTokenForVault(uint256 vaultId) external;\n\n    function receiveRewards(uint256 vaultId, uint256 amount)\n        external\n        returns (bool);\n\n    function timelockMintFor(\n        uint256 vaultId,\n        uint256 amount,\n        address to,\n        uint256 timelockLength\n    ) external returns (uint256);\n\n    function deposit(uint256 vaultId, uint256 _amount) external;\n\n    function withdraw(uint256 vaultId, uint256 _share) external;\n}\n"
    },
    "contracts/solidity/interface/INFTXLPStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface INFTXLPStaking {\n    function nftxVaultFactory() external view returns (address);\n\n    function rewardDistTokenImpl() external view returns (address);\n\n    function stakingTokenProvider() external view returns (address);\n\n    function vaultToken(address _stakingToken) external view returns (address);\n\n    function stakingToken(address _vaultToken) external view returns (address);\n\n    function rewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address);\n\n    function newRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address);\n\n    function oldRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address);\n\n    function unusedRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address);\n\n    function rewardDistributionTokenAddr(\n        address stakedToken,\n        address rewardToken\n    ) external view returns (address);\n\n    // Write functions.\n    function __NFTXLPStaking__init(address _stakingTokenProvider) external;\n\n    function setNFTXVaultFactory(address newFactory) external;\n\n    function setStakingTokenProvider(address newProvider) external;\n\n    function addPoolForVault(uint256 vaultId) external;\n\n    function updatePoolForVault(uint256 vaultId) external;\n\n    function updatePoolForVaults(uint256[] calldata vaultId) external;\n\n    function receiveRewards(uint256 vaultId, uint256 amount)\n        external\n        returns (bool);\n\n    function deposit(uint256 vaultId, uint256 amount) external;\n\n    function timelockDepositFor(\n        uint256 vaultId,\n        address account,\n        uint256 amount,\n        uint256 timelockLength\n    ) external;\n\n    function exit(uint256 vaultId, uint256 amount) external;\n\n    function rescue(uint256 vaultId) external;\n\n    function withdraw(uint256 vaultId, uint256 amount) external;\n\n    function claimRewards(uint256 vaultId) external;\n}\n"
    },
    "contracts/solidity/interface/INFTXSimpleFeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface INFTXSimpleFeeDistributor {\n    struct FeeReceiver {\n        uint256 allocPoint;\n        address receiver;\n        bool isContract;\n    }\n\n    function nftxVaultFactory() external view returns (address);\n\n    function lpStaking() external view returns (address);\n\n    function inventoryStaking() external view returns (address);\n\n    function treasury() external view returns (address);\n\n    function allocTotal() external view returns (uint256);\n\n    // Write functions.\n    function __SimpleFeeDistributor__init__(\n        address _lpStaking,\n        address _treasury\n    ) external;\n\n    function rescueTokens(address token) external;\n\n    function distribute(uint256 vaultId) external;\n\n    function addReceiver(\n        uint256 _allocPoint,\n        address _receiver,\n        bool _isContract\n    ) external;\n\n    function initializeVaultReceivers(uint256 _vaultId) external;\n\n    function changeReceiverAlloc(uint256 _idx, uint256 _allocPoint) external;\n\n    function changeReceiverAddress(\n        uint256 _idx,\n        address _address,\n        bool _isContract\n    ) external;\n\n    function removeReceiver(uint256 _receiverIdx) external;\n\n    // Configuration functions.\n    function setTreasuryAddress(address _treasury) external;\n\n    function setLPStakingAddress(address _lpStaking) external;\n\n    function setInventoryStakingAddress(address _inventoryStaking) external;\n\n    function setNFTXVaultFactory(address _factory) external;\n}\n"
    },
    "contracts/solidity/interface/INFTXVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/IERC20Upgradeable.sol\";\nimport \"./INFTXVaultFactory.sol\";\nimport \"./INFTXEligibility.sol\";\n\ninterface INFTXVault is IERC20Upgradeable {\n    function manager() external view returns (address);\n\n    function assetAddress() external view returns (address);\n\n    function vaultFactory() external view returns (INFTXVaultFactory);\n\n    function eligibilityStorage() external view returns (INFTXEligibility);\n\n    function is1155() external view returns (bool);\n\n    function allowAllItems() external view returns (bool);\n\n    function enableMint() external view returns (bool);\n\n    function enableRandomRedeem() external view returns (bool);\n\n    function enableTargetRedeem() external view returns (bool);\n\n    function enableRandomSwap() external view returns (bool);\n\n    function enableTargetSwap() external view returns (bool);\n\n    function vaultId() external view returns (uint256);\n\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\n\n    function allHoldings() external view returns (uint256[] memory);\n\n    function totalHoldings() external view returns (uint256);\n\n    function mintFee() external view returns (uint256);\n\n    function randomRedeemFee() external view returns (uint256);\n\n    function targetRedeemFee() external view returns (uint256);\n\n    function randomSwapFee() external view returns (uint256);\n\n    function targetSwapFee() external view returns (uint256);\n\n    function vaultFees()\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    event VaultInit(\n        uint256 indexed vaultId,\n        address assetAddress,\n        bool is1155,\n        bool allowAllItems\n    );\n\n    event ManagerSet(address manager);\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\n    // event CustomEligibilityDeployed(address eligibilityAddr);\n\n    event EnableMintUpdated(bool enabled);\n    event EnableRandomRedeemUpdated(bool enabled);\n    event EnableTargetRedeemUpdated(bool enabled);\n    event EnableRandomSwapUpdated(bool enabled);\n    event EnableTargetSwapUpdated(bool enabled);\n\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\n    event Swapped(\n        uint256[] nftIds,\n        uint256[] amounts,\n        uint256[] specificIds,\n        uint256[] redeemedIds,\n        address to\n    );\n\n    function __NFTXVault_init(\n        string calldata _name,\n        string calldata _symbol,\n        address _assetAddress,\n        bool _is1155,\n        bool _allowAllItems\n    ) external;\n\n    function finalizeVault() external;\n\n    function setVaultMetadata(string memory name_, string memory symbol_)\n        external;\n\n    function setVaultFeatures(\n        bool _enableMint,\n        bool _enableRandomRedeem,\n        bool _enableTargetRedeem,\n        bool _enableRandomSwap,\n        bool _enableTargetSwap\n    ) external;\n\n    function setFees(\n        uint256 _mintFee,\n        uint256 _randomRedeemFee,\n        uint256 _targetRedeemFee,\n        uint256 _randomSwapFee,\n        uint256 _targetSwapFee\n    ) external;\n\n    function disableVaultFees() external;\n\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\n    // a similar interface.\n    function deployEligibilityStorage(\n        uint256 moduleIndex,\n        bytes calldata initData\n    ) external returns (address);\n\n    // The manager has control over options like fees and features\n    function setManager(address _manager) external;\n\n    function mint(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\n    ) external returns (uint256);\n\n    function mintTo(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\n        address to\n    ) external returns (uint256);\n\n    function redeem(uint256 amount, uint256[] calldata specificIds)\n        external\n        returns (uint256[] calldata);\n\n    function redeemTo(\n        uint256 amount,\n        uint256[] calldata specificIds,\n        address to\n    ) external returns (uint256[] calldata);\n\n    function swap(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\n        uint256[] calldata specificIds\n    ) external returns (uint256[] calldata);\n\n    function swapTo(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\n        uint256[] calldata specificIds,\n        address to\n    ) external returns (uint256[] calldata);\n\n    function allValidNFTs(uint256[] calldata tokenIds)\n        external\n        view\n        returns (bool);\n}\n"
    },
    "contracts/solidity/interface/INFTXVaultFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/IBeacon.sol\";\n\ninterface INFTXVaultFactory is IBeacon {\n    // Read functions.\n    function numVaults() external view returns (uint256);\n\n    function zapContract() external view returns (address);\n\n    function zapContracts(address addr) external view returns (bool);\n\n    function erc1272Signer() external view returns (address);\n\n    function feeDistributor() external view returns (address);\n\n    function eligibilityManager() external view returns (address);\n\n    function vault(uint256 vaultId) external view returns (address);\n\n    function allVaults() external view returns (address[] memory);\n\n    function vaultsForAsset(address asset)\n        external\n        view\n        returns (address[] memory);\n\n    function isLocked(uint256 id) external view returns (bool);\n\n    function excludedFromFees(address addr) external view returns (bool);\n\n    function factoryMintFee() external view returns (uint64);\n\n    function factoryRandomRedeemFee() external view returns (uint64);\n\n    function factoryTargetRedeemFee() external view returns (uint64);\n\n    function factoryRandomSwapFee() external view returns (uint64);\n\n    function factoryTargetSwapFee() external view returns (uint64);\n\n    function vaultFees(uint256 vaultId)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    event NewFeeDistributor(address oldDistributor, address newDistributor);\n    event NewZapContract(address oldZap, address newZap);\n    event UpdatedZapContract(address zap, bool excluded);\n    event FeeExclusion(address feeExcluded, bool excluded);\n    event NewEligibilityManager(address oldEligManager, address newEligManager);\n    event NewVault(\n        uint256 indexed vaultId,\n        address vaultAddress,\n        address assetAddress\n    );\n    event UpdateVaultFees(\n        uint256 vaultId,\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    );\n    event DisableVaultFees(uint256 vaultId);\n    event UpdateFactoryFees(\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    );\n\n    // Write functions.\n    function __NFTXVaultFactory_init(\n        address _vaultImpl,\n        address _feeDistributor\n    ) external;\n\n    function createVault(\n        string calldata name,\n        string calldata symbol,\n        address _assetAddress,\n        bool is1155,\n        bool allowAllItems\n    ) external returns (uint256);\n\n    function setFeeDistributor(address _feeDistributor) external;\n\n    function setEligibilityManager(address _eligibilityManager) external;\n\n    function setZapContract(address _zapContract, bool _excluded) external;\n\n    function setFeeExclusion(address _excludedAddr, bool excluded) external;\n\n    function setFactoryFees(\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    ) external;\n\n    function setVaultFees(\n        uint256 vaultId,\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    ) external;\n\n    function disableVaultFees(uint256 vaultId) external;\n\n    function setERC1271Signer(address _erc1271Signer) external;\n}\n"
    },
    "contracts/solidity/interface/IRewardDistributionToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/IERC20Upgradeable.sol\";\n\ninterface IRewardDistributionToken is IERC20Upgradeable {\n    function distributeRewards(uint256 amount) external;\n\n    function __RewardDistributionToken_init(\n        IERC20Upgradeable _target,\n        string memory _name,\n        string memory _symbol\n    ) external;\n\n    function mint(\n        address account,\n        address to,\n        uint256 amount\n    ) external;\n\n    function burnFrom(address account, uint256 amount) external;\n\n    function withdrawReward(address user) external;\n\n    function dividendOf(address _owner) external view returns (uint256);\n\n    function withdrawnRewardOf(address _owner) external view returns (uint256);\n\n    function accumulativeRewardOf(address _owner)\n        external\n        view\n        returns (uint256);\n}\n"
    },
    "contracts/solidity/interface/ITimelockExcludeList.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ITimelockExcludeList {\n    function isExcluded(address addr, uint256 vaultId)\n        external\n        view\n        returns (bool);\n}\n"
    },
    "contracts/solidity/interface/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/solidity/NFTXInventoryStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/PausableUpgradeable.sol\";\nimport \"./util/SafeERC20Upgradeable.sol\";\nimport \"./util/Create2.sol\";\nimport \"./proxy/UpgradeableBeacon.sol\";\nimport \"./proxy/Create2BeaconProxy.sol\";\nimport \"./token/XTokenUpgradeable.sol\";\nimport \"./interface/INFTXInventoryStaking.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/ITimelockExcludeList.sol\";\n\n// Author: 0xKiwi.\n\n// Pausing codes for inventory staking are:\n// 10: Deposit\n\ncontract NFTXInventoryStaking is\n    PausableUpgradeable,\n    UpgradeableBeacon,\n    INFTXInventoryStaking\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    // Small locktime to prevent flash deposits.\n    uint256 internal constant DEFAULT_LOCKTIME = 2;\n    // bytes internal constant beaconCode = type(Create2BeaconProxy).creationCode;\n    bytes internal constant beaconCode =\n        hex\"608060405261002f60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d51610451565b6000805160206107cf8339815191521461005957634e487b7160e01b600052600160045260246000fd5b610078336040518060200160405280600081525061007d60201b60201c565b6104a0565b6100908261023860201b6100291760201c565b6100ef5760405162461bcd60e51b815260206004820152602560248201527f426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610172826001600160a01b031663da5257166040518163ffffffff1660e01b815260040160206040518083038186803b15801561012b57600080fd5b505afa15801561013f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016391906103db565b61023860201b6100291760201c565b6101e45760405162461bcd60e51b815260206004820152603460248201527f426561636f6e50726f78793a20626561636f6e20696d706c656d656e7461746960448201527f6f6e206973206e6f74206120636f6e747261637400000000000000000000000060648201526084016100e6565b6000805160206107cf8339815191528281558151156102335761023161020861023e565b836040518060600160405280602181526020016107ef602191396102cb60201b61002f1760201c565b505b505050565b3b151590565b60006102566000805160206107cf8339815191525490565b6001600160a01b031663da5257166040518163ffffffff1660e01b815260040160206040518083038186803b15801561028e57600080fd5b505afa1580156102a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c691906103db565b905090565b6060833b61032a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100e6565b600080856001600160a01b0316856040516103459190610402565b600060405180830381855af49150503d8060008114610380576040519150601f19603f3d011682016040523d82523d6000602084013e610385565b606091505b5090925090506103968282866103a2565b925050505b9392505050565b606083156103b157508161039b565b8251156103c15782518084602001fd5b8160405162461bcd60e51b81526004016100e6919061041e565b6000602082840312156103ec578081fd5b81516001600160a01b038116811461039b578182fd5b60008251610414818460208701610474565b9190910192915050565b602081526000825180602084015261043d816040850160208701610474565b601f01601f19169190910160400192915050565b60008282101561046f57634e487b7160e01b81526011600452602481fd5b500390565b60005b8381101561048f578181015183820152602001610477565b838111156102315750506000910152565b610320806104af6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261012e565b6101da565b565b3b151590565b6060833b6100aa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516100d2919061026b565b600060405180830381855af49150503d806000811461010d576040519150601f19603f3d011682016040523d82523d6000602084013e610112565b606091505b50915091506101228282866101fe565b925050505b9392505050565b60006101587fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505490565b73ffffffffffffffffffffffffffffffffffffffff1663da5257166040518163ffffffff1660e01b815260040160206040518083038186803b15801561019d57600080fd5b505afa1580156101b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d59190610237565b905090565b3660008037600080366000845af43d6000803e8080156101f9573d6000f35b3d6000fd5b6060831561020d575081610127565b82511561021d5782518084602001fd5b8160405162461bcd60e51b81526004016100a19190610287565b600060208284031215610248578081fd5b815173ffffffffffffffffffffffffffffffffffffffff81168114610127578182fd5b6000825161027d8184602087016102ba565b9190910192915050565b60208152600082518060208401526102a68160408501602087016102ba565b601f01601f19169190910160400192915050565b60005b838110156102d55781810151838201526020016102bd565b838111156102e4576000848401525b5050505056fea2646970667358221220186f38c9868951054a26d8e78dfc388c93ba31dab42cd0982029e5f5f85fc42164736f6c63430008040033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c6564\";\n    // this code is used to determine xToken address while calling `directWithdraw()`\n    bytes internal constant duplicateBeaconCode =\n        hex\"608060405261002f60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d51610451565b6000805160206107cf8339815191521461005957634e487b7160e01b600052600160045260246000fd5b610078336040518060200160405280600081525061007d60201b60201c565b6104a0565b6100908261023860201b6100291760201c565b6100ef5760405162461bcd60e51b815260206004820152602560248201527f426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610172826001600160a01b031663da5257166040518163ffffffff1660e01b815260040160206040518083038186803b15801561012b57600080fd5b505afa15801561013f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016391906103db565b61023860201b6100291760201c565b6101e45760405162461bcd60e51b815260206004820152603460248201527f426561636f6e50726f78793a20626561636f6e20696d706c656d656e7461746960448201527f6f6e206973206e6f74206120636f6e747261637400000000000000000000000060648201526084016100e6565b6000805160206107cf8339815191528281558151156102335761023161020861023e565b836040518060600160405280602181526020016107ef602191396102cb60201b61002f1760201c565b505b505050565b3b151590565b60006102566000805160206107cf8339815191525490565b6001600160a01b031663da5257166040518163ffffffff1660e01b815260040160206040518083038186803b15801561028e57600080fd5b505afa1580156102a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c691906103db565b905090565b6060833b61032a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100e6565b600080856001600160a01b0316856040516103459190610402565b600060405180830381855af49150503d8060008114610380576040519150601f19603f3d011682016040523d82523d6000602084013e610385565b606091505b5090925090506103968282866103a2565b925050505b9392505050565b606083156103b157508161039b565b8251156103c15782518084602001fd5b8160405162461bcd60e51b81526004016100e6919061041e565b6000602082840312156103ec578081fd5b81516001600160a01b038116811461039b578182fd5b60008251610414818460208701610474565b9190910192915050565b602081526000825180602084015261043d816040850160208701610474565b601f01601f19169190910160400192915050565b60008282101561046f57634e487b7160e01b81526011600452602481fd5b500390565b60005b8381101561048f578181015183820152602001610477565b838111156102315750506000910152565b610320806104af6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261012e565b6101da565b565b3b151590565b6060833b6100aa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516100d2919061026b565b600060405180830381855af49150503d806000811461010d576040519150601f19603f3d011682016040523d82523d6000602084013e610112565b606091505b50915091506101228282866101fe565b925050505b9392505050565b60006101587fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505490565b73ffffffffffffffffffffffffffffffffffffffff1663da5257166040518163ffffffff1660e01b815260040160206040518083038186803b15801561019d57600080fd5b505afa1580156101b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d59190610237565b905090565b3660008037600080366000845af43d6000803e8080156101f9573d6000f35b3d6000fd5b6060831561020d575081610127565b82511561021d5782518084602001fd5b8160405162461bcd60e51b81526004016100a19190610287565b600060208284031215610248578081fd5b815173ffffffffffffffffffffffffffffffffffffffff81168114610127578182fd5b6000825161027d8184602087016102ba565b9190910192915050565b60208152600082518060208401526102a68160408501602087016102ba565b601f01601f19169190910160400192915050565b60005b838110156102d55781810151838201526020016102bd565b838111156102e4576000848401525b5050505056fea26469706673582212207fa982cc2707bb3e77c4aa1e243fbbca2a5b4869b87391cdd12e6a56d1e36e9164736f6c63430008040033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c6564\";\n\n    INFTXVaultFactory public override nftxVaultFactory;\n\n    uint256 public inventoryLockTimeErc20;\n    ITimelockExcludeList public timelockExcludeList;\n\n    event XTokenCreated(uint256 vaultId, address baseToken, address xToken);\n    event Deposit(\n        uint256 vaultId,\n        uint256 baseTokenAmount,\n        uint256 xTokenAmount,\n        uint256 timelockUntil,\n        address sender\n    );\n    event Withdraw(\n        uint256 vaultId,\n        uint256 baseTokenAmount,\n        uint256 xTokenAmount,\n        address sender\n    );\n    event DirectWithdraw(\n        address xToken,\n        uint256 baseTokenAmount,\n        uint256 xTokenAmount,\n        address sender\n    );\n    event FeesReceived(uint256 vaultId, uint256 amount);\n\n    function __NFTXInventoryStaking_init(address _nftxVaultFactory)\n        external\n        virtual\n        override\n        initializer\n    {\n        __Ownable_init();\n        nftxVaultFactory = INFTXVaultFactory(_nftxVaultFactory);\n        address xTokenImpl = address(new XTokenUpgradeable());\n        __UpgradeableBeacon__init(xTokenImpl);\n    }\n\n    modifier onlyAdmin() {\n        require(\n            msg.sender == owner() ||\n                msg.sender == nftxVaultFactory.feeDistributor(),\n            \"LPStaking: Not authorized\"\n        );\n        _;\n    }\n\n    function setTimelockExcludeList(address addr) external onlyOwner {\n        timelockExcludeList = ITimelockExcludeList(addr);\n    }\n\n    function setInventoryLockTimeErc20(uint256 time) external onlyOwner {\n        require(time <= 14 days, \"Lock too long\");\n        inventoryLockTimeErc20 = time;\n    }\n\n    function isAddressTimelockExcluded(address addr, uint256 vaultId)\n        public\n        view\n        returns (bool)\n    {\n        if (address(timelockExcludeList) == address(0)) {\n            return false;\n        } else {\n            return timelockExcludeList.isExcluded(addr, vaultId);\n        }\n    }\n\n    function deployXTokenForVault(uint256 vaultId) public virtual override {\n        address baseToken = nftxVaultFactory.vault(vaultId);\n        address deployedXToken = xTokenAddr(address(baseToken));\n\n        if (isContract(deployedXToken)) {\n            return;\n        }\n\n        address xToken = _deployXToken(baseToken);\n        emit XTokenCreated(vaultId, baseToken, xToken);\n    }\n\n    function receiveRewards(uint256 vaultId, uint256 amount)\n        external\n        virtual\n        override\n        onlyAdmin\n        returns (bool)\n    {\n        address baseToken = nftxVaultFactory.vault(vaultId);\n        address deployedXToken = xTokenAddr(address(baseToken));\n\n        // Don't distribute rewards unless there are people to distribute to.\n        // Also added here if the distribution token is not deployed, just forfeit rewards for now.\n        if (\n            !isContract(deployedXToken) ||\n            XTokenUpgradeable(deployedXToken).totalSupply() == 0\n        ) {\n            return false;\n        }\n        // We \"pull\" to the dividend tokens so the fee distributor only needs to approve this contract.\n        IERC20Upgradeable(baseToken).safeTransferFrom(\n            msg.sender,\n            deployedXToken,\n            amount\n        );\n        emit FeesReceived(vaultId, amount);\n        return true;\n    }\n\n    // Enter staking. Staking, get minted shares and\n    // locks base tokens and mints xTokens.\n    function deposit(uint256 vaultId, uint256 _amount)\n        external\n        virtual\n        override\n    {\n        onlyOwnerIfPaused(10);\n\n        uint256 timelockTime = isAddressTimelockExcluded(msg.sender, vaultId)\n            ? 0\n            : inventoryLockTimeErc20;\n\n        (\n            IERC20Upgradeable baseToken,\n            XTokenUpgradeable xToken,\n            uint256 xTokensMinted\n        ) = _timelockMintFor(vaultId, msg.sender, _amount, timelockTime);\n        // Lock the base token in the xtoken contract\n        baseToken.safeTransferFrom(msg.sender, address(xToken), _amount);\n        emit Deposit(vaultId, _amount, xTokensMinted, timelockTime, msg.sender);\n    }\n\n    function timelockMintFor(\n        uint256 vaultId,\n        uint256 amount,\n        address to,\n        uint256 timelockLength\n    ) external virtual override returns (uint256) {\n        onlyOwnerIfPaused(10);\n        require(nftxVaultFactory.zapContracts(msg.sender), \"Not staking zap\");\n        require(\n            nftxVaultFactory.excludedFromFees(msg.sender),\n            \"Not fee excluded\"\n        );\n\n        (, , uint256 xTokensMinted) = _timelockMintFor(\n            vaultId,\n            to,\n            amount,\n            timelockLength\n        );\n        emit Deposit(vaultId, amount, xTokensMinted, timelockLength, to);\n        return xTokensMinted;\n    }\n\n    // Leave the bar. Claim back your tokens.\n    // Unlocks the staked + gained tokens and burns xTokens.\n    function withdraw(uint256 vaultId, uint256 _share)\n        external\n        virtual\n        override\n    {\n        IERC20Upgradeable baseToken = IERC20Upgradeable(\n            nftxVaultFactory.vault(vaultId)\n        );\n        XTokenUpgradeable xToken = XTokenUpgradeable(\n            xTokenAddr(address(baseToken))\n        );\n\n        uint256 baseTokensRedeemed = xToken.burnXTokens(msg.sender, _share);\n        emit Withdraw(vaultId, baseTokensRedeemed, _share, msg.sender);\n    }\n\n    function directWithdraw(uint256 vaultId, uint256 _share) external {\n        IERC20Upgradeable baseToken = IERC20Upgradeable(\n            nftxVaultFactory.vault(vaultId)\n        );\n        bytes32 salt = keccak256(abi.encodePacked(baseToken));\n        address xToken = Create2.computeAddress(\n            salt,\n            keccak256(duplicateBeaconCode)\n        );\n        uint256 baseTokensRedeemed = XTokenUpgradeable(xToken).burnXTokens(\n            msg.sender,\n            _share\n        );\n\n        emit DirectWithdraw(xToken, baseTokensRedeemed, _share, msg.sender);\n    }\n\n    function xTokenShareValue(uint256 vaultId)\n        external\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        IERC20Upgradeable baseToken = IERC20Upgradeable(\n            nftxVaultFactory.vault(vaultId)\n        );\n        XTokenUpgradeable xToken = XTokenUpgradeable(\n            xTokenAddr(address(baseToken))\n        );\n        require(address(xToken) != address(0), \"XToken not deployed\");\n\n        uint256 multiplier = 10**18;\n        return\n            xToken.totalSupply() > 0\n                ? (multiplier * baseToken.balanceOf(address(xToken))) /\n                    xToken.totalSupply()\n                : multiplier;\n    }\n\n    function timelockUntil(uint256 vaultId, address who)\n        external\n        view\n        returns (uint256)\n    {\n        XTokenUpgradeable xToken = XTokenUpgradeable(vaultXToken(vaultId));\n        return xToken.timelockUntil(who);\n    }\n\n    function balanceOf(uint256 vaultId, address who)\n        external\n        view\n        returns (uint256)\n    {\n        XTokenUpgradeable xToken = XTokenUpgradeable(vaultXToken(vaultId));\n        return xToken.balanceOf(who);\n    }\n\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\n    function xTokenAddr(address baseToken)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        bytes32 salt = keccak256(abi.encodePacked(baseToken));\n        address tokenAddr = Create2.computeAddress(salt, keccak256(beaconCode));\n        return tokenAddr;\n    }\n\n    function vaultXToken(uint256 vaultId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        address baseToken = nftxVaultFactory.vault(vaultId);\n        address xToken = xTokenAddr(baseToken);\n        require(isContract(xToken), \"XToken not deployed\");\n        return xToken;\n    }\n\n    function _timelockMintFor(\n        uint256 vaultId,\n        address account,\n        uint256 _amount,\n        uint256 timelockLength\n    )\n        internal\n        returns (\n            IERC20Upgradeable,\n            XTokenUpgradeable,\n            uint256\n        )\n    {\n        deployXTokenForVault(vaultId);\n        IERC20Upgradeable baseToken = IERC20Upgradeable(\n            nftxVaultFactory.vault(vaultId)\n        );\n        XTokenUpgradeable xToken = XTokenUpgradeable(\n            (xTokenAddr(address(baseToken)))\n        );\n\n        uint256 xTokensMinted = xToken.mintXTokens(\n            account,\n            _amount,\n            timelockLength\n        );\n        return (baseToken, xToken, xTokensMinted);\n    }\n\n    function _deployXToken(address baseToken) internal returns (address) {\n        string memory symbol = IERC20Metadata(baseToken).symbol();\n        symbol = string(abi.encodePacked(\"x\", symbol));\n        bytes32 salt = keccak256(abi.encodePacked(baseToken));\n        address deployedXToken = Create2.deploy(0, salt, beaconCode);\n        XTokenUpgradeable(deployedXToken).__XToken_init(\n            baseToken,\n            symbol,\n            symbol\n        );\n        return deployedXToken;\n    }\n\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size != 0;\n    }\n}\n"
    },
    "contracts/solidity/NFTXLPStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/PausableUpgradeable.sol\";\nimport \"./util/SafeERC20Upgradeable.sol\";\nimport \"./proxy/ClonesUpgradeable.sol\";\nimport \"./token/TimelockRewardDistributionTokenImpl.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/INFTXVault.sol\";\nimport \"./interface/IRewardDistributionToken.sol\";\nimport \"./StakingTokenProvider.sol\";\n\n// Author: 0xKiwi.\n\n// Pausing codes for LP staking are:\n// 10: Deposit\n\ncontract NFTXLPStaking is PausableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    INFTXVaultFactory public nftxVaultFactory;\n    IRewardDistributionToken public rewardDistTokenImpl;\n    StakingTokenProvider public stakingTokenProvider;\n\n    event PoolCreated(uint256 vaultId, address pool);\n    event PoolUpdated(uint256 vaultId, address pool);\n    event FeesReceived(uint256 vaultId, uint256 amount);\n\n    event Deposit(uint256 vaultId, address stakingToken, uint256 amount, address account, uint256 timelockLength);\n    event Withdraw(uint256 vaultId, address stakingToken, uint256 amount, address account);\n\n    struct StakingPool {\n        address stakingToken;\n        address rewardToken;\n    }\n    mapping(uint256 => StakingPool) public vaultStakingInfo;\n\n    TimelockRewardDistributionTokenImpl public newTimelockRewardDistTokenImpl;\n\n    function __NFTXLPStaking__init(address _stakingTokenProvider)\n        external\n        initializer\n    {\n        __Ownable_init();\n        require(_stakingTokenProvider != address(0), \"Provider != address(0)\");\n        require(\n            address(newTimelockRewardDistTokenImpl) == address(0),\n            \"Already assigned\"\n        );\n        stakingTokenProvider = StakingTokenProvider(_stakingTokenProvider);\n        newTimelockRewardDistTokenImpl = new TimelockRewardDistributionTokenImpl();\n        newTimelockRewardDistTokenImpl.__TimelockRewardDistributionToken_init(\n            IERC20Upgradeable(address(0)),\n            \"\",\n            \"\"\n        );\n    }\n\n    modifier onlyAdmin() {\n        require(\n            msg.sender == owner() ||\n                msg.sender == nftxVaultFactory.feeDistributor(),\n            \"LPStaking: Not authorized\"\n        );\n        _;\n    }\n\n    function setNFTXVaultFactory(address newFactory) external onlyOwner {\n        require(\n            address(nftxVaultFactory) == address(0),\n            \"nftxVaultFactory is immutable\"\n        );\n        nftxVaultFactory = INFTXVaultFactory(newFactory);\n    }\n\n    function setStakingTokenProvider(address newProvider) external onlyOwner {\n        require(newProvider != address(0));\n        stakingTokenProvider = StakingTokenProvider(newProvider);\n    }\n\n    function addPoolForVault(uint256 vaultId) external onlyAdmin {\n        require(\n            address(nftxVaultFactory) != address(0),\n            \"LPStaking: Factory not set\"\n        );\n        require(\n            vaultStakingInfo[vaultId].stakingToken == address(0),\n            \"LPStaking: Pool already exists\"\n        );\n        address _rewardToken = nftxVaultFactory.vault(vaultId);\n        address _stakingToken = stakingTokenProvider.stakingTokenForVaultToken(\n            _rewardToken\n        );\n        StakingPool memory pool = StakingPool(_stakingToken, _rewardToken);\n        vaultStakingInfo[vaultId] = pool;\n        address newRewardDistToken = _deployDividendToken(pool);\n        emit PoolCreated(vaultId, newRewardDistToken);\n    }\n\n    function updatePoolForVaults(uint256[] calldata vaultIds) external {\n        uint256 length = vaultIds.length;\n        for (uint256 i; i < length; ++i) {\n            updatePoolForVault(vaultIds[i]);\n        }\n    }\n\n    // In case the provider changes, this lets the pool be updated. Anyone can call it.\n    function updatePoolForVault(uint256 vaultId) public {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        // Not letting people use this function to create new pools.\n        require(\n            pool.stakingToken != address(0),\n            \"LPStaking: Pool doesn't exist\"\n        );\n        address _stakingToken = stakingTokenProvider.stakingTokenForVaultToken(\n            pool.rewardToken\n        );\n        StakingPool memory newPool = StakingPool(\n            _stakingToken,\n            pool.rewardToken\n        );\n        vaultStakingInfo[vaultId] = newPool;\n\n        // If the pool is already deployed, ignore the update.\n        address addr = address(_rewardDistributionTokenAddr(newPool));\n        if (isContract(addr)) {\n            return;\n        }\n        address newRewardDistToken = _deployDividendToken(newPool);\n        emit PoolUpdated(vaultId, newRewardDistToken);\n    }\n\n    function receiveRewards(uint256 vaultId, uint256 amount)\n        external\n        onlyAdmin\n        returns (bool)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        if (pool.stakingToken == address(0)) {\n            // In case the pair is updated, but not yet\n            return false;\n        }\n\n        TimelockRewardDistributionTokenImpl rewardDistToken = _rewardDistributionTokenAddr(\n                pool\n            );\n        // Don't distribute rewards unless there are people to distribute to.\n        // Also added here if the distribution token is not deployed, just forfeit rewards for now.\n        if (\n            !isContract(address(rewardDistToken)) ||\n            rewardDistToken.totalSupply() == 0\n        ) {\n            return false;\n        }\n        // We \"pull\" to the dividend tokens so the vault only needs to approve this contract.\n        IERC20Upgradeable(pool.rewardToken).safeTransferFrom(\n            msg.sender,\n            address(rewardDistToken),\n            amount\n        );\n        rewardDistToken.distributeRewards(amount);\n        emit FeesReceived(vaultId, amount);\n        return true;\n    }\n\n    function deposit(uint256 vaultId, uint256 amount) external {\n        onlyOwnerIfPaused(10);\n        // Check the pool in case its been updated.\n        updatePoolForVault(vaultId);\n\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        require(pool.stakingToken != address(0), \"LPStaking: Nonexistent pool\");\n        IERC20Upgradeable(pool.stakingToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n        TimelockRewardDistributionTokenImpl xSLPToken = _rewardDistributionTokenAddr(\n                pool\n            );\n\n        // If the user has an existing timelock, check if it is in the future.\n        uint256 currentTimelock = xSLPToken.timelockUntil(msg.sender);\n        if (currentTimelock > block.timestamp) {\n            // Maintain the same timelock if they already have one.\n            // We do this instead of patching in the token because\n            // the xSLP contracts as currently deployed are not upgradeable.\n            uint256 timestamp = currentTimelock - block.timestamp;\n            xSLPToken.timelockMint(\n                msg.sender,\n                amount,\n                timestamp\n            );\n            emit Deposit(vaultId, pool.stakingToken, amount, msg.sender, timestamp);\n        } else {\n            // Timelock for 2 seconds if they don't already have a timelock to prevent flash loans.\n            xSLPToken.timelockMint(msg.sender, amount, 2);\n            emit Deposit(vaultId, pool.stakingToken, amount, msg.sender, 2);\n        }\n    }\n\n    function timelockDepositFor(\n        uint256 vaultId,\n        address account,\n        uint256 amount,\n        uint256 timelockLength\n    ) external {\n        require(timelockLength < 2592000, \"Timelock too long\");\n        require(nftxVaultFactory.excludedFromFees(msg.sender), \"Not zap\");\n        onlyOwnerIfPaused(10);\n        // Check the pool in case its been updated.\n        updatePoolForVault(vaultId);\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        require(pool.stakingToken != address(0), \"LPStaking: Nonexistent pool\");\n        IERC20Upgradeable(pool.stakingToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n        _rewardDistributionTokenAddr(pool).timelockMint(\n            account,\n            amount,\n            timelockLength\n        );\n        emit Deposit(vaultId, pool.stakingToken, amount, account, timelockLength);\n    }\n\n    function exit(uint256 vaultId) external {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        _claimRewards(pool, msg.sender);\n        _withdraw(vaultId, pool, balanceOf(vaultId, msg.sender), msg.sender);\n    }\n\n    function emergencyExitAndClaim(address _stakingToken, address _rewardToken)\n        external\n    {\n        StakingPool memory pool = StakingPool(_stakingToken, _rewardToken);\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\n            pool\n        );\n        require(isContract(address(dist)), \"Not a pool\");\n        _claimRewards(pool, msg.sender);\n        _withdraw(INFTXVault(_rewardToken).vaultId(), pool, dist.balanceOf(msg.sender), msg.sender);\n    }\n\n    function emergencyExit(address _stakingToken, address _rewardToken)\n        external\n    {\n        StakingPool memory pool = StakingPool(_stakingToken, _rewardToken);\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\n            pool\n        );\n        require(isContract(address(dist)), \"Not a pool\");\n        _withdraw(INFTXVault(_rewardToken).vaultId(), pool, dist.balanceOf(msg.sender), msg.sender);\n    }\n\n    function emergencyMigrate(uint256 vaultId) external {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        IRewardDistributionToken unusedDist = _unusedRewardDistributionTokenAddr(\n                pool\n            );\n        IRewardDistributionToken oldDist = _oldRewardDistributionTokenAddr(\n            pool\n        );\n\n        uint256 unusedDistBal;\n        if (isContract(address(unusedDist))) {\n            unusedDistBal = unusedDist.balanceOf(msg.sender);\n            if (unusedDistBal > 0) {\n                unusedDist.burnFrom(msg.sender, unusedDistBal);\n            }\n        }\n        uint256 oldDistBal;\n        if (isContract(address(oldDist))) {\n            oldDistBal = oldDist.balanceOf(msg.sender);\n            if (oldDistBal > 0) {\n                oldDist.withdrawReward(msg.sender);\n                oldDist.burnFrom(msg.sender, oldDistBal);\n            }\n        }\n\n        TimelockRewardDistributionTokenImpl newDist = _rewardDistributionTokenAddr(\n                pool\n            );\n        if (!isContract(address(newDist))) {\n            address deployedDist = _deployDividendToken(pool);\n            require(\n                deployedDist == address(newDist),\n                \"Not deploying proper distro\"\n            );\n            emit PoolUpdated(vaultId, deployedDist);\n        }\n        require(unusedDistBal + oldDistBal > 0, \"Nothing to migrate\");\n        newDist.mint(msg.sender, unusedDistBal + oldDistBal);\n    }\n\n    function withdraw(uint256 vaultId, uint256 amount) external {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        _claimRewards(pool, msg.sender);\n        _withdraw(vaultId, pool, amount, msg.sender);\n    }\n\n    function claimRewards(uint256 vaultId) public {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        _claimRewards(pool, msg.sender);\n    }\n\n    function claimMultipleRewards(uint256[] calldata vaultIds) external {\n        uint256 length = vaultIds.length;\n        for (uint256 i; i < length; ++i) {\n            claimRewards(vaultIds[i]);\n        }\n    }\n\n    function newRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (TimelockRewardDistributionTokenImpl)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        if (pool.stakingToken == address(0)) {\n            return TimelockRewardDistributionTokenImpl(address(0));\n        }\n        return _rewardDistributionTokenAddr(pool);\n    }\n\n    function rewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (IRewardDistributionToken)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        if (pool.stakingToken == address(0)) {\n            return IRewardDistributionToken(address(0));\n        }\n        return _unusedRewardDistributionTokenAddr(pool);\n    }\n\n    function oldRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        if (pool.stakingToken == address(0)) {\n            return address(0);\n        }\n        return address(_oldRewardDistributionTokenAddr(pool));\n    }\n\n    function unusedRewardDistributionToken(uint256 vaultId)\n        external\n        view\n        returns (address)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        if (pool.stakingToken == address(0)) {\n            return address(0);\n        }\n        return address(_unusedRewardDistributionTokenAddr(pool));\n    }\n\n    function rewardDistributionTokenAddr(\n        address stakedToken,\n        address rewardToken\n    ) public view returns (address) {\n        StakingPool memory pool = StakingPool(stakedToken, rewardToken);\n        return address(_rewardDistributionTokenAddr(pool));\n    }\n\n    function balanceOf(uint256 vaultId, address addr)\n        public\n        view\n        returns (uint256)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\n            pool\n        );\n        require(isContract(address(dist)), \"Not a pool\");\n        return dist.balanceOf(addr);\n    }\n\n    function oldBalanceOf(uint256 vaultId, address addr)\n        public\n        view\n        returns (uint256)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        IRewardDistributionToken dist = _oldRewardDistributionTokenAddr(pool);\n        require(isContract(address(dist)), \"Not a pool\");\n        return dist.balanceOf(addr);\n    }\n\n    function unusedBalanceOf(uint256 vaultId, address addr)\n        public\n        view\n        returns (uint256)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        IRewardDistributionToken dist = _unusedRewardDistributionTokenAddr(\n            pool\n        );\n        require(isContract(address(dist)), \"Not a pool\");\n        return dist.balanceOf(addr);\n    }\n\n    function lockedUntil(uint256 vaultId, address who)\n        external\n        view\n        returns (uint256)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\n            pool\n        );\n        return dist.timelockUntil(who);\n    }\n\n    function lockedLPBalance(uint256 vaultId, address who)\n        external\n        view\n        returns (uint256)\n    {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        TimelockRewardDistributionTokenImpl dist = _rewardDistributionTokenAddr(\n            pool\n        );\n        if (block.timestamp > dist.timelockUntil(who)) {\n            return 0;\n        }\n        return dist.balanceOf(who);\n    }\n\n    function _claimRewards(StakingPool memory pool, address account) internal {\n        require(pool.stakingToken != address(0), \"LPStaking: Nonexistent pool\");\n        _rewardDistributionTokenAddr(pool).withdrawReward(account);\n    }\n\n    function _withdraw(\n        uint256 vaultId,\n        StakingPool memory pool,\n        uint256 amount,\n        address account\n    ) internal {\n        require(pool.stakingToken != address(0), \"LPStaking: Nonexistent pool\");\n        _rewardDistributionTokenAddr(pool).burnFrom(account, amount);\n        IERC20Upgradeable(pool.stakingToken).safeTransfer(account, amount);\n        emit Withdraw(vaultId, pool.stakingToken, amount, account);\n    }\n\n    function _deployDividendToken(StakingPool memory pool)\n        internal\n        returns (address)\n    {\n        // Changed to use new nonces.\n        bytes32 salt = keccak256(\n            abi.encodePacked(pool.stakingToken, pool.rewardToken, uint256(2))\n        );\n        address rewardDistToken = ClonesUpgradeable.cloneDeterministic(\n            address(newTimelockRewardDistTokenImpl),\n            salt\n        );\n        string memory name = stakingTokenProvider.nameForStakingToken(\n            pool.rewardToken\n        );\n        TimelockRewardDistributionTokenImpl(rewardDistToken)\n            .__TimelockRewardDistributionToken_init(\n                IERC20Upgradeable(pool.rewardToken),\n                name,\n                name\n            );\n        return rewardDistToken;\n    }\n\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\n    function _rewardDistributionTokenAddr(StakingPool memory pool)\n        public\n        view\n        returns (TimelockRewardDistributionTokenImpl)\n    {\n        bytes32 salt = keccak256(\n            abi.encodePacked(\n                pool.stakingToken,\n                pool.rewardToken,\n                uint256(2) /* small nonce to change tokens */\n            )\n        );\n        address tokenAddr = ClonesUpgradeable.predictDeterministicAddress(\n            address(newTimelockRewardDistTokenImpl),\n            salt\n        );\n        return TimelockRewardDistributionTokenImpl(tokenAddr);\n    }\n\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\n    function _oldRewardDistributionTokenAddr(StakingPool memory pool)\n        public\n        view\n        returns (IRewardDistributionToken)\n    {\n        bytes32 salt = keccak256(\n            abi.encodePacked(pool.stakingToken, pool.rewardToken, uint256(1))\n        );\n        address tokenAddr = ClonesUpgradeable.predictDeterministicAddress(\n            address(rewardDistTokenImpl),\n            salt\n        );\n        return IRewardDistributionToken(tokenAddr);\n    }\n\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\n    function _unusedRewardDistributionTokenAddr(StakingPool memory pool)\n        public\n        view\n        returns (IRewardDistributionToken)\n    {\n        bytes32 salt = keccak256(\n            abi.encodePacked(pool.stakingToken, pool.rewardToken)\n        );\n        address tokenAddr = ClonesUpgradeable.predictDeterministicAddress(\n            address(rewardDistTokenImpl),\n            salt\n        );\n        return IRewardDistributionToken(tokenAddr);\n    }\n\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    function retrieveTokens(\n        uint256 vaultId,\n        uint256 amount,\n        address from,\n        address to\n    ) public onlyOwner {\n        StakingPool memory pool = vaultStakingInfo[vaultId];\n        TimelockRewardDistributionTokenImpl xSlp = _rewardDistributionTokenAddr(\n            pool\n        );\n        xSlp.burnFrom(from, amount);\n        xSlp.mint(to, amount);\n    }\n}\n"
    },
    "contracts/solidity/NFTXMarketplace0xZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interface/INFTXVault.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./testing/IERC1155.sol\";\nimport \"./testing/ERC721Holder.sol\";\nimport \"./testing/ERC1155Holder.sol\";\nimport \"./util/Ownable.sol\";\nimport \"./util/ReentrancyGuard.sol\";\nimport \"./util/SafeERC20.sol\";\n\n\n/**\n * @notice A partial WETH interface.\n */\n\ninterface IWETH {\n  function deposit() external payable;\n  function transfer(address to, uint value) external returns (bool);\n  function withdraw(uint) external;\n  function balanceOf(address to) external view returns (uint256);\n}\n\n\n/**\n * @notice Sets up a marketplace zap to interact with the 0x protocol. The 0x contract that\n * is hit later on handles the token conversion based on parameters that are sent from the\n * frontend.\n * \n * @author Twade\n */\n\ncontract NFTXMarketplace0xZap is Ownable, ReentrancyGuard, ERC721Holder, ERC1155Holder {\n\n  using SafeERC20 for IERC20;\n\n  /// @notice Allows zap to be paused\n  bool public paused = false;\n\n  /// @notice Sets our 0x swap target\n  address payable private immutable swapTarget;\n  \n  /// @notice An interface for the WETH contract\n  IWETH public immutable WETH;\n\n  /// @notice An interface for the NFTX Vault Factory contract\n  INFTXVaultFactory public immutable nftxFactory;\n  address public immutable feeDistributor;\n\n  /// @notice The vToken threshold below which dust is sent to feeDistributor, else back to the user\n  uint256 public dustThreshold;\n\n  /// @notice A mapping of NFTX Vault IDs to their address corresponding vault contract address\n  mapping(uint256 => address) public nftxVaultAddresses;\n\n  // Set a constant address for specific contracts that need special logic\n  address constant CRYPTO_PUNKS = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n\n  /// @notice Emitted by the `buyAndRedeem` function.\n  /// @param count The number of tokens affected by the event\n  /// @param ethSpent The amount of ETH spent in the buy\n  /// @param to The user affected by the event\n  event Buy(uint256 count, uint256 ethSpent, address to);\n\n  /// @notice Emitted by the `mintAndSell` functions.\n  /// @param count The number of tokens affected by the event\n  /// @param ethReceived The amount of ETH received in the sell\n  /// @param to The user affected by the event\n  event Sell(uint256 count, uint256 ethReceived, address to);\n\n  /// @notice Emitted by the `buyAndSwap` functions.\n  /// @param count The number of tokens affected by the event\n  /// @param ethSpent The amount of ETH spent in the swap\n  /// @param to The user affected by the event\n  event Swap(uint256 count, uint256 ethSpent, address to);\n\n  /// @notice Emitted when dust is returned after a transaction.\n  /// @param ethAmount Amount of ETH returned to user\n  /// @param vTokenAmount Amount of vToken returned to user\n  /// @param to The user affected by the event\n  event DustReturned(uint256 ethAmount, uint256 vTokenAmount, address to);\n\n\n  /**\n   * @notice Initialises our zap by setting contract addresses onto their\n   * respective interfaces.\n   * \n   * @param _nftxFactory NFTX Vault Factory contract address\n   * @param _WETH WETH contract address\n   * @param _swapTarget The swap target specified by the 0x protocol\n   */\n\n  constructor(address _nftxFactory, address _WETH, address payable _swapTarget, uint256 _dustThreshold) Ownable() ReentrancyGuard() {\n    nftxFactory = INFTXVaultFactory(_nftxFactory);\n    WETH = IWETH(_WETH);\n    swapTarget = _swapTarget;\n    feeDistributor = INFTXVaultFactory(_nftxFactory).feeDistributor();\n    dustThreshold = _dustThreshold;\n  }\n\n\n  /**\n   * @notice Mints tokens from our NFTX vault and sells them on 0x.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param ids An array of token IDs to be minted\n   * @param swapCallData The `data` field from the API response\n   * @param to The recipient of ETH from the tx\n   */\n\n  function mintAndSell721(\n    uint256 vaultId,\n    uint256[] calldata ids,\n    bytes calldata swapCallData,\n    address payable to\n  ) external nonReentrant onlyOwnerIfPaused {\n    // Check that we aren't burning tokens or sending to ourselves\n    require(to != address(0) && to != address(this), 'Invalid recipient');\n\n    // Check that we have been provided IDs\n    require(ids.length != 0, 'Must send IDs');\n\n    // Mint our 721s against the vault\n    address vault = _mint721(vaultId, ids);\n\n    // Sell our vault token for WETH\n    uint256 amount = _fillQuote(vault, address(WETH), swapCallData);\n\n    // convert WETH to ETH and send to `to`\n    _transferAllWETH(to);\n\n    // Emit our sale event\n    emit Sell(ids.length, amount, to);\n\n    // Handle vault token dust\n    _transferDust(vault, false);\n  }\n\n\n  /**\n   * @notice Purchases vault tokens from 0x with WETH and then swaps the tokens for\n   * either random or specific token IDs from the vault. The specified recipient will\n   * receive the ERC721 tokens, as well as any WETH dust that is left over from the tx.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param idsIn An array of random token IDs to be minted\n   * @param specificIds An array of any specific token IDs to be minted\n   * @param swapCallData The `data` field from the API response\n   * @param to The recipient of the token IDs from the tx\n   */\n\n  function buyAndSwap721(\n    uint256 vaultId, \n    uint256[] calldata idsIn, \n    uint256[] calldata specificIds,\n    bytes calldata swapCallData,\n    address payable to\n  ) external payable nonReentrant onlyOwnerIfPaused {\n    // Check that we aren't burning tokens or sending to ourselves\n    require(to != address(0) && to != address(this), 'Invalid recipient');\n\n    // Check that we have been provided IDs\n    require(idsIn.length != 0, 'Must send IDs');\n\n    // Check that we have a message value sent\n    require(msg.value > 0, 'Invalid amount');\n\n    // Wrap ETH into WETH for our contract from the sender\n    WETH.deposit{value: msg.value}();\n\n    // Get our NFTX vault\n    address vault = _vaultAddress(vaultId);\n\n    // Buy enough vault tokens to fuel our buy\n    uint256 amount = _fillQuote(address(WETH), vault, swapCallData);\n\n    // Swap our tokens for the IDs requested\n    _swap721(vaultId, idsIn, specificIds, to);\n    emit Swap(idsIn.length, amount, to);\n\n    // Transfer dust ETH to sender and handle vault token dust\n    _transferDust(vault, true);\n  }\n\n\n  /**\n   * @notice Purchases vault tokens from 0x with WETH and then redeems the tokens for\n   * either random or specific token IDs from the vault. The specified recipient will\n   * receive the ERC721 tokens, as well as any WETH dust that is left over from the tx.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param amount The number of tokens to buy\n   * @param specificIds An array of any specific token IDs to be minted\n   * @param swapCallData The `data` field from the API response\n   * @param to The recipient of the token IDs from the tx\n   */\n\n  function buyAndRedeem(\n    uint256 vaultId,\n    uint256 amount,\n    uint256[] calldata specificIds, \n    bytes calldata swapCallData,\n    address payable to\n  ) external payable nonReentrant onlyOwnerIfPaused {\n    // Check that we aren't burning tokens or sending to ourselves\n    require(to != address(0) && to != address(this), 'Invalid recipient');\n\n    // Check that we have an amount specified\n    require(amount > 0, 'Must send amount');\n\n    // Wrap ETH into WETH for our contract from the sender\n    WETH.deposit{value: msg.value}();\n\n    // Get our vault address information\n    address vault = _vaultAddress(vaultId);\n\n    // Buy vault tokens that will cover our transaction\n    uint256 quoteAmount = _fillQuote(address(WETH), vault, swapCallData);\n\n    // check if received sufficient vault tokens\n    require(quoteAmount >= amount * 1e18, 'Insufficient vault tokens');\n\n    // Redeem token IDs from the vault\n    _redeem(vaultId, amount, specificIds, to);\n    emit Buy(amount, quoteAmount, to);\n\n    // Transfer dust ETH to sender and handle vault token dust\n    _transferDust(vault, true);\n  }\n\n\n  /**\n   * @notice Mints tokens from our NFTX vault and sells them on 0x.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param ids An array of token IDs to be minted\n   * @param amounts The number of the corresponding ID to be minted\n   * @param swapCallData The `data` field from the API response\n   * @param to The recipient of ETH from the tx\n   */\n\n  function mintAndSell1155(\n    uint256 vaultId,\n    uint256[] calldata ids,\n    uint256[] calldata amounts,\n    bytes calldata swapCallData,\n    address payable to\n  ) external nonReentrant onlyOwnerIfPaused {\n    // Check that we aren't burning tokens or sending to ourselves\n    require(to != address(0) && to != address(this), 'Invalid recipient');\n\n    // Get a sum of the total number of IDs we have sent up, and validate that\n    // the data sent through is valid.\n    (, uint totalAmount) = _validate1155Ids(ids, amounts);\n\n    // Mint our 1155s against the vault\n    address vault = _mint1155(vaultId, ids, amounts);\n\n    // Sell our vault token for WETH\n    uint256 amount = _fillQuote(vault, address(WETH), swapCallData);\n\n    // convert WETH to ETH and send to `to`\n    _transferAllWETH(to);\n\n    // Emit our sale event\n    emit Sell(totalAmount, amount, to);\n\n    // Handle vault token dust\n    _transferDust(vault, false);\n  }\n\n\n  /**\n   * @notice Purchases vault tokens from 0x with WETH and then swaps the tokens for\n   * either random or specific token IDs from the vault. The specified recipient will\n   * receive the ERC1155 tokens, as well as any WETH dust that is left over from the tx.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param idsIn An array of random token IDs to be minted\n   * @param specificIds An array of any specific token IDs to be minted\n   * @param swapCallData The `data` field from the API response\n   * @param to The recipient of token IDs from the tx\n   */\n\n  function buyAndSwap1155(\n    uint256 vaultId, \n    uint256[] calldata idsIn,\n    uint256[] calldata amounts,\n    uint256[] calldata specificIds,\n    bytes calldata swapCallData,\n    address payable to\n  ) external payable nonReentrant onlyOwnerIfPaused {\n    // Check that we aren't burning tokens or sending to ourselves\n    require(to != address(0) && to != address(this), 'Invalid recipient');\n\n    // Check that we have a message value sent\n    require(msg.value > 0, 'Invalid amount');\n\n    // Get a sum of the total number of IDs we have sent up, and validate that\n    // the data sent through is valid.\n    (, uint totalAmount) = _validate1155Ids(idsIn, amounts);\n\n    // Wrap ETH into WETH for our contract from the sender\n    WETH.deposit{value: msg.value}();\n\n    // Get our NFTX vault\n    address vault = _vaultAddress(vaultId);\n\n    // Buy enough vault tokens to fuel our buy\n    uint256 amount = _fillQuote(address(WETH), vault, swapCallData);\n\n    // Swap our tokens for the IDs requested\n    _swap1155(vaultId, idsIn, amounts, specificIds, to);\n    emit Swap(totalAmount, amount, to);\n\n    // Transfer dust ETH to sender and handle vault token dust\n    _transferDust(vault, true);\n  }\n\n\n  /**\n   * @param vaultId The ID of the NFTX vault\n   * @param ids An array of token IDs to be minted\n   */\n\n  function _mint721(uint256 vaultId, uint256[] memory ids) internal returns (address) {\n    // Get our vault address information\n    address vault = _vaultAddress(vaultId);\n\n    // Transfer tokens from the message sender to the vault\n    address assetAddress = INFTXVault(vault).assetAddress();\n    uint256 length = ids.length;\n\n    for (uint256 i; i < length;) {\n      transferFromERC721(assetAddress, ids[i], vault);\n\n      if (assetAddress == CRYPTO_PUNKS) {\n        _approveERC721(assetAddress, ids[i], vault);\n      }\n\n      unchecked { ++i; }\n    }\n\n    // Mint our tokens from the vault to this contract\n    uint256[] memory emptyIds;\n    INFTXVault(vault).mint(ids, emptyIds);\n\n    return vault;\n  }\n\n\n  /**\n   * @param vaultId The ID of the NFTX vault\n   * @param ids An array of token IDs to be minted\n   * @param amounts An array of amounts whose indexes map to the ids array\n   */\n\n  function _mint1155(uint256 vaultId, uint256[] memory ids, uint256[] memory amounts) internal returns (address) {\n    // Get our vault address information\n    address vault = _vaultAddress(vaultId);\n\n    // Transfer tokens from the message sender to the vault\n    address assetAddress = INFTXVault(vault).assetAddress();\n    IERC1155(assetAddress).safeBatchTransferFrom(msg.sender, address(this), ids, amounts, \"\");\n    IERC1155(assetAddress).setApprovalForAll(vault, true);\n\n    // Mint our tokens from the vault to this contract\n    INFTXVault(vault).mint(ids, amounts);\n\n    return vault;\n  }\n\n\n  /**\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param idsIn An array of token IDs to be minted\n   * @param idsOut An array of token IDs to be redeemed\n   * @param to The recipient of the idsOut from the tx\n   */\n\n  function _swap721(\n    uint256 vaultId, \n    uint256[] memory idsIn,\n    uint256[] memory idsOut,\n    address to\n  ) internal returns (address) {\n    // Get our vault address information\n    address vault = _vaultAddress(vaultId);\n\n    // Transfer tokens to zap\n    address assetAddress = INFTXVault(vault).assetAddress();\n    uint256 length = idsIn.length;\n\n    for (uint256 i; i < length;) {\n      transferFromERC721(assetAddress, idsIn[i], vault);\n\n      if (assetAddress == CRYPTO_PUNKS) {\n        _approveERC721(assetAddress, idsIn[i], vault);\n      }\n\n      unchecked { ++i; }\n    }\n\n    // Swap our tokens\n    uint256[] memory emptyIds;\n    INFTXVault(vault).swapTo(idsIn, emptyIds, idsOut, to);\n\n    return vault;\n  }\n\n\n  /**\n   * @notice Swaps 1155 tokens, transferring them from the recipient to this contract, and\n   * then sending them to the NFTX vault, that sends them to the recipient.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param idsIn The IDs owned by the sender to be swapped\n   * @param amounts The number of each corresponding ID being swapped\n   * @param idsOut The requested IDs to be swapped for\n   * @param to The recipient of the swapped tokens\n   * \n   * @return address The address of the NFTX vault\n   */\n\n  function _swap1155(\n    uint256 vaultId, \n    uint256[] memory idsIn,\n    uint256[] memory amounts,\n    uint256[] memory idsOut,\n    address to\n  ) internal returns (address) {\n    // Get our vault address information\n    address vault = _vaultAddress(vaultId);\n\n    // Transfer tokens to zap and mint to NFTX.\n    address assetAddress = INFTXVault(vault).assetAddress();\n    IERC1155(assetAddress).safeBatchTransferFrom(msg.sender, address(this), idsIn, amounts, \"\");\n    IERC1155(assetAddress).setApprovalForAll(vault, true);\n    INFTXVault(vault).swapTo(idsIn, amounts, idsOut, to);\n    \n    return vault;\n  }\n\n\n  /**\n   * @notice Redeems tokens from a vault to a recipient.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param amount The number of tokens to be redeemed\n   * @param specificIds Specified token IDs if desired, otherwise will be _random_\n   * @param to The recipient of the token\n   */\n\n  function _redeem(uint256 vaultId, uint256 amount, uint256[] memory specificIds, address to) internal {\n    INFTXVault(_vaultAddress(vaultId)).redeemTo(amount, specificIds, to);\n  }\n\n\n  /**\n   * @notice Transfers our ERC721 tokens to a specified recipient.\n   * \n   * @param assetAddr Address of the asset being transferred\n   * @param tokenId The ID of the token being transferred\n   * @param to The address the token is being transferred to\n   */\n\n  function transferFromERC721(address assetAddr, uint256 tokenId, address to) internal virtual {\n    bytes memory data;\n\n    if (assetAddr == CRYPTO_PUNKS) {\n      // Fix here for frontrun attack.\n      bytes memory punkIndexToAddress = abi.encodeWithSignature(\"punkIndexToAddress(uint256)\", tokenId);\n      (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\n      (address nftOwner) = abi.decode(result, (address));\n      require(checkSuccess && nftOwner == msg.sender, \"Not the NFT owner\");\n      data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\n    } else {\n      // We push to the vault to avoid an unneeded transfer.\n      data = abi.encodeWithSignature(\"safeTransferFrom(address,address,uint256)\", msg.sender, to, tokenId);\n    }\n\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\n    require(success, string(resultData));\n  }\n\n\n  /**\n   * @notice Approves our ERC721 tokens to be transferred.\n   * \n   * @dev This is only required to provide special logic for Cryptopunks.\n   * \n   * @param assetAddr Address of the asset being transferred\n   * @param tokenId The ID of the token being transferred\n   * @param to The address the token is being transferred to\n   */\n\n  function _approveERC721(address assetAddr, uint256 tokenId, address to) internal virtual {\n    if (assetAddr != CRYPTO_PUNKS) {\n      return;\n    }\n\n    bytes memory data = abi.encodeWithSignature(\"offerPunkForSaleToAddress(uint256,uint256,address)\", tokenId, 0, to);\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\n    require(success, string(resultData));\n  }\n\n\n  /**\n   * @notice Swaps ERC20->ERC20 tokens held by this contract using a 0x-API quote.\n   * \n   * @dev Must attach ETH equal to the `value` field from the API response.\n   * \n   * @param sellToken The `sellTokenAddress` field from the API response\n   * @param buyToken The `buyTokenAddress` field from the API response\n   * @param swapCallData The `data` field from the API response\n   */\n\n  function _fillQuote(\n    address sellToken,\n    address buyToken,\n    bytes calldata swapCallData\n  ) internal returns (uint256) {\n    // Track our balance of the buyToken to determine how much we've bought.\n    uint256 boughtAmount = IERC20(buyToken).balanceOf(address(this));\n\n    // Give `swapTarget` an infinite allowance to spend this contract's `sellToken`.\n    // Note that for some tokens (e.g., USDT, KNC), you must first reset any existing\n    // allowance to 0 before being able to update it.\n    require(IERC20(sellToken).approve(swapTarget, type(uint256).max), 'Unable to approve contract');\n\n    // Call the encoded swap function call on the contract at `swapTarget`\n    (bool success,) = swapTarget.call(swapCallData);\n    require(success, 'SWAP_CALL_FAILED');\n\n    // Use our current buyToken balance to determine how much we've bought.\n    return IERC20(buyToken).balanceOf(address(this)) - boughtAmount;\n  }\n\n\n  /**\n   * @notice Transfers remaining ETH to msg.sender.\n   * And transfers vault token dust to feeDistributor if below dustThreshold, else to msg.sender \n   * \n   * @param vault Address of the vault token\n   * @param isWETHDust Checks and transfers WETH dust if boolean is true\n   */\n\n  function _transferDust(address vault, bool isWETHDust) internal {\n    uint256 remaining;\n    if(isWETHDust) {\n      remaining = _transferAllWETH(msg.sender);\n    }\n\n    uint256 dustBalance = IERC20(vault).balanceOf(address(this));\n    address dustRecipient;\n    if(dustBalance > 0) {\n      if (dustBalance > dustThreshold) {\n        dustRecipient = msg.sender;\n      } else {\n        dustRecipient = feeDistributor;\n      }\n\n      IERC20(vault).transfer(dustRecipient, dustBalance);\n    }\n\n    emit DustReturned(remaining, dustBalance, dustRecipient);\n  }\n\n  function _transferAllWETH(address recipient) internal returns(uint256 amount) {\n    amount = WETH.balanceOf(address(this));\n    if (amount > 0) {\n      // Unwrap our WETH into ETH and transfer it to the recipient\n      WETH.withdraw(amount);\n      (bool success, ) = payable(recipient).call{value: amount}(\"\");\n      require(success, \"Unable to send unwrapped WETH\");\n    }\n  }\n\n\n  /**\n   * @notice Allows 1155 IDs and amounts to be validated.\n   * \n   * @param ids The IDs of the 1155 tokens.\n   * @param amounts The number of each corresponding token to process.\n   * \n   * @return totalIds The number of different IDs being sent.\n   * @return totalAmount The total number of IDs being processed.\n   */\n\n  function _validate1155Ids(\n    uint[] calldata ids,\n    uint[] calldata amounts\n  ) internal pure returns (\n    uint totalIds,\n    uint totalAmount\n  ) {\n    totalIds = ids.length;\n\n    // Check that we have been provided IDs\n    require(totalIds != 0, 'Must send IDs');\n    require(totalIds <= amounts.length, 'Must define amounts against IDs');\n\n    // Sum the amounts for our emitted events\n    for (uint i; i < totalIds;) {\n      require(amounts[i] > 0, 'Invalid 1155 amount');\n\n      unchecked {\n        totalAmount += amounts[i];\n        ++i;\n      }\n    }\n  }\n\n\n  /**\n   * @notice Maps a cached NFTX vault address against a vault ID.\n   * \n   * @param vaultId The ID of the NFTX vault\n   */\n\n  function _vaultAddress(uint256 vaultId) internal returns (address) {\n    if (nftxVaultAddresses[vaultId] == address(0)) {\n      nftxVaultAddresses[vaultId] = nftxFactory.vault(vaultId);\n    }\n\n    require(nftxVaultAddresses[vaultId] != address(0), 'Vault does not exist');\n\n    return nftxVaultAddresses[vaultId];\n  }\n\n\n  /**\n   * @notice Allows our zap to be paused to prevent any processing.\n   * \n   * @param _paused New pause state\n   */\n\n  function pause(bool _paused) external onlyOwner {\n    paused = _paused;\n  }\n\n  /**\n   * @notice Allows owner to modify dustThreshold value\n   * \n   * @param _dustThreshold New dustThreshold\n   */\n\n  function setDustThreshold(uint256 _dustThreshold) external onlyOwner {\n    dustThreshold = _dustThreshold;\n  }\n\n\n  /**\n   * @notice Allows our owner to withdraw and tokens in the contract.\n   * \n   * @param token The address of the token to be rescued\n   */\n\n  function rescue(address token) external onlyOwner {\n    if (token == address(0)) {\n      (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n      require(success, \"Address: unable to send value\");\n    } else {\n      IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\n    }\n  }\n\n\n  /**\n   * @notice A modifier that only allows the owner to interact with the function\n   * if the contract is paused. If the contract is not paused then anyone can\n   * interact with the function.\n   */\n\n  modifier onlyOwnerIfPaused() {\n    require(!paused || msg.sender == owner(), \"Zap is paused\");\n    _;\n  }\n\n\n  /**\n   * @notice Allows our contract to receive any assets.\n   */\n\n  receive() external payable {}\n\n}"
    },
    "contracts/solidity/NFTXMarketplaceZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/SafeERC20Upgradeable.sol\";\nimport \"./interface/INFTXLPStaking.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/INFTXFeeDistributor.sol\";\nimport \"./interface/INFTXVault.sol\";\nimport \"./interface/IUniswapV2Router01.sol\";\nimport \"./token/ERC721HolderUpgradeable.sol\";\nimport \"./token/ERC1155HolderUpgradeable.sol\";\nimport \"./token/IERC1155Upgradeable.sol\";\n\n// Authors: @0xKiwi_.\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n\n    function balanceOf(address to) external view returns (uint256);\n}\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ncontract NFTXMarketplaceZap is\n    Ownable,\n    ReentrancyGuard,\n    ERC721HolderUpgradeable,\n    ERC1155HolderUpgradeable\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IWETH public immutable WETH;\n    INFTXLPStaking public immutable lpStaking;\n    INFTXVaultFactory public immutable nftxFactory;\n    IUniswapV2Router01 public immutable sushiRouter;\n\n    uint256 constant BASE = 1e18;\n\n    event Buy(uint256 count, uint256 ethSpent, address to);\n    event Sell(uint256 count, uint256 ethReceived, address to);\n    event Swap(uint256 count, uint256 ethSpent, address to);\n\n    constructor(address _nftxFactory, address _sushiRouter)\n        Ownable()\n        ReentrancyGuard()\n    {\n        nftxFactory = INFTXVaultFactory(_nftxFactory);\n        lpStaking = INFTXLPStaking(\n            INFTXFeeDistributor(\n                INFTXVaultFactory(_nftxFactory).feeDistributor()\n            ).lpStaking()\n        );\n        sushiRouter = IUniswapV2Router01(_sushiRouter);\n        WETH = IWETH(IUniswapV2Router01(_sushiRouter).WETH());\n        IERC20Upgradeable(address(IUniswapV2Router01(_sushiRouter).WETH()))\n            .safeApprove(_sushiRouter, type(uint256).max);\n    }\n\n    function mintAndSell721(\n        uint256 vaultId,\n        uint256[] calldata ids,\n        uint256 minEthOut,\n        address[] calldata path,\n        address to\n    ) external nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(ids.length != 0);\n        (address vault, uint256 vaultBalance) = _mint721(vaultId, ids);\n        uint256[] memory amounts = _sellVaultTokenETH(\n            vault,\n            minEthOut,\n            vaultBalance,\n            path,\n            to\n        );\n        emit Sell(ids.length, amounts[amounts.length - 1], to);\n    }\n\n    function mintAndSell721WETH(\n        uint256 vaultId,\n        uint256[] calldata ids,\n        uint256 minWethOut,\n        address[] calldata path,\n        address to\n    ) external nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(ids.length != 0);\n        (address vault, uint256 vaultBalance) = _mint721(vaultId, ids);\n        uint256[] memory amounts = _sellVaultTokenWETH(\n            vault,\n            minWethOut,\n            vaultBalance,\n            path,\n            to\n        );\n        emit Sell(ids.length, amounts[amounts.length - 1], to);\n    }\n\n    function buyAndSwap721(\n        uint256 vaultId,\n        uint256[] calldata idsIn,\n        uint256[] calldata specificIds,\n        address[] calldata path,\n        address to\n    ) external payable nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(idsIn.length != 0);\n        WETH.deposit{value: msg.value}();\n        INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n        uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) +\n            (vault.randomSwapFee() * (idsIn.length - specificIds.length));\n        uint256[] memory amounts = _buyVaultToken(redeemFees, msg.value, path);\n        _swap721(vaultId, idsIn, specificIds, to);\n\n        emit Swap(idsIn.length, amounts[0], to);\n\n        // Return extras.\n        uint256 remaining = WETH.balanceOf(address(this));\n        WETH.withdraw(remaining);\n        (bool success, ) = payable(to).call{value: remaining}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    function buyAndSwap721WETH(\n        uint256 vaultId,\n        uint256[] calldata idsIn,\n        uint256[] calldata specificIds,\n        uint256 maxWethIn,\n        address[] calldata path,\n        address to\n    ) external nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(idsIn.length != 0);\n        IERC20Upgradeable(address(WETH)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            maxWethIn\n        );\n        INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n        uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) +\n            (vault.randomSwapFee() * (idsIn.length - specificIds.length));\n        uint256[] memory amounts = _buyVaultToken(redeemFees, maxWethIn, path);\n        _swap721(vaultId, idsIn, specificIds, to);\n\n        emit Swap(idsIn.length, amounts[0], to);\n\n        // Return extras.\n        uint256 remaining = WETH.balanceOf(address(this));\n        if (remaining != 0) {\n            WETH.transfer(to, remaining);\n        }\n    }\n\n    function buyAndSwap1155(\n        uint256 vaultId,\n        uint256[] calldata idsIn,\n        uint256[] calldata amounts,\n        uint256[] calldata specificIds,\n        address[] calldata path,\n        address to\n    ) external payable nonReentrant {\n        require(to != address(0) && to != address(this));\n        uint256 length = idsIn.length;\n        require(length != 0);\n        WETH.deposit{value: msg.value}();\n        uint256 count;\n        for (uint256 i; i < length; ++i) {\n            uint256 amount = amounts[i];\n            require(amount > 0, \"Transferring < 1\");\n            count += amount;\n        }\n        INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n        uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) +\n            (vault.randomSwapFee() * (count - specificIds.length));\n        uint256[] memory swapAmounts = _buyVaultToken(\n            redeemFees,\n            msg.value,\n            path\n        );\n        _swap1155(vaultId, idsIn, amounts, specificIds, to);\n\n        emit Swap(count, swapAmounts[0], to);\n\n        // Return extras.\n        uint256 remaining = WETH.balanceOf(address(this));\n        WETH.withdraw(remaining);\n        (bool success, ) = payable(to).call{value: remaining}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    function buyAndSwap1155WETH(\n        uint256 vaultId,\n        uint256[] calldata idsIn,\n        uint256[] calldata amounts,\n        uint256[] calldata specificIds,\n        uint256 maxWethIn,\n        address[] calldata path,\n        address to\n    ) external payable nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(idsIn.length != 0);\n        uint256 count;\n        for (uint256 i = 0; i < idsIn.length; i++) {\n            uint256 amount = amounts[i];\n            require(amount > 0, \"Transferring < 1\");\n            count += amount;\n        }\n        INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n        uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) +\n            (vault.randomSwapFee() * (count - specificIds.length));\n        IERC20Upgradeable(address(WETH)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            maxWethIn\n        );\n        uint256[] memory swapAmounts = _buyVaultToken(\n            redeemFees,\n            maxWethIn,\n            path\n        );\n        _swap1155(vaultId, idsIn, amounts, specificIds, to);\n\n        emit Swap(count, swapAmounts[0], to);\n\n        // Return extras.\n        uint256 remaining = WETH.balanceOf(address(this));\n        WETH.transfer(to, remaining);\n    }\n\n    function buyAndRedeem(\n        uint256 vaultId,\n        uint256 amount,\n        uint256[] calldata specificIds,\n        address[] calldata path,\n        address to\n    ) external payable nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(amount != 0);\n        WETH.deposit{value: msg.value}();\n        (, uint256 randomRedeemFee, uint256 targetRedeemFee, , ) = nftxFactory\n            .vaultFees(vaultId);\n        uint256 totalFee = (targetRedeemFee * specificIds.length) +\n            (randomRedeemFee * (amount - specificIds.length));\n        uint256[] memory amounts = _buyVaultToken(\n            (amount * BASE) + totalFee,\n            msg.value,\n            path\n        );\n        _redeem(vaultId, amount, specificIds, to);\n\n        emit Buy(amount, amounts[0], to);\n\n        uint256 remaining = WETH.balanceOf(address(this));\n        if (remaining != 0) {\n            WETH.withdraw(remaining);\n            (bool success, ) = payable(to).call{value: remaining}(\"\");\n            require(\n                success,\n                \"Address: unable to send value, recipient may have reverted\"\n            );\n        }\n    }\n\n    function buyAndRedeemWETH(\n        uint256 vaultId,\n        uint256 amount,\n        uint256[] calldata specificIds,\n        uint256 maxWethIn,\n        address[] calldata path,\n        address to\n    ) external nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(amount != 0);\n        uint256 totalFee;\n        {\n            (\n                ,\n                uint256 randomRedeemFee,\n                uint256 targetRedeemFee,\n                ,\n\n            ) = nftxFactory.vaultFees(vaultId);\n            totalFee =\n                (targetRedeemFee * specificIds.length) +\n                (randomRedeemFee * (amount - specificIds.length));\n        }\n        IERC20Upgradeable(address(WETH)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            maxWethIn\n        );\n        uint256[] memory amounts = _buyVaultToken(\n            (amount * BASE) + totalFee,\n            maxWethIn,\n            path\n        );\n        _redeem(vaultId, amount, specificIds, to);\n        emit Buy(amount, amounts[0], to);\n\n        uint256 remaining = WETH.balanceOf(address(this));\n        if (remaining != 0) {\n            WETH.transfer(to, remaining);\n        }\n    }\n\n    function mintAndSell1155(\n        uint256 vaultId,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        uint256 minWethOut,\n        address[] calldata path,\n        address to\n    ) external nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(ids.length != 0);\n        (address vault, uint256 vaultTokenBalance) = _mint1155(\n            vaultId,\n            ids,\n            amounts\n        );\n        uint256[] memory uniAmounts = _sellVaultTokenETH(\n            vault,\n            minWethOut,\n            vaultTokenBalance,\n            path,\n            to\n        );\n\n        uint256 count;\n        uint256 length = ids.length;\n        for (uint256 i; i < length; ++i) {\n            count += amounts[i];\n        }\n        emit Sell(count, uniAmounts[uniAmounts.length - 1], to);\n    }\n\n    function mintAndSell1155WETH(\n        uint256 vaultId,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        uint256 minWethOut,\n        address[] calldata path,\n        address to\n    ) external nonReentrant {\n        require(to != address(0) && to != address(this));\n        require(ids.length != 0);\n        (address vault, uint256 vaultTokenBalance) = _mint1155(\n            vaultId,\n            ids,\n            amounts\n        );\n        _sellVaultTokenWETH(vault, minWethOut, vaultTokenBalance, path, to);\n\n        uint256 count;\n        uint256 length = ids.length;\n        for (uint256 i; i < length; ++i) {\n            count += amounts[i];\n        }\n        emit Sell(count, amounts[amounts.length - 1], to);\n    }\n\n    function _mint721(uint256 vaultId, uint256[] memory ids)\n        internal\n        returns (address, uint256)\n    {\n        address vault = nftxFactory.vault(vaultId);\n\n        // Transfer tokens to zap and mint to NFTX.\n        address assetAddress = INFTXVault(vault).assetAddress();\n        uint256 length = ids.length;\n        for (uint256 i; i < length; ++i) {\n            transferFromERC721(assetAddress, ids[i], vault);\n            approveERC721(assetAddress, vault, ids[i]);\n        }\n        uint256[] memory emptyIds;\n        INFTXVault(vault).mint(ids, emptyIds);\n        uint256 count = ids.length;\n        uint256 balance = (count * BASE) -\n            (count * INFTXVault(vault).mintFee());\n\n        return (vault, balance);\n    }\n\n    function _swap721(\n        uint256 vaultId,\n        uint256[] memory idsIn,\n        uint256[] memory idsOut,\n        address to\n    ) internal returns (address) {\n        address vault = nftxFactory.vault(vaultId);\n\n        // Transfer tokens to zap and mint to NFTX.\n        address assetAddress = INFTXVault(vault).assetAddress();\n        uint256 length = idsIn.length;\n        for (uint256 i; i < length; ++i) {\n            transferFromERC721(assetAddress, idsIn[i], vault);\n            approveERC721(assetAddress, vault, idsIn[i]);\n        }\n        uint256[] memory emptyIds;\n        INFTXVault(vault).swapTo(idsIn, emptyIds, idsOut, to);\n\n        return (vault);\n    }\n\n    function _swap1155(\n        uint256 vaultId,\n        uint256[] memory idsIn,\n        uint256[] memory amounts,\n        uint256[] memory idsOut,\n        address to\n    ) internal returns (address) {\n        address vault = nftxFactory.vault(vaultId);\n\n        // Transfer tokens to zap and mint to NFTX.\n        address assetAddress = INFTXVault(vault).assetAddress();\n        IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(\n            msg.sender,\n            address(this),\n            idsIn,\n            amounts,\n            \"\"\n        );\n        IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\n        INFTXVault(vault).swapTo(idsIn, amounts, idsOut, to);\n\n        return (vault);\n    }\n\n    function _redeem(\n        uint256 vaultId,\n        uint256 amount,\n        uint256[] memory specificIds,\n        address to\n    ) internal {\n        address vault = nftxFactory.vault(vaultId);\n        INFTXVault(vault).redeemTo(amount, specificIds, to);\n    }\n\n    function _mint1155(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal returns (address, uint256) {\n        address vault = nftxFactory.vault(vaultId);\n        require(vault != address(0), \"NFTXZap: Vault does not exist\");\n\n        // Transfer tokens to zap and mint to NFTX.\n        address assetAddress = INFTXVault(vault).assetAddress();\n        IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(\n            msg.sender,\n            address(this),\n            ids,\n            amounts,\n            \"\"\n        );\n        IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\n\n        uint256 count = INFTXVault(vault).mint(ids, amounts);\n        uint256 balance = (count * BASE) -\n            (INFTXVault(vault).mintFee() * count);\n\n        return (vault, balance);\n    }\n\n    function _buyVaultToken(\n        uint256 minTokenOut,\n        uint256 maxWethIn,\n        address[] calldata path\n    ) internal returns (uint256[] memory) {\n        uint256[] memory amounts = sushiRouter.swapTokensForExactTokens(\n            minTokenOut,\n            maxWethIn,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        return amounts;\n    }\n\n    function _sellVaultTokenWETH(\n        address vault,\n        uint256 minWethOut,\n        uint256 maxTokenIn,\n        address[] calldata path,\n        address to\n    ) internal returns (uint256[] memory) {\n        IERC20Upgradeable(vault).safeApprove(address(sushiRouter), maxTokenIn);\n        uint256[] memory amounts = sushiRouter.swapExactTokensForTokens(\n            maxTokenIn,\n            minWethOut,\n            path,\n            to,\n            block.timestamp\n        );\n\n        return amounts;\n    }\n\n    function _sellVaultTokenETH(\n        address vault,\n        uint256 minEthOut,\n        uint256 maxTokenIn,\n        address[] calldata path,\n        address to\n    ) internal returns (uint256[] memory) {\n        IERC20Upgradeable(vault).safeApprove(address(sushiRouter), maxTokenIn);\n        uint256[] memory amounts = sushiRouter.swapExactTokensForETH(\n            maxTokenIn,\n            minEthOut,\n            path,\n            to,\n            block.timestamp\n        );\n\n        return amounts;\n    }\n\n    function transferFromERC721(\n        address assetAddr,\n        uint256 tokenId,\n        address to\n    ) internal virtual {\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n        bytes memory data;\n        if (assetAddr == kitties) {\n            // Cryptokitties.\n            data = abi.encodeWithSignature(\n                \"transferFrom(address,address,uint256)\",\n                msg.sender,\n                to,\n                tokenId\n            );\n        } else if (assetAddr == punks) {\n            // CryptoPunks.\n            // Fix here for frontrun attack. Added in v1.0.2.\n            bytes memory punkIndexToAddress = abi.encodeWithSignature(\n                \"punkIndexToAddress(uint256)\",\n                tokenId\n            );\n            (bool checkSuccess, bytes memory result) = address(assetAddr)\n                .staticcall(punkIndexToAddress);\n            address nftOwner = abi.decode(result, (address));\n            require(\n                checkSuccess && nftOwner == msg.sender,\n                \"Not the NFT owner\"\n            );\n            data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\n        } else {\n            // Default.\n            // We push to the vault to avoid an unneeded transfer.\n            data = abi.encodeWithSignature(\n                \"safeTransferFrom(address,address,uint256)\",\n                msg.sender,\n                to,\n                tokenId\n            );\n        }\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\n        require(success, string(resultData));\n    }\n\n    function approveERC721(\n        address assetAddr,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n        bytes memory data;\n        if (assetAddr == kitties) {\n            // // Cryptokitties.\n            // data = abi.encodeWithSignature(\"approve(address,uint256)\", to, tokenId);\n            // No longer needed to approve with pushing.\n            return;\n        } else if (assetAddr == punks) {\n            // CryptoPunks.\n            data = abi.encodeWithSignature(\n                \"offerPunkForSaleToAddress(uint256,uint256,address)\",\n                tokenId,\n                0,\n                to\n            );\n        } else {\n            // No longer needed to approve with pushing.\n            return;\n        }\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\n        require(success, string(resultData));\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address tokenA, address tokenB)\n        internal\n        view\n        returns (address pair)\n    {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            sushiRouter.factory(),\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n    }\n\n    function rescue(address token) external onlyOwner {\n        if (token == address(0)) {\n            (bool success, ) = payable(msg.sender).call{\n                value: address(this).balance\n            }(\"\");\n            require(\n                success,\n                \"Address: unable to send value, recipient may have reverted\"\n            );\n        } else {\n            IERC20Upgradeable(token).safeTransfer(\n                msg.sender,\n                IERC20Upgradeable(token).balanceOf(address(this))\n            );\n        }\n    }\n\n    receive() external payable {\n        require(msg.sender == address(WETH), \"Only WETH\");\n    }\n}\n"
    },
    "contracts/solidity/NFTXSimpleFeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/ReentrancyGuardUpgradeable.sol\";\nimport \"./util/PausableUpgradeable.sol\";\nimport \"./util/SafeERC20Upgradeable.sol\";\nimport \"./interface/INFTXSimpleFeeDistributor.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/INFTXLPStaking.sol\";\nimport \"./interface/INFTXInventoryStaking.sol\";\n\ncontract NFTXSimpleFeeDistributor is\n    INFTXSimpleFeeDistributor,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    bool public distributionPaused;\n\n    address public override nftxVaultFactory;\n    address public override lpStaking;\n    address public override treasury;\n\n    // Total allocation points per vault.\n    uint256 public override allocTotal;\n    FeeReceiver[] public feeReceivers;\n\n    address public override inventoryStaking;\n\n    event UpdateTreasuryAddress(address newTreasury);\n    event UpdateLPStakingAddress(address newLPStaking);\n    event UpdateInventoryStakingAddress(address newInventoryStaking);\n    event UpdateNFTXVaultFactory(address factory);\n    event PauseDistribution(bool paused);\n\n    event AddFeeReceiver(address receiver, uint256 allocPoint);\n    event UpdateFeeReceiverAlloc(address receiver, uint256 allocPoint);\n    event UpdateFeeReceiverAddress(address oldReceiver, address newReceiver);\n    event RemoveFeeReceiver(address receiver);\n\n    function __SimpleFeeDistributor__init__(\n        address _lpStaking,\n        address _treasury\n    ) public override initializer {\n        __Pausable_init();\n        setTreasuryAddress(_treasury);\n        setLPStakingAddress(_lpStaking);\n\n        _addReceiver(0.8 ether, lpStaking, true);\n    }\n\n    function distribute(uint256 vaultId)\n        external\n        virtual\n        override\n        nonReentrant\n    {\n        require(nftxVaultFactory != address(0));\n        address _vault = INFTXVaultFactory(nftxVaultFactory).vault(vaultId);\n\n        uint256 tokenBalance = IERC20Upgradeable(_vault).balanceOf(\n            address(this)\n        );\n\n        if (distributionPaused || allocTotal == 0) {\n            IERC20Upgradeable(_vault).safeTransfer(treasury, tokenBalance);\n            return;\n        }\n\n        uint256 length = feeReceivers.length;\n        uint256 leftover;\n        for (uint256 i; i < length; ++i) {\n            FeeReceiver memory _feeReceiver = feeReceivers[i];\n            uint256 amountToSend = leftover +\n                ((tokenBalance * _feeReceiver.allocPoint) / allocTotal);\n            uint256 currentTokenBalance = IERC20Upgradeable(_vault).balanceOf(\n                address(this)\n            );\n            amountToSend = amountToSend > currentTokenBalance\n                ? currentTokenBalance\n                : amountToSend;\n            bool complete = _sendForReceiver(\n                _feeReceiver,\n                vaultId,\n                _vault,\n                amountToSend\n            );\n            if (!complete) {\n                uint256 remaining = IERC20Upgradeable(_vault).allowance(\n                    address(this),\n                    _feeReceiver.receiver\n                );\n                IERC20Upgradeable(_vault).safeApprove(_feeReceiver.receiver, 0);\n                leftover = remaining;\n            } else {\n                leftover = 0;\n            }\n        }\n\n        if (leftover != 0) {\n            uint256 currentTokenBalance = IERC20Upgradeable(_vault).balanceOf(\n                address(this)\n            );\n            IERC20Upgradeable(_vault).safeTransfer(\n                treasury,\n                currentTokenBalance\n            );\n        }\n    }\n\n    function addReceiver(\n        uint256 _allocPoint,\n        address _receiver,\n        bool _isContract\n    ) external virtual override onlyOwner {\n        _addReceiver(_allocPoint, _receiver, _isContract);\n    }\n\n    function initializeVaultReceivers(uint256 _vaultId) external override {\n        require(msg.sender == nftxVaultFactory, \"FeeReceiver: not factory\");\n        INFTXLPStaking(lpStaking).addPoolForVault(_vaultId);\n        if (inventoryStaking != address(0))\n            INFTXInventoryStaking(inventoryStaking).deployXTokenForVault(\n                _vaultId\n            );\n    }\n\n    function changeReceiverAlloc(uint256 _receiverIdx, uint256 _allocPoint)\n        public\n        virtual\n        override\n        onlyOwner\n    {\n        require(\n            _receiverIdx < feeReceivers.length,\n            \"FeeDistributor: Out of bounds\"\n        );\n        FeeReceiver storage feeReceiver = feeReceivers[_receiverIdx];\n        allocTotal -= feeReceiver.allocPoint;\n        feeReceiver.allocPoint = _allocPoint;\n        allocTotal += _allocPoint;\n        emit UpdateFeeReceiverAlloc(feeReceiver.receiver, _allocPoint);\n    }\n\n    function changeReceiverAddress(\n        uint256 _receiverIdx,\n        address _address,\n        bool _isContract\n    ) public virtual override onlyOwner {\n        FeeReceiver storage feeReceiver = feeReceivers[_receiverIdx];\n        address oldReceiver = feeReceiver.receiver;\n        feeReceiver.receiver = _address;\n        feeReceiver.isContract = _isContract;\n        emit UpdateFeeReceiverAddress(oldReceiver, _address);\n    }\n\n    function removeReceiver(uint256 _receiverIdx)\n        external\n        virtual\n        override\n        onlyOwner\n    {\n        uint256 arrLength = feeReceivers.length;\n        require(_receiverIdx < arrLength, \"FeeDistributor: Out of bounds\");\n        emit RemoveFeeReceiver(feeReceivers[_receiverIdx].receiver);\n        allocTotal -= feeReceivers[_receiverIdx].allocPoint;\n        // Copy the last element to what is being removed and remove the last element.\n        feeReceivers[_receiverIdx] = feeReceivers[arrLength - 1];\n        feeReceivers.pop();\n    }\n\n    function setTreasuryAddress(address _treasury) public override onlyOwner {\n        require(_treasury != address(0), \"Treasury != address(0)\");\n        treasury = _treasury;\n        emit UpdateTreasuryAddress(_treasury);\n    }\n\n    function setLPStakingAddress(address _lpStaking) public override onlyOwner {\n        require(_lpStaking != address(0), \"LPStaking != address(0)\");\n        lpStaking = _lpStaking;\n        emit UpdateLPStakingAddress(_lpStaking);\n    }\n\n    function setInventoryStakingAddress(address _inventoryStaking)\n        public\n        override\n        onlyOwner\n    {\n        inventoryStaking = _inventoryStaking;\n        emit UpdateInventoryStakingAddress(_inventoryStaking);\n    }\n\n    function setNFTXVaultFactory(address _factory) external override onlyOwner {\n        require(\n            address(nftxVaultFactory) == address(0),\n            \"nftxVaultFactory is immutable\"\n        );\n        nftxVaultFactory = _factory;\n        emit UpdateNFTXVaultFactory(_factory);\n    }\n\n    function pauseFeeDistribution(bool _pause) external onlyOwner {\n        distributionPaused = _pause;\n        emit PauseDistribution(_pause);\n    }\n\n    function rescueTokens(address _address) external override onlyOwner {\n        uint256 balance = IERC20Upgradeable(_address).balanceOf(address(this));\n        IERC20Upgradeable(_address).safeTransfer(msg.sender, balance);\n    }\n\n    function _addReceiver(\n        uint256 _allocPoint,\n        address _receiver,\n        bool _isContract\n    ) internal virtual {\n        FeeReceiver memory _feeReceiver = FeeReceiver(\n            _allocPoint,\n            _receiver,\n            _isContract\n        );\n        feeReceivers.push(_feeReceiver);\n        allocTotal += _allocPoint;\n        emit AddFeeReceiver(_receiver, _allocPoint);\n    }\n\n    function _sendForReceiver(\n        FeeReceiver memory _receiver,\n        uint256 _vaultId,\n        address _vault,\n        uint256 amountToSend\n    ) internal virtual returns (bool) {\n        if (_receiver.isContract) {\n            IERC20Upgradeable(_vault).safeIncreaseAllowance(\n                _receiver.receiver,\n                amountToSend\n            );\n\n            bytes memory payload = abi.encodeWithSelector(\n                INFTXLPStaking.receiveRewards.selector,\n                _vaultId,\n                amountToSend\n            );\n            (bool success, ) = address(_receiver.receiver).call(payload);\n\n            // If the allowance has not been spent, it means we can pass it forward to next.\n            return\n                success &&\n                IERC20Upgradeable(_vault).allowance(\n                    address(this),\n                    _receiver.receiver\n                ) ==\n                0;\n        } else {\n            IERC20Upgradeable(_vault).safeTransfer(\n                _receiver.receiver,\n                amountToSend\n            );\n            return true;\n        }\n    }\n}\n"
    },
    "contracts/solidity/NFTXStakingZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/SafeERC20Upgradeable.sol\";\nimport \"./interface/INFTXLPStaking.sol\";\nimport \"./interface/INFTXInventoryStaking.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/INFTXVault.sol\";\nimport \"./interface/INFTXSimpleFeeDistributor.sol\";\nimport \"./interface/IUniswapV2Router01.sol\";\nimport \"./interface/ITimelockExcludeList.sol\";\nimport \"./token/ERC721HolderUpgradeable.sol\";\nimport \"./token/ERC1155HolderUpgradeable.sol\";\nimport \"./token/IERC1155Upgradeable.sol\";\n\n// Authors: @0xKiwi_.\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ncontract NFTXStakingZap is\n    Ownable,\n    ReentrancyGuard,\n    ERC721HolderUpgradeable,\n    ERC1155HolderUpgradeable\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IWETH public immutable WETH;\n    INFTXLPStaking public lpStaking;\n    INFTXInventoryStaking public inventoryStaking;\n    INFTXVaultFactory public immutable nftxFactory;\n    IUniswapV2Router01 public immutable sushiRouter;\n    ITimelockExcludeList public timelockExcludeList;\n\n    uint256 public lpLockTime = 48 hours;\n    uint256 public inventoryLockTime = 7 days;\n    uint256 constant BASE = 1e18;\n\n    event UserStaked(\n        uint256 vaultId,\n        uint256 count,\n        uint256 lpBalance,\n        uint256 timelockUntil,\n        address sender\n    );\n\n    constructor(address _nftxFactory, address _sushiRouter)\n        Ownable()\n        ReentrancyGuard()\n    {\n        nftxFactory = INFTXVaultFactory(_nftxFactory);\n        sushiRouter = IUniswapV2Router01(_sushiRouter);\n        WETH = IWETH(IUniswapV2Router01(_sushiRouter).WETH());\n        IERC20Upgradeable(address(IUniswapV2Router01(_sushiRouter).WETH()))\n            .safeApprove(_sushiRouter, type(uint256).max);\n    }\n\n    function assignStakingContracts() public {\n        require(\n            address(lpStaking) == address(0) ||\n                address(inventoryStaking) == address(0),\n            \"not zero\"\n        );\n        lpStaking = INFTXLPStaking(\n            INFTXSimpleFeeDistributor(\n                INFTXVaultFactory(nftxFactory).feeDistributor()\n            ).lpStaking()\n        );\n        inventoryStaking = INFTXInventoryStaking(\n            INFTXSimpleFeeDistributor(\n                INFTXVaultFactory(nftxFactory).feeDistributor()\n            ).inventoryStaking()\n        );\n    }\n\n    function setTimelockExcludeList(address addr) external onlyOwner {\n        timelockExcludeList = ITimelockExcludeList(addr);\n    }\n\n    function setLPLockTime(uint256 newLPLockTime) external onlyOwner {\n        require(newLPLockTime <= 7 days, \"Lock too long\");\n        lpLockTime = newLPLockTime;\n    }\n\n    function setInventoryLockTime(uint256 newInventoryLockTime)\n        external\n        onlyOwner\n    {\n        require(newInventoryLockTime <= 14 days, \"Lock too long\");\n        inventoryLockTime = newInventoryLockTime;\n    }\n\n    function isAddressTimelockExcluded(address addr, uint256 vaultId)\n        public\n        view\n        returns (bool)\n    {\n        if (address(timelockExcludeList) == address(0)) {\n            return false;\n        } else {\n            return timelockExcludeList.isExcluded(addr, vaultId);\n        }\n    }\n\n    function provideInventory721(uint256 vaultId, uint256[] calldata tokenIds)\n        external\n    {\n        uint256 count = tokenIds.length;\n        INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n        uint256 timelockTime = isAddressTimelockExcluded(msg.sender, vaultId)\n            ? 0\n            : inventoryLockTime;\n        inventoryStaking.timelockMintFor(\n            vaultId,\n            count * BASE,\n            msg.sender,\n            timelockTime\n        );\n        address xToken = inventoryStaking.vaultXToken(vaultId);\n        uint256 oldBal = IERC20Upgradeable(vault).balanceOf(xToken);\n        uint256[] memory amounts = new uint256[](0);\n        address assetAddress = vault.assetAddress();\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ++i) {\n            transferFromERC721(assetAddress, tokenIds[i], address(vault));\n            approveERC721(assetAddress, address(vault), tokenIds[i]);\n        }\n        vault.mintTo(tokenIds, amounts, address(xToken));\n        uint256 newBal = IERC20Upgradeable(vault).balanceOf(xToken);\n        require(newBal == oldBal + count * BASE, \"Incorrect vtokens minted\");\n        uint256 lockEndTime = block.timestamp + timelockTime;\n        emit UserStaked(vaultId, tokenIds.length, 0, lockEndTime, msg.sender);\n    }\n\n    function provideInventory1155(\n        uint256 vaultId,\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts\n    ) external {\n        uint256 length = tokenIds.length;\n        require(length == amounts.length, \"Not equal length\");\n        uint256 count;\n        for (uint256 i; i < length; ++i) {\n            count += amounts[i];\n        }\n        INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n        uint256 timelockTime = isAddressTimelockExcluded(msg.sender, vaultId)\n            ? 0\n            : inventoryLockTime;\n        inventoryStaking.timelockMintFor(\n            vaultId,\n            count * BASE,\n            msg.sender,\n            timelockTime\n        );\n        address xToken = inventoryStaking.vaultXToken(vaultId);\n        uint256 oldBal = IERC20Upgradeable(vault).balanceOf(address(xToken));\n        IERC1155Upgradeable nft = IERC1155Upgradeable(vault.assetAddress());\n        nft.safeBatchTransferFrom(\n            msg.sender,\n            address(this),\n            tokenIds,\n            amounts,\n            \"\"\n        );\n        nft.setApprovalForAll(address(vault), true);\n        vault.mintTo(tokenIds, amounts, address(xToken));\n        uint256 newBal = IERC20Upgradeable(vault).balanceOf(address(xToken));\n        require(newBal == oldBal + count * BASE, \"Incorrect vtokens minted\");\n        uint256 lockEndTime = block.timestamp + timelockTime;\n        emit UserStaked(vaultId, tokenIds.length, 0, lockEndTime, msg.sender);\n    }\n\n    function addLiquidity721ETH(\n        uint256 vaultId,\n        uint256[] calldata ids,\n        uint256 minWethIn\n    ) external payable returns (uint256) {\n        return addLiquidity721ETHTo(vaultId, ids, minWethIn, msg.sender);\n    }\n\n    function addLiquidity721ETHTo(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256 minWethIn,\n        address to\n    ) public payable nonReentrant returns (uint256) {\n        require(to != address(0) && to != address(this));\n        WETH.deposit{value: msg.value}();\n        (, uint256 amountEth, uint256 liquidity) = _addLiquidity721WETH(\n            vaultId,\n            ids,\n            minWethIn,\n            msg.value,\n            to\n        );\n\n        // Return extras.\n        uint256 remaining = msg.value - amountEth;\n        if (remaining != 0) {\n            WETH.withdraw(remaining);\n            (bool success, ) = payable(to).call{value: remaining}(\"\");\n            require(\n                success,\n                \"Address: unable to send value, recipient may have reverted\"\n            );\n        }\n\n        return liquidity;\n    }\n\n    function addLiquidity1155ETH(\n        uint256 vaultId,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        uint256 minEthIn\n    ) external payable returns (uint256) {\n        return\n            addLiquidity1155ETHTo(vaultId, ids, amounts, minEthIn, msg.sender);\n    }\n\n    function addLiquidity1155ETHTo(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        uint256 minEthIn,\n        address to\n    ) public payable nonReentrant returns (uint256) {\n        require(to != address(0) && to != address(this));\n        WETH.deposit{value: msg.value}();\n        // Finish this.\n        (, uint256 amountEth, uint256 liquidity) = _addLiquidity1155WETH(\n            vaultId,\n            ids,\n            amounts,\n            minEthIn,\n            msg.value,\n            to\n        );\n\n        // Return extras.\n        uint256 remaining = msg.value - amountEth;\n        if (remaining != 0) {\n            WETH.withdraw(remaining);\n            (bool success, ) = payable(to).call{value: remaining}(\"\");\n            require(\n                success,\n                \"Address: unable to send value, recipient may have reverted\"\n            );\n        }\n\n        return liquidity;\n    }\n\n    function addLiquidity721(\n        uint256 vaultId,\n        uint256[] calldata ids,\n        uint256 minWethIn,\n        uint256 wethIn\n    ) external returns (uint256) {\n        return addLiquidity721To(vaultId, ids, minWethIn, wethIn, msg.sender);\n    }\n\n    function addLiquidity721To(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256 minWethIn,\n        uint256 wethIn,\n        address to\n    ) public nonReentrant returns (uint256) {\n        require(to != address(0) && to != address(this));\n        IERC20Upgradeable(address(WETH)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            wethIn\n        );\n        (, uint256 amountEth, uint256 liquidity) = _addLiquidity721WETH(\n            vaultId,\n            ids,\n            minWethIn,\n            wethIn,\n            to\n        );\n\n        // Return extras.\n        uint256 remaining = wethIn - amountEth;\n        if (remaining != 0) {\n            WETH.transfer(to, remaining);\n        }\n\n        return liquidity;\n    }\n\n    function addLiquidity1155(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        uint256 minWethIn,\n        uint256 wethIn\n    ) public returns (uint256) {\n        return\n            addLiquidity1155To(\n                vaultId,\n                ids,\n                amounts,\n                minWethIn,\n                wethIn,\n                msg.sender\n            );\n    }\n\n    function addLiquidity1155To(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        uint256 minWethIn,\n        uint256 wethIn,\n        address to\n    ) public nonReentrant returns (uint256) {\n        require(to != address(0) && to != address(this));\n        IERC20Upgradeable(address(WETH)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            wethIn\n        );\n        (, uint256 amountEth, uint256 liquidity) = _addLiquidity1155WETH(\n            vaultId,\n            ids,\n            amounts,\n            minWethIn,\n            wethIn,\n            to\n        );\n\n        // Return extras.\n        uint256 remaining = wethIn - amountEth;\n        if (remaining != 0) {\n            WETH.transfer(to, remaining);\n        }\n\n        return liquidity;\n    }\n\n    function _addLiquidity721WETH(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256 minWethIn,\n        uint256 wethIn,\n        address to\n    )\n        internal\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        require(nftxFactory.excludedFromFees(address(this)));\n        address vault = nftxFactory.vault(vaultId);\n\n        // Transfer tokens to zap and mint to NFTX.\n        address assetAddress = INFTXVault(vault).assetAddress();\n        uint256 length = ids.length;\n        for (uint256 i; i < length; i++) {\n            transferFromERC721(assetAddress, ids[i], vault);\n            approveERC721(assetAddress, vault, ids[i]);\n        }\n        uint256[] memory emptyIds;\n        INFTXVault(vault).mint(ids, emptyIds);\n        uint256 balance = length * BASE; // We should not be experiencing fees.\n\n        return\n            _addLiquidityAndLock(\n                vaultId,\n                vault,\n                balance,\n                minWethIn,\n                wethIn,\n                to\n            );\n    }\n\n    function _addLiquidity1155WETH(\n        uint256 vaultId,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        uint256 minWethIn,\n        uint256 wethIn,\n        address to\n    )\n        internal\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        require(nftxFactory.excludedFromFees(address(this)));\n        address vault = nftxFactory.vault(vaultId);\n\n        // Transfer tokens to zap and mint to NFTX.\n        address assetAddress = INFTXVault(vault).assetAddress();\n        IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(\n            msg.sender,\n            address(this),\n            ids,\n            amounts,\n            \"\"\n        );\n        IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\n\n        uint256 count = INFTXVault(vault).mint(ids, amounts);\n        uint256 balance = (count * BASE); // We should not be experiencing fees.\n\n        return\n            _addLiquidityAndLock(\n                vaultId,\n                vault,\n                balance,\n                minWethIn,\n                wethIn,\n                to\n            );\n    }\n\n    function _addLiquidityAndLock(\n        uint256 vaultId,\n        address vault,\n        uint256 minTokenIn,\n        uint256 minWethIn,\n        uint256 wethIn,\n        address to\n    )\n        internal\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        // Provide liquidity.\n        IERC20Upgradeable(vault).safeApprove(address(sushiRouter), minTokenIn);\n        (\n            uint256 amountToken,\n            uint256 amountEth,\n            uint256 liquidity\n        ) = sushiRouter.addLiquidity(\n                address(vault),\n                address(WETH),\n                minTokenIn,\n                wethIn,\n                minTokenIn,\n                minWethIn,\n                address(this),\n                block.timestamp\n            );\n\n        // Stake in LP rewards contract\n        IERC20Upgradeable(pairFor(vault, address(WETH))).safeApprove(\n            address(lpStaking),\n            liquidity\n        );\n        uint256 timelockTime = isAddressTimelockExcluded(msg.sender, vaultId)\n            ? 0\n            : lpLockTime;\n        lpStaking.timelockDepositFor(vaultId, to, liquidity, timelockTime);\n\n        uint256 remaining = minTokenIn - amountToken;\n        if (remaining != 0) {\n            IERC20Upgradeable(vault).safeTransfer(to, remaining);\n        }\n\n        uint256 lockEndTime = block.timestamp + timelockTime;\n        emit UserStaked(vaultId, minTokenIn, liquidity, lockEndTime, to);\n        return (amountToken, amountEth, liquidity);\n    }\n\n    function transferFromERC721(\n        address assetAddr,\n        uint256 tokenId,\n        address to\n    ) internal virtual {\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n        bytes memory data;\n        if (assetAddr == kitties) {\n            // Cryptokitties.\n            data = abi.encodeWithSignature(\n                \"transferFrom(address,address,uint256)\",\n                msg.sender,\n                to,\n                tokenId\n            );\n        } else if (assetAddr == punks) {\n            // CryptoPunks.\n            // Fix here for frontrun attack. Added in v1.0.2.\n            bytes memory punkIndexToAddress = abi.encodeWithSignature(\n                \"punkIndexToAddress(uint256)\",\n                tokenId\n            );\n            (bool checkSuccess, bytes memory result) = address(assetAddr)\n                .staticcall(punkIndexToAddress);\n            address nftOwner = abi.decode(result, (address));\n            require(\n                checkSuccess && nftOwner == msg.sender,\n                \"Not the NFT owner\"\n            );\n            data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\n        } else {\n            // Default.\n            // We push to the vault to avoid an unneeded transfer.\n            data = abi.encodeWithSignature(\n                \"safeTransferFrom(address,address,uint256)\",\n                msg.sender,\n                to,\n                tokenId\n            );\n        }\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\n        require(success, string(resultData));\n    }\n\n    function approveERC721(\n        address assetAddr,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n        bytes memory data;\n        if (assetAddr == kitties) {\n            // Cryptokitties.\n            // data = abi.encodeWithSignature(\"approve(address,uint256)\", to, tokenId);\n            // No longer needed to approve with pushing.\n            return;\n        } else if (assetAddr == punks) {\n            // CryptoPunks.\n            data = abi.encodeWithSignature(\n                \"offerPunkForSaleToAddress(uint256,uint256,address)\",\n                tokenId,\n                0,\n                to\n            );\n        } else {\n            // No longer needed to approve with pushing.\n            return;\n        }\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\n        require(success, string(resultData));\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address tokenA, address tokenB)\n        internal\n        view\n        returns (address pair)\n    {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            sushiRouter.factory(),\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n    }\n\n    receive() external payable {\n        require(msg.sender == address(WETH), \"Only WETH\");\n    }\n\n    function rescue(address token) external onlyOwner {\n        if (token == address(0)) {\n            (bool success, ) = payable(msg.sender).call{\n                value: address(this).balance\n            }(\"\");\n            require(\n                success,\n                \"Address: unable to send value, recipient may have reverted\"\n            );\n        } else {\n            IERC20Upgradeable(token).safeTransfer(\n                msg.sender,\n                IERC20Upgradeable(token).balanceOf(address(this))\n            );\n        }\n    }\n}\n"
    },
    "contracts/solidity/NFTXUnstakingInventoryZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/Ownable.sol\";\nimport \"./util/ReentrancyGuard.sol\";\nimport \"./util/SafeERC20Upgradeable.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/INFTXVault.sol\";\nimport \"./interface/IUniswapV2Router01.sol\";\nimport \"./token/IWETH.sol\";\nimport \"./NFTXInventoryStaking.sol\";\n\ncontract NFTXUnstakingInventoryZap is Ownable, ReentrancyGuard {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    INFTXVaultFactory public vaultFactory;\n    NFTXInventoryStaking public inventoryStaking;\n    IUniswapV2Router01 public sushiRouter;\n    IWETH public weth;\n\n    event InventoryUnstaked(\n        uint256 vaultId,\n        uint256 xTokensUnstaked,\n        uint256 numNftsRedeemed,\n        address unstaker\n    );\n\n    function setVaultFactory(address addr) public onlyOwner {\n        vaultFactory = INFTXVaultFactory(addr);\n    }\n\n    function setInventoryStaking(address addr) public onlyOwner {\n        inventoryStaking = NFTXInventoryStaking(addr);\n    }\n\n    function setSushiRouterAndWeth(address sushiRouterAddr) public onlyOwner {\n        sushiRouter = IUniswapV2Router01(sushiRouterAddr);\n        weth = IWETH(sushiRouter.WETH());\n    }\n\n    /**\n     * @param remainingPortionToUnstake Represents the ratio (in 1e18) of the remaining xTokens (left after claiming `numNfts`) balance of user to unstake\n     * if remainingPortionToUnstake = 1e18 => unstake entire user's balance\n     * if remainingPortionToUnstake = 0 => only unstake required xToken balance to claim `numNfts`, nothing extra\n     */\n    function unstakeInventory(\n        uint256 vaultId,\n        uint256 numNfts,\n        uint256 remainingPortionToUnstake\n    ) public payable {\n        require(remainingPortionToUnstake <= 1e18);\n        IERC20Upgradeable vToken = IERC20Upgradeable(\n            vaultFactory.vault(vaultId)\n        );\n        IERC20Upgradeable xToken = IERC20Upgradeable(\n            inventoryStaking.xTokenAddr(address(vToken))\n        );\n\n        uint256 reqVTokens = numNfts * 1e18;\n\n        // calculate `xTokensToPull` to pull\n        uint256 xTokensToPull;\n        uint256 xTokenUserBal = xToken.balanceOf(msg.sender);\n        if (remainingPortionToUnstake == 1e18) {\n            xTokensToPull = xTokenUserBal;\n        } else {\n            uint256 shareValue = inventoryStaking.xTokenShareValue(vaultId); // vTokens per xToken in wei\n            uint256 reqXTokens = (reqVTokens * 1e18) / shareValue;\n\n            // Check for rounding error being 1 less that expected amount\n            if ((reqXTokens * shareValue) / 1e18 < reqVTokens) {\n                reqXTokens += 1;\n            }\n\n            // If the user doesn't have enough xTokens then we just want to pull the\n            // balance of the user.\n            if (xTokenUserBal < reqXTokens) {\n                xTokensToPull = xTokenUserBal;\n            }\n            // If we have zero additional portion to unstake, then we only need to pull the required tokens\n            else if (remainingPortionToUnstake == 0) {\n                xTokensToPull = reqXTokens;\n            }\n            // Otherwise, calculate remaining xTokens to unstake using `remainingPortionToUnstake` ratio\n            else {\n                uint256 remainingXTokens = xToken.balanceOf(msg.sender) -\n                    reqXTokens;\n                xTokensToPull =\n                    reqXTokens +\n                    ((remainingXTokens * remainingPortionToUnstake) / 1e18);\n            }\n        }\n\n        // pull xTokens then unstake for vTokens\n        xToken.safeTransferFrom(msg.sender, address(this), xTokensToPull);\n\n        // If our inventory staking contract has an allowance less that the amount we need\n        // to pull, then we need to approve additional tokens.\n        if (\n            xToken.allowance(address(this), address(inventoryStaking)) <\n            xTokensToPull\n        ) {\n            xToken.approve(address(inventoryStaking), type(uint256).max);\n        }\n\n        uint256 initialVTokenBal = vToken.balanceOf(address(this));\n        // Burn our xTokens to pull in our vTokens\n        inventoryStaking.withdraw(vaultId, xTokensToPull);\n        uint256 vTokensReceived = vToken.balanceOf(address(this)) -\n            initialVTokenBal;\n\n        uint256 missingVToken;\n\n        // If the amount of vTokens generated from our `inventoryStaking.withdraw` call\n        // is not sufficient to fulfill the claim on the specified number of NFTs, then\n        // we determine if we can claim some dust from the contract.\n        if (vTokensReceived < reqVTokens) {\n            // We can calculate the amount of vToken required by the contract to get\n            // it from the withdrawal amount to the amount required based on the number\n            // of NFTs.\n            missingVToken = reqVTokens - vTokensReceived;\n\n            /**\n             * reqVTokens = 1e18\n             * initialVTokenBal = 2\n             * vToken.balanceOf(address(this)) = 1000000000000000001\n             *\n             * 1000000000000000000 - (1000000000000000001 - 2) = 1\n             */\n        }\n\n        // This dust value has to be less that 100 to ensure we aren't just being rinsed\n        // of dust.\n        require(missingVToken < 100, \"not enough vTokens\");\n\n        uint256 dustUsed;\n        if (missingVToken > initialVTokenBal) {\n            // If user has sufficient vTokens to account for missingVToken\n            // then get it from them to this contract\n            if (\n                vToken.balanceOf(msg.sender) >= missingVToken &&\n                vToken.allowance(msg.sender, address(this)) >= missingVToken\n            ) {\n                vToken.safeTransferFrom(\n                    msg.sender,\n                    address(this),\n                    missingVToken\n                );\n            } else {\n                // else we swap ETH from this contract to get `missingVToken`\n                address[] memory path = new address[](2);\n                path[0] = address(weth);\n                path[1] = address(vToken);\n                sushiRouter.swapETHForExactTokens{value: 1_000_000_000}(\n                    missingVToken,\n                    path,\n                    address(this),\n                    block.timestamp\n                );\n            }\n        } else {\n            dustUsed = missingVToken;\n        }\n\n        // reedem NFTs with vTokens, if requested\n        if (numNfts > 0) {\n            INFTXVault(address(vToken)).redeemTo(\n                numNfts,\n                new uint256[](0),\n                msg.sender\n            );\n        }\n\n        /**\n         * How this fixes underflow error:\n         * vToken.balanceOf(address(this)) = 1\n         * initialVTokenBal = 2\n         * dustUsed = missingVToken = 1\n         * vTokenRemainder = 1 - (2 - 1) = 0\n         */\n        uint256 vTokenRemainder = vToken.balanceOf(address(this)) -\n            (initialVTokenBal - dustUsed);\n\n        // if vToken remainder more than dust then return to sender.\n        // happens when `remainingPortionToUnstake` is non-zero\n        if (vTokenRemainder > 100) {\n            vToken.safeTransfer(msg.sender, vTokenRemainder);\n        }\n\n        emit InventoryUnstaked(vaultId, xTokensToPull, numNfts, msg.sender);\n    }\n\n    function maxNftsUsingXToken(\n        uint256 vaultId,\n        address staker,\n        address slpToken\n    ) public view returns (uint256 numNfts, bool shortByTinyAmount) {\n        if (inventoryStaking.timelockUntil(vaultId, staker) > block.timestamp) {\n            return (0, false);\n        }\n        address vTokenAddr = vaultFactory.vault(vaultId);\n        address xTokenAddr = inventoryStaking.xTokenAddr(vTokenAddr);\n        IERC20Upgradeable vToken = IERC20Upgradeable(vTokenAddr);\n        IERC20Upgradeable xToken = IERC20Upgradeable(xTokenAddr);\n        IERC20Upgradeable lpPair = IERC20Upgradeable(slpToken);\n\n        uint256 xTokenBal = xToken.balanceOf(staker);\n        uint256 shareValue = inventoryStaking.xTokenShareValue(vaultId);\n        uint256 vTokensA = (xTokenBal * shareValue) / 1e18;\n        uint256 vTokensB = ((xTokenBal * shareValue) / 1e18) + 99;\n\n        uint256 vTokensIntA = vTokensA / 1e18;\n        uint256 vTokensIntB = vTokensB / 1e18;\n\n        if (vTokensIntB > vTokensIntA) {\n            if (\n                vToken.balanceOf(msg.sender) >= 99 &&\n                vToken.allowance(msg.sender, address(this)) >= 99\n            ) {\n                return (vTokensIntB, true);\n            } else if (lpPair.totalSupply() >= 10000) {\n                return (vTokensIntB, true);\n            } else if (vToken.balanceOf(address(this)) >= 99) {\n                return (vTokensIntB, true);\n            } else {\n                return (vTokensIntA, false);\n            }\n        } else {\n            return (vTokensIntA, false);\n        }\n    }\n\n    receive() external payable {}\n\n    function rescue(address token) external onlyOwner {\n        if (token == address(0)) {\n            (bool success, ) = payable(msg.sender).call{\n                value: address(this).balance\n            }(\"\");\n            require(\n                success,\n                \"Address: unable to send value, recipient may have reverted\"\n            );\n        } else {\n            IERC20Upgradeable(token).safeTransfer(\n                msg.sender,\n                IERC20Upgradeable(token).balanceOf(address(this))\n            );\n        }\n    }\n}\n"
    },
    "contracts/solidity/NFTXVaultFactoryUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/PausableUpgradeable.sol\";\nimport \"./proxy/UpgradeableBeacon.sol\";\nimport \"./proxy/BeaconProxy.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/INFTXFeeDistributor.sol\";\nimport \"./NFTXVaultUpgradeable.sol\";\n\n// Authors: @0xKiwi_ and @alexgausman.\n\ncontract NFTXVaultFactoryUpgradeable is\n    PausableUpgradeable,\n    UpgradeableBeacon,\n    INFTXVaultFactory\n{\n    uint256 private NOT_USED1; // Removed, no longer needed.\n    address public override zapContract; // No longer needed, but keeping for compatibility.\n    address public override feeDistributor;\n    address public override eligibilityManager;\n\n    mapping(uint256 => address) private NOT_USED3; // Removed, no longer needed.\n    mapping(address => address[]) _vaultsForAsset;\n\n    address[] internal vaults;\n\n    // v1.0.1\n    mapping(address => bool) public override excludedFromFees;\n\n    // v1.0.2\n    struct VaultFees {\n        bool active;\n        uint64 mintFee;\n        uint64 randomRedeemFee;\n        uint64 targetRedeemFee;\n        uint64 randomSwapFee;\n        uint64 targetSwapFee;\n    }\n    mapping(uint256 => VaultFees) private _vaultFees;\n    uint64 public override factoryMintFee;\n    uint64 public override factoryRandomRedeemFee;\n    uint64 public override factoryTargetRedeemFee;\n    uint64 public override factoryRandomSwapFee;\n    uint64 public override factoryTargetSwapFee;\n\n    // v1.0.3\n    mapping(address => bool) public override zapContracts;\n\n    address public override erc1272Signer;\n\n    function __NFTXVaultFactory_init(\n        address _vaultImpl,\n        address _feeDistributor\n    ) public override initializer {\n        __Pausable_init();\n        // We use a beacon proxy so that every child contract follows the same implementation code.\n        __UpgradeableBeacon__init(_vaultImpl);\n        setFeeDistributor(_feeDistributor);\n        setFactoryFees(0.1 ether, 0.05 ether, 0.1 ether, 0.05 ether, 0.1 ether);\n    }\n\n    function createVault(\n        string memory name,\n        string memory symbol,\n        address _assetAddress,\n        bool is1155,\n        bool allowAllItems\n    ) external virtual override returns (uint256) {\n        onlyOwnerIfPaused(0);\n        require(feeDistributor != address(0), \"NFTX: Fee receiver unset\");\n        require(\n            childImplementation() != address(0),\n            \"NFTX: Vault implementation unset\"\n        );\n        address vaultAddr = deployVault(\n            name,\n            symbol,\n            _assetAddress,\n            is1155,\n            allowAllItems\n        );\n        uint256 _vaultId = vaults.length;\n        _vaultsForAsset[_assetAddress].push(vaultAddr);\n        vaults.push(vaultAddr);\n        INFTXFeeDistributor(feeDistributor).initializeVaultReceivers(_vaultId);\n        emit NewVault(_vaultId, vaultAddr, _assetAddress);\n        return _vaultId;\n    }\n\n    function setFactoryFees(\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    ) public virtual override onlyOwner {\n        require(mintFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(randomRedeemFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(targetRedeemFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(randomSwapFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(targetSwapFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n\n        factoryMintFee = uint64(mintFee);\n        factoryRandomRedeemFee = uint64(randomRedeemFee);\n        factoryTargetRedeemFee = uint64(targetRedeemFee);\n        factoryRandomSwapFee = uint64(randomSwapFee);\n        factoryTargetSwapFee = uint64(targetSwapFee);\n\n        emit UpdateFactoryFees(\n            mintFee,\n            randomRedeemFee,\n            targetRedeemFee,\n            randomSwapFee,\n            targetSwapFee\n        );\n    }\n\n    function setVaultFees(\n        uint256 vaultId,\n        uint256 mintFee,\n        uint256 randomRedeemFee,\n        uint256 targetRedeemFee,\n        uint256 randomSwapFee,\n        uint256 targetSwapFee\n    ) public virtual override {\n        if (msg.sender != owner()) {\n            address vaultAddr = vaults[vaultId];\n            require(msg.sender == vaultAddr, \"Not from vault\");\n        }\n        require(mintFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(randomRedeemFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(targetRedeemFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(randomSwapFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n        require(targetSwapFee <= 0.5 ether, \"Cannot > 0.5 ether\");\n\n        _vaultFees[vaultId] = VaultFees(\n            true,\n            uint64(mintFee),\n            uint64(randomRedeemFee),\n            uint64(targetRedeemFee),\n            uint64(randomSwapFee),\n            uint64(targetSwapFee)\n        );\n        emit UpdateVaultFees(\n            vaultId,\n            mintFee,\n            randomRedeemFee,\n            targetRedeemFee,\n            randomSwapFee,\n            targetSwapFee\n        );\n    }\n\n    function disableVaultFees(uint256 vaultId) public virtual override {\n        if (msg.sender != owner()) {\n            address vaultAddr = vaults[vaultId];\n            require(msg.sender == vaultAddr, \"Not vault\");\n        }\n        delete _vaultFees[vaultId];\n        emit DisableVaultFees(vaultId);\n    }\n\n    function setFeeDistributor(address _feeDistributor)\n        public\n        virtual\n        override\n        onlyOwner\n    {\n        require(_feeDistributor != address(0));\n        emit NewFeeDistributor(feeDistributor, _feeDistributor);\n        feeDistributor = _feeDistributor;\n    }\n\n    function setZapContract(address _zapContract, bool _excluded)\n        public\n        virtual\n        override\n        onlyOwner\n    {\n        emit UpdatedZapContract(_zapContract, _excluded);\n        zapContracts[_zapContract] = _excluded;\n    }\n\n    function setFeeExclusion(address _excludedAddr, bool excluded)\n        public\n        virtual\n        override\n        onlyOwner\n    {\n        emit FeeExclusion(_excludedAddr, excluded);\n        excludedFromFees[_excludedAddr] = excluded;\n    }\n\n    function setEligibilityManager(address _eligibilityManager)\n        external\n        virtual\n        override\n        onlyOwner\n    {\n        emit NewEligibilityManager(eligibilityManager, _eligibilityManager);\n        eligibilityManager = _eligibilityManager;\n    }\n\n    function setERC1271Signer(address _erc1271Signer) external override onlyOwner {\n        erc1272Signer = _erc1271Signer;\n    }\n\n    function vaultFees(uint256 vaultId)\n        external\n        view\n        virtual\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        VaultFees memory fees = _vaultFees[vaultId];\n        if (fees.active) {\n            return (\n                uint256(fees.mintFee),\n                uint256(fees.randomRedeemFee),\n                uint256(fees.targetRedeemFee),\n                uint256(fees.randomSwapFee),\n                uint256(fees.targetSwapFee)\n            );\n        }\n\n        return (\n            uint256(factoryMintFee),\n            uint256(factoryRandomRedeemFee),\n            uint256(factoryTargetRedeemFee),\n            uint256(factoryRandomSwapFee),\n            uint256(factoryTargetSwapFee)\n        );\n    }\n\n    function isLocked(uint256 lockId)\n        external\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return isPaused[lockId];\n    }\n\n    function vaultsForAsset(address assetAddress)\n        external\n        view\n        virtual\n        override\n        returns (address[] memory)\n    {\n        return _vaultsForAsset[assetAddress];\n    }\n\n    function vault(uint256 vaultId)\n        external\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return vaults[vaultId];\n    }\n\n    function allVaults()\n        external\n        view\n        virtual\n        override\n        returns (address[] memory)\n    {\n        return vaults;\n    }\n\n    function numVaults() external view virtual override returns (uint256) {\n        return vaults.length;\n    }\n\n    function deployVault(\n        string memory name,\n        string memory symbol,\n        address _assetAddress,\n        bool is1155,\n        bool allowAllItems\n    ) internal returns (address) {\n        address newBeaconProxy = address(new BeaconProxy(address(this), \"\"));\n        NFTXVaultUpgradeable(newBeaconProxy).__NFTXVault_init(\n            name,\n            symbol,\n            _assetAddress,\n            is1155,\n            allowAllItems\n        );\n        // Manager for configuration.\n        NFTXVaultUpgradeable(newBeaconProxy).setManager(msg.sender);\n        // Owner for administrative functions.\n        NFTXVaultUpgradeable(newBeaconProxy).transferOwnership(owner());\n        return newBeaconProxy;\n    }\n}\n"
    },
    "contracts/solidity/NFTXVaultUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/OwnableUpgradeable.sol\";\nimport \"./util/ReentrancyGuardUpgradeable.sol\";\nimport \"./util/EnumerableSetUpgradeable.sol\";\nimport \"./token/ERC20FlashMintUpgradeable.sol\";\nimport \"./token/ERC721SafeHolderUpgradeable.sol\";\nimport \"./token/ERC1155SafeHolderUpgradeable.sol\";\nimport \"./token/IERC1155Upgradeable.sol\";\nimport \"./token/IERC721Upgradeable.sol\";\nimport \"./interface/INFTXVault.sol\";\nimport \"./interface/INFTXEligibilityManager.sol\";\nimport \"./interface/INFTXFeeDistributor.sol\";\nimport {IERC1271} from \"./interface/IERC1271.sol\";\nimport {SignatureChecker} from \"./util/SignatureChecker.sol\";\n\n// Authors: @apoorvlathey, @0xKiwi_ and @alexgausman.\n\ncontract NFTXVaultUpgradeable is\n    OwnableUpgradeable,\n    ERC20FlashMintUpgradeable,\n    ReentrancyGuardUpgradeable,\n    ERC721SafeHolderUpgradeable,\n    ERC1155SafeHolderUpgradeable,\n    INFTXVault,\n    IERC1271\n{\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\n\n    uint256 constant base = 10 ** 18;\n\n    uint256 public override vaultId;\n    address public override manager;\n    address public override assetAddress;\n    INFTXVaultFactory public override vaultFactory;\n    INFTXEligibility public override eligibilityStorage;\n\n    uint256 randNonce;\n    uint256 private UNUSED_FEE1;\n    uint256 private UNUSED_FEE2;\n    uint256 private UNUSED_FEE3;\n\n    bool public override is1155;\n    bool public override allowAllItems;\n    bool public override enableMint;\n    bool public override enableRandomRedeem;\n    bool public override enableTargetRedeem;\n\n    EnumerableSetUpgradeable.UintSet holdings;\n    mapping(uint256 => uint256) quantity1155;\n\n    bool public override enableRandomSwap;\n    bool public override enableTargetSwap;\n\n    event VaultShutdown(\n        address assetAddress,\n        uint256 numItems,\n        address recipient\n    );\n    event MetaDataChange(\n        string oldName,\n        string oldSymbol,\n        string newName,\n        string newSymbol\n    );\n\n    function __NFTXVault_init(\n        string memory _name,\n        string memory _symbol,\n        address _assetAddress,\n        bool _is1155,\n        bool _allowAllItems\n    ) public virtual override initializer {\n        __Ownable_init();\n        __ERC20_init(_name, _symbol);\n        require(_assetAddress != address(0), \"Asset != address(0)\");\n        assetAddress = _assetAddress;\n        vaultFactory = INFTXVaultFactory(msg.sender);\n        vaultId = vaultFactory.numVaults();\n        is1155 = _is1155;\n        allowAllItems = _allowAllItems;\n        emit VaultInit(vaultId, _assetAddress, _is1155, _allowAllItems);\n        setVaultFeatures(\n            true /*enableMint*/,\n            true /*enableRandomRedeem*/,\n            true /*enableTargetRedeem*/,\n            true /*enableRandomSwap*/,\n            true /*enableTargetSwap*/\n        );\n    }\n\n    function finalizeVault() external virtual override {\n        setManager(address(0));\n    }\n\n    // Added in v1.0.3.\n    function setVaultMetadata(\n        string calldata name_,\n        string calldata symbol_\n    ) external virtual override {\n        onlyPrivileged();\n        emit MetaDataChange(name(), symbol(), name_, symbol_);\n        _setMetadata(name_, symbol_);\n    }\n\n    function setVaultFeatures(\n        bool _enableMint,\n        bool _enableRandomRedeem,\n        bool _enableTargetRedeem,\n        bool _enableRandomSwap,\n        bool _enableTargetSwap\n    ) public virtual override {\n        onlyPrivileged();\n        enableMint = _enableMint;\n        enableRandomRedeem = _enableRandomRedeem;\n        enableTargetRedeem = _enableTargetRedeem;\n        enableRandomSwap = _enableRandomSwap;\n        enableTargetSwap = _enableTargetSwap;\n\n        emit EnableMintUpdated(_enableMint);\n        emit EnableRandomRedeemUpdated(_enableRandomRedeem);\n        emit EnableTargetRedeemUpdated(_enableTargetRedeem);\n        emit EnableRandomSwapUpdated(_enableRandomSwap);\n        emit EnableTargetSwapUpdated(_enableTargetSwap);\n    }\n\n    function setFees(\n        uint256 _mintFee,\n        uint256 _randomRedeemFee,\n        uint256 _targetRedeemFee,\n        uint256 _randomSwapFee,\n        uint256 _targetSwapFee\n    ) public virtual override {\n        onlyPrivileged();\n        vaultFactory.setVaultFees(\n            vaultId,\n            _mintFee,\n            _randomRedeemFee,\n            _targetRedeemFee,\n            _randomSwapFee,\n            _targetSwapFee\n        );\n    }\n\n    function disableVaultFees() public virtual override {\n        onlyPrivileged();\n        vaultFactory.disableVaultFees(vaultId);\n    }\n\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\n    // a similar interface.\n    function deployEligibilityStorage(\n        uint256 moduleIndex,\n        bytes calldata initData\n    ) external virtual override returns (address) {\n        onlyPrivileged();\n        require(\n            address(eligibilityStorage) == address(0),\n            \"NFTXVault: eligibility already set\"\n        );\n        INFTXEligibilityManager eligManager = INFTXEligibilityManager(\n            vaultFactory.eligibilityManager()\n        );\n        address _eligibility = eligManager.deployEligibility(\n            moduleIndex,\n            initData\n        );\n        eligibilityStorage = INFTXEligibility(_eligibility);\n        // Toggle this to let the contract know to check eligibility now.\n        allowAllItems = false;\n        emit EligibilityDeployed(moduleIndex, _eligibility);\n        return _eligibility;\n    }\n\n    // // This function allows for the manager to set their own arbitrary eligibility contract.\n    // // Once eligiblity is set, it cannot be unset or changed.\n    // Disabled for launch.\n    // function setEligibilityStorage(address _newEligibility) public virtual {\n    //     onlyPrivileged();\n    //     require(\n    //         address(eligibilityStorage) == address(0),\n    //         \"NFTXVault: eligibility already set\"\n    //     );\n    //     eligibilityStorage = INFTXEligibility(_newEligibility);\n    //     // Toggle this to let the contract know to check eligibility now.\n    //     allowAllItems = false;\n    //     emit CustomEligibilityDeployed(address(_newEligibility));\n    // }\n\n    // The manager has control over options like fees and features\n    function setManager(address _manager) public virtual override {\n        onlyPrivileged();\n        manager = _manager;\n        emit ManagerSet(_manager);\n    }\n\n    function mint(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\n    ) external virtual override returns (uint256) {\n        return mintTo(tokenIds, amounts, msg.sender);\n    }\n\n    function mintTo(\n        uint256[] memory tokenIds,\n        uint256[] memory amounts /* ignored for ERC721 vaults */,\n        address to\n    ) public virtual override nonReentrant returns (uint256) {\n        onlyOwnerIfPaused(1);\n        checkAddressOnDenyList(msg.sender);\n        require(enableMint, \"Minting not enabled\");\n        // Take the NFTs.\n        uint256 count = receiveNFTs(tokenIds, amounts);\n\n        // Mint to the user.\n        _mint(to, base * count);\n        uint256 totalFee = mintFee() * count;\n        _chargeAndDistributeFees(to, totalFee);\n\n        emit Minted(tokenIds, amounts, to);\n        return count;\n    }\n\n    function redeem(\n        uint256 amount,\n        uint256[] calldata specificIds\n    ) external virtual override returns (uint256[] memory) {\n        return redeemTo(amount, specificIds, msg.sender);\n    }\n\n    function redeemTo(\n        uint256 amount,\n        uint256[] memory specificIds,\n        address to\n    ) public virtual override nonReentrant returns (uint256[] memory) {\n        onlyOwnerIfPaused(2);\n        checkAddressOnDenyList(msg.sender);\n        require(\n            amount == specificIds.length || enableRandomRedeem,\n            \"NFTXVault: Random redeem not enabled\"\n        );\n        require(\n            specificIds.length == 0 || enableTargetRedeem,\n            \"NFTXVault: Target redeem not enabled\"\n        );\n\n        // We burn all from sender and mint to fee receiver to reduce costs.\n        _burn(msg.sender, base * amount);\n\n        // Pay the tokens + toll.\n        (\n            ,\n            uint256 _randomRedeemFee,\n            uint256 _targetRedeemFee,\n            ,\n\n        ) = vaultFees();\n        uint256 totalFee = (_targetRedeemFee * specificIds.length) +\n            (_randomRedeemFee * (amount - specificIds.length));\n        _chargeAndDistributeFees(msg.sender, totalFee);\n\n        // Withdraw from vault.\n        uint256[] memory redeemedIds = withdrawNFTsTo(amount, specificIds, to);\n        emit Redeemed(redeemedIds, specificIds, to);\n        return redeemedIds;\n    }\n\n    function swap(\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts /* ignored for ERC721 vaults */,\n        uint256[] calldata specificIds\n    ) external virtual override returns (uint256[] memory) {\n        return swapTo(tokenIds, amounts, specificIds, msg.sender);\n    }\n\n    function swapTo(\n        uint256[] memory tokenIds,\n        uint256[] memory amounts /* ignored for ERC721 vaults */,\n        uint256[] memory specificIds,\n        address to\n    ) public virtual override nonReentrant returns (uint256[] memory) {\n        onlyOwnerIfPaused(3);\n        checkAddressOnDenyList(msg.sender);\n        uint256 count;\n        if (is1155) {\n            for (uint256 i; i < tokenIds.length; ++i) {\n                uint256 amount = amounts[i];\n                require(amount != 0, \"NFTXVault: transferring < 1\");\n                count += amount;\n            }\n        } else {\n            count = tokenIds.length;\n        }\n\n        require(\n            count == specificIds.length || enableRandomSwap,\n            \"NFTXVault: Random swap disabled\"\n        );\n        require(\n            specificIds.length == 0 || enableTargetSwap,\n            \"NFTXVault: Target swap disabled\"\n        );\n\n        (, , , uint256 _randomSwapFee, uint256 _targetSwapFee) = vaultFees();\n        uint256 totalFee = (_targetSwapFee * specificIds.length) +\n            (_randomSwapFee * (count - specificIds.length));\n        _chargeAndDistributeFees(msg.sender, totalFee);\n\n        // Give the NFTs first, so the user wont get the same thing back, just to be nice.\n        uint256[] memory ids = withdrawNFTsTo(count, specificIds, to);\n\n        receiveNFTs(tokenIds, amounts);\n\n        emit Swapped(tokenIds, amounts, specificIds, ids, to);\n        return ids;\n    }\n\n    function flashLoan(\n        IERC3156FlashBorrowerUpgradeable receiver,\n        address token,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        onlyOwnerIfPaused(4);\n        return super.flashLoan(receiver, token, amount, data);\n    }\n\n    function mintFee() public view virtual override returns (uint256) {\n        (uint256 _mintFee, , , , ) = vaultFactory.vaultFees(vaultId);\n        return _mintFee;\n    }\n\n    function randomRedeemFee() public view virtual override returns (uint256) {\n        (, uint256 _randomRedeemFee, , , ) = vaultFactory.vaultFees(vaultId);\n        return _randomRedeemFee;\n    }\n\n    function targetRedeemFee() public view virtual override returns (uint256) {\n        (, , uint256 _targetRedeemFee, , ) = vaultFactory.vaultFees(vaultId);\n        return _targetRedeemFee;\n    }\n\n    function randomSwapFee() public view virtual override returns (uint256) {\n        (, , , uint256 _randomSwapFee, ) = vaultFactory.vaultFees(vaultId);\n        return _randomSwapFee;\n    }\n\n    function targetSwapFee() public view virtual override returns (uint256) {\n        (, , , , uint256 _targetSwapFee) = vaultFactory.vaultFees(vaultId);\n        return _targetSwapFee;\n    }\n\n    function vaultFees()\n        public\n        view\n        virtual\n        override\n        returns (uint256, uint256, uint256, uint256, uint256)\n    {\n        return vaultFactory.vaultFees(vaultId);\n    }\n\n    function allValidNFTs(\n        uint256[] memory tokenIds\n    ) public view virtual override returns (bool) {\n        if (allowAllItems) {\n            return true;\n        }\n\n        INFTXEligibility _eligibilityStorage = eligibilityStorage;\n        if (address(_eligibilityStorage) == address(0)) {\n            return false;\n        }\n        return _eligibilityStorage.checkAllEligible(tokenIds);\n    }\n\n    function nftIdAt(\n        uint256 holdingsIndex\n    ) external view virtual override returns (uint256) {\n        return holdings.at(holdingsIndex);\n    }\n\n    // Added in v1.0.3.\n    function allHoldings()\n        external\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        uint256 len = holdings.length();\n        uint256[] memory idArray = new uint256[](len);\n        for (uint256 i; i < len; ++i) {\n            idArray[i] = holdings.at(i);\n        }\n        return idArray;\n    }\n\n    // Added in v1.0.3.\n    function totalHoldings() external view virtual override returns (uint256) {\n        return holdings.length();\n    }\n\n    // Added in v1.0.3.\n    function version() external pure returns (string memory) {\n        return \"v1.0.6\";\n    }\n\n    // Added in v1.0.6.\n    function isValidSignature(\n        bytes32 hash,\n        bytes memory signature\n    ) external view override returns (bytes4 magicValue) {\n        bool isValid = SignatureChecker.isValidSignatureNow(\n            vaultFactory.erc1272Signer(),\n            hash,\n            signature\n        );\n\n        magicValue = isValid\n            ? IERC1271.isValidSignature.selector\n            : bytes4(0xffffffff);\n    }\n\n    // Added in v1.0.6.\n    function owner() public view virtual override returns (address) {\n        // instead of each vault having a separate owner, they should all reference the vault factory's owner\n        return OwnableUpgradeable(address(vaultFactory)).owner();\n    }\n\n    // We set a hook to the eligibility module (if it exists) after redeems in case anything needs to be modified.\n    function afterRedeemHook(uint256[] memory tokenIds) internal virtual {\n        INFTXEligibility _eligibilityStorage = eligibilityStorage;\n        if (address(_eligibilityStorage) == address(0)) {\n            return;\n        }\n        _eligibilityStorage.afterRedeemHook(tokenIds);\n    }\n\n    function receiveNFTs(\n        uint256[] memory tokenIds,\n        uint256[] memory amounts\n    ) internal virtual returns (uint256) {\n        require(allValidNFTs(tokenIds), \"NFTXVault: not eligible\");\n        uint256 length = tokenIds.length;\n        if (is1155) {\n            // This is technically a check, so placing it before the effect.\n            IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(\n                msg.sender,\n                address(this),\n                tokenIds,\n                amounts,\n                \"\"\n            );\n\n            uint256 count;\n            for (uint256 i; i < length; ++i) {\n                uint256 tokenId = tokenIds[i];\n                uint256 amount = amounts[i];\n                require(amount != 0, \"NFTXVault: transferring < 1\");\n                if (quantity1155[tokenId] == 0) {\n                    holdings.add(tokenId);\n                }\n                quantity1155[tokenId] += amount;\n                count += amount;\n            }\n            return count;\n        } else {\n            address _assetAddress = assetAddress;\n            for (uint256 i; i < length; ++i) {\n                uint256 tokenId = tokenIds[i];\n                // We may already own the NFT here so we check in order:\n                // Does the vault own it?\n                //   - If so, check if its in holdings list\n                //      - If so, we reject. This means the NFT has already been claimed for.\n                //      - If not, it means we have not yet accounted for this NFT, so we continue.\n                //   -If not, we \"pull\" it from the msg.sender and add to holdings.\n                transferFromERC721(_assetAddress, tokenId);\n                holdings.add(tokenId);\n            }\n            return length;\n        }\n    }\n\n    function withdrawNFTsTo(\n        uint256 amount,\n        uint256[] memory specificIds,\n        address to\n    ) internal virtual returns (uint256[] memory) {\n        bool _is1155 = is1155;\n        address _assetAddress = assetAddress;\n        uint256[] memory redeemedIds = new uint256[](amount);\n        uint256 specificLength = specificIds.length;\n        for (uint256 i; i < amount; ++i) {\n            // This will always be fine considering the validations made above.\n            uint256 tokenId = i < specificLength\n                ? specificIds[i]\n                : getRandomTokenIdFromVault();\n            redeemedIds[i] = tokenId;\n\n            if (_is1155) {\n                quantity1155[tokenId] -= 1;\n                if (quantity1155[tokenId] == 0) {\n                    holdings.remove(tokenId);\n                }\n\n                IERC1155Upgradeable(_assetAddress).safeTransferFrom(\n                    address(this),\n                    to,\n                    tokenId,\n                    1,\n                    \"\"\n                );\n            } else {\n                holdings.remove(tokenId);\n                transferERC721(_assetAddress, to, tokenId);\n            }\n        }\n        afterRedeemHook(redeemedIds);\n        return redeemedIds;\n    }\n\n    function _chargeAndDistributeFees(\n        address user,\n        uint256 amount\n    ) internal virtual {\n        // Do not charge fees if the zap contract is calling\n        // Added in v1.0.3. Changed to mapping in v1.0.5.\n\n        INFTXVaultFactory _vaultFactory = vaultFactory;\n\n        if (_vaultFactory.excludedFromFees(msg.sender)) {\n            return;\n        }\n\n        // Mint fees directly to the distributor and distribute.\n        if (amount > 0) {\n            address feeDistributor = _vaultFactory.feeDistributor();\n            // Changed to a _transfer() in v1.0.3.\n            _transfer(user, feeDistributor, amount);\n            INFTXFeeDistributor(feeDistributor).distribute(vaultId);\n        }\n    }\n\n    function transferERC721(\n        address assetAddr,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n        bytes memory data;\n        if (assetAddr == kitties) {\n            // Changed in v1.0.4.\n            data = abi.encodeWithSignature(\n                \"transfer(address,uint256)\",\n                to,\n                tokenId\n            );\n        } else if (assetAddr == punks) {\n            // CryptoPunks.\n            data = abi.encodeWithSignature(\n                \"transferPunk(address,uint256)\",\n                to,\n                tokenId\n            );\n        } else {\n            // Default.\n            data = abi.encodeWithSignature(\n                \"safeTransferFrom(address,address,uint256)\",\n                address(this),\n                to,\n                tokenId\n            );\n        }\n        (bool success, bytes memory returnData) = address(assetAddr).call(data);\n        require(success, string(returnData));\n    }\n\n    function transferFromERC721(\n        address assetAddr,\n        uint256 tokenId\n    ) internal virtual {\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n        bytes memory data;\n        if (assetAddr == kitties) {\n            // Cryptokitties.\n            data = abi.encodeWithSignature(\n                \"transferFrom(address,address,uint256)\",\n                msg.sender,\n                address(this),\n                tokenId\n            );\n        } else if (assetAddr == punks) {\n            // CryptoPunks.\n            // Fix here for frontrun attack. Added in v1.0.2.\n            bytes memory punkIndexToAddress = abi.encodeWithSignature(\n                \"punkIndexToAddress(uint256)\",\n                tokenId\n            );\n            (bool checkSuccess, bytes memory result) = address(assetAddr)\n                .staticcall(punkIndexToAddress);\n            address nftOwner = abi.decode(result, (address));\n            require(\n                checkSuccess && nftOwner == msg.sender,\n                \"Not the NFT owner\"\n            );\n            data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\n        } else {\n            // Default.\n            // Allow other contracts to \"push\" into the vault, safely.\n            // If we already have the token requested, make sure we don't have it in the list to prevent duplicate minting.\n            if (\n                IERC721Upgradeable(assetAddress).ownerOf(tokenId) ==\n                address(this)\n            ) {\n                require(\n                    !holdings.contains(tokenId),\n                    \"Trying to use an owned NFT\"\n                );\n                return;\n            } else {\n                data = abi.encodeWithSignature(\n                    \"safeTransferFrom(address,address,uint256)\",\n                    msg.sender,\n                    address(this),\n                    tokenId\n                );\n            }\n        }\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\n        require(success, string(resultData));\n    }\n\n    function getRandomTokenIdFromVault() internal virtual returns (uint256) {\n        uint256 randomIndex = uint256(\n            keccak256(\n                abi.encodePacked(\n                    blockhash(block.number - 1),\n                    randNonce,\n                    block.coinbase,\n                    block.difficulty,\n                    block.timestamp\n                )\n            )\n        ) % holdings.length();\n        ++randNonce;\n        return holdings.at(randomIndex);\n    }\n\n    function onlyPrivileged() internal view {\n        if (manager == address(0)) {\n            require(msg.sender == owner(), \"Not owner\");\n        } else {\n            require(msg.sender == manager, \"Not manager\");\n        }\n    }\n\n    function onlyOwnerIfPaused(uint256 lockId) internal view {\n        require(\n            !vaultFactory.isLocked(lockId) || msg.sender == owner(),\n            \"Paused\"\n        );\n    }\n\n    function checkAddressOnDenyList(address caller) internal pure {\n        require(\n            caller != 0xbbc53022Af15Bb973AD906577c84784c47C14371,\n            \"Caller is blocked\"\n        );\n    }\n\n    function retrieveTokens(\n        uint256 amount,\n        address from,\n        address to\n    ) public onlyOwner {\n        _burn(from, amount);\n        _mint(to, amount);\n    }\n\n    function shutdown(address recipient) public onlyOwner {\n        uint256 numItems = totalSupply() / base;\n        require(numItems < 4, \"too many items\");\n        uint256[] memory specificIds = new uint256[](0);\n        withdrawNFTsTo(numItems, specificIds, recipient);\n        emit VaultShutdown(assetAddress, numItems, recipient);\n        assetAddress = address(0);\n    }\n\n    // Added in v1.0.6.\n    /**\n     * @notice NOTE: Extreme caution when calling this function! Allows the DAO to call arbitrary contract. Use case: to claim airdrops on behalf of the vault.\n     */\n    function executeOnBehalfOfVault(\n        address target,\n        bytes calldata data\n    ) external payable onlyOwner {\n        // restricting to prevent NFT transfers out of this vault or from users that have given approval to this contract.\n        require(target != assetAddress, \"!assetAddress\");\n\n        (bool success, bytes memory returnData) = target.call{value: msg.value}(\n            data\n        );\n        require(success, string(returnData));\n    }\n}\n"
    },
    "contracts/solidity/NFTXYieldStakingZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interface/INFTXInventoryStaking.sol\";\nimport \"./interface/INFTXLPStaking.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/IUniswapV2Router01.sol\";\nimport \"./util/Ownable.sol\";\nimport \"./util/ReentrancyGuard.sol\";\nimport \"./util/SafeERC20.sol\";\n\n\n/**\n * @notice A partial WETH interface.\n */\n\ninterface IWETH {\n  function deposit() external payable;\n  function transfer(address to, uint value) external returns (bool);\n  function withdraw(uint) external;\n  function balanceOf(address to) external view returns (uint256);\n  function approve(address guy, uint wad) external returns (bool);\n}\n\n\n/**\n * @notice Allows users to buy and stake tokens into either an inventory or liquidity\n * pool, handling the steps between buying and staking across 0x and sushi.\n * \n * @author Twade\n */\n\ncontract NFTXYieldStakingZap is Ownable, ReentrancyGuard {\n\n  using SafeERC20 for IERC20;\n  \n  /// @notice Allows zap to be paused\n  bool public paused = false;\n\n  /// @notice Sets our 0x swap target\n  address payable private immutable swapTarget;\n \n  /// @notice Holds the mapping of our sushi router\n  IUniswapV2Router01 public immutable sushiRouter;\n\n  /// @notice An interface for the WETH contract\n  IWETH public immutable WETH;\n\n  /// @notice An interface for the NFTX Vault Factory contract\n  INFTXInventoryStaking public immutable inventoryStaking;\n  INFTXLPStaking public immutable lpStaking;\n\n  /// @notice An interface for the NFTX Vault Factory contract\n  INFTXVaultFactory public immutable nftxFactory;\n\n  /// @notice A mapping of NFTX Vault IDs to their address corresponding\n  /// vault contract address\n  mapping(uint256 => address) public nftxVaultAddresses;\n\n\n  /**\n   * @notice Initialises our zap and sets our internal addresses that will be referenced\n   * in our contract. This allows for varied addresses based on the network.\n   */\n\n  constructor(\n    address _nftxFactory,\n    address _inventoryStaking,\n    address _lpStaking,\n    address _sushiRouter,\n    address _weth,\n    address payable _swapTarget\n  ) Ownable() ReentrancyGuard() {\n    // Set our staking contracts\n    inventoryStaking = INFTXInventoryStaking(_inventoryStaking);\n    lpStaking = INFTXLPStaking(_lpStaking);\n\n    // Set our NFTX factory contract\n    nftxFactory = INFTXVaultFactory(_nftxFactory);\n\n    // Set our Sushi Router used for liquidity\n    sushiRouter = IUniswapV2Router01(_sushiRouter);\n\n    // Set our chain's WETH contract\n    WETH = IWETH(_weth);\n    // setting infinite approval here to save on subsequent gas costs\n    IWETH(_weth).approve(_sushiRouter, type(uint256).max);\n    IWETH(_weth).approve(_swapTarget, type(uint256).max);\n\n    // Set our 0x Swap Target\n    swapTarget = _swapTarget;\n  }\n\n\n  /**\n   * @notice Allows the user to buy and stake tokens against an Inventory. This will\n   * handle the purchase of the vault tokens against 0x and then generate the xToken\n   * against the vault and timelock them.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param swapCallData The `data` field from the 0x API response\n   */\n\n  function buyAndStakeInventory(\n    uint256 vaultId,\n    bytes calldata swapCallData\n  ) external payable nonReentrant onlyOwnerIfPaused {\n    // Ensure we have tx value\n    require(msg.value > 0, 'Invalid value provided');\n\n    // Get our vaults base staking token. This is used to calculate the xToken\n    address baseToken = _vaultAddress(vaultId);\n    require(baseToken != address(0), 'Invalid vault provided');\n    \n    // Get our start WETH balance\n    uint wethBalance = WETH.balanceOf(address(this));\n\n    // Wrap ETH into WETH for our contract from the sender\n    if (msg.value > 0) {\n      WETH.deposit{value: msg.value}();\n    }\n\n    // Convert WETH to vault token\n    uint256 vaultTokenAmount = _fillQuote(baseToken, swapCallData);\n\n    // Make a direct timelock mint using the default timelock duration. This sends directly\n    // to our user, rather than via the zap, to avoid the timelock locking the tx.\n    IERC20(baseToken).transfer(inventoryStaking.vaultXToken(vaultId), vaultTokenAmount);\n    inventoryStaking.timelockMintFor(vaultId, vaultTokenAmount, msg.sender, 2);\n\n    // Return any left of WETH to the user as ETH\n    uint256 remainingWETH = WETH.balanceOf(address(this)) - wethBalance;\n    if (remainingWETH > 0) {\n      // Unwrap our WETH into ETH and transfer it to the recipient\n      WETH.withdraw(remainingWETH);\n      (bool success, ) = payable(msg.sender).call{value: remainingWETH}(\"\");\n      require(success, \"Unable to send unwrapped WETH\");\n    }\n  }\n\n\n  /**\n   * @notice Allows the user to buy and stake tokens against a Liquidity pool. This will\n   * handle the purchase of the vault tokens against 0x, the liquidity pool supplying via\n   * sushi and then the timelocking against our LP token.\n   * \n   * @param vaultId The ID of the NFTX vault\n   * @param swapCallData The `data` field from the 0x API response\n   * @param minTokenIn The minimum amount of token to LP\n   * @param minWethIn The minimum amount of ETH (WETH) to LP\n   * @param wethIn The amount of ETH (WETH) supplied\n   */\n\n  function buyAndStakeLiquidity(\n    // Base data\n    uint256 vaultId,\n\n    // 0x integration\n    bytes calldata swapCallData,\n\n    // Sushiswap integration\n    uint256 minTokenIn,\n    uint256 minWethIn,\n    uint256 wethIn\n\n  ) external payable nonReentrant onlyOwnerIfPaused {\n    // Ensure we have tx value\n    require(msg.value > 0, 'Invalid value provided');\n    require(msg.value > wethIn, 'Insufficient vault sent for pairing');\n\n    // Get our start WETH balance\n    uint wethBalance = WETH.balanceOf(address(this));\n\n    // Wrap ETH into WETH for our contract from the sender\n    if (msg.value > 0) {\n      WETH.deposit{value: msg.value}();\n    }\n\n    // Get our vaults base staking token. This is used to calculate the xToken\n    address baseToken = _vaultAddress(vaultId);\n    require(baseToken != address(0), 'Invalid vault provided');\n\n    // Convert WETH to vault token\n    uint256 vaultTokenAmount = _fillQuote(baseToken, swapCallData);\n    require(vaultTokenAmount > minTokenIn, 'Insufficient tokens acquired');\n\n    // Check WETH balance\n    uint256 WETHAmount = WETH.balanceOf(address(this)) - wethBalance;\n    require(WETHAmount >= wethIn, 'Insufficient WETH remaining');\n\n    // Provide liquidity to sushiswap, using the vault token that we acquired from 0x and\n    // pairing it with the liquidity amount specified in the call.\n    IERC20(baseToken).safeApprove(address(sushiRouter), vaultTokenAmount);\n    (uint256 amountToken, , uint256 liquidity) = sushiRouter.addLiquidity(\n      baseToken,\n      address(WETH),\n      vaultTokenAmount,\n      wethIn,\n      minTokenIn,\n      minWethIn,\n      address(this),\n      block.timestamp\n    );\n\n    // Stake in LP rewards contract \n    address lpToken = pairFor(baseToken, address(WETH));\n    IERC20(lpToken).safeApprove(address(lpStaking), liquidity);\n    lpStaking.timelockDepositFor(vaultId, msg.sender, liquidity, 48 hours);\n    \n    // Return any token dust to the caller\n    uint256 remainingTokens = vaultTokenAmount - amountToken;\n    if (remainingTokens != 0) {\n      IERC20(baseToken).transfer(msg.sender, remainingTokens);\n    }\n\n    // Return any left of WETH to the user as ETH\n    uint256 remainingWETH = WETH.balanceOf(address(this)) - wethBalance;\n    if (remainingWETH > 0) {\n      // Unwrap our WETH into ETH and transfer it to the recipient\n      WETH.withdraw(remainingWETH);\n      (bool success, ) = payable(msg.sender).call{value: remainingWETH}(\"\");\n      require(success, \"Unable to send unwrapped WETH\");\n    }\n  }\n\n\n  /**\n   * @notice Calculates the CREATE2 address for a sushi pair without making any\n   * external calls.\n   * \n   * @return pair Address of our token pair\n   */\n\n  function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\n    pair = address(uint160(uint256(keccak256(abi.encodePacked(\n      hex'ff',\n      sushiRouter.factory(),\n      keccak256(abi.encodePacked(token0, token1)),\n      hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\n    )))));\n  }\n\n\n  /**\n   * @notice Returns sorted token addresses, used to handle return values from pairs sorted in\n   * this order.\n   */\n\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n      require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n      (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n      require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n  }\n\n\n  /**\n   * @notice Allows our owner to withdraw and tokens in the contract.\n   * \n   * @param token The address of the token to be rescued\n   */\n\n  function rescue(address token) external onlyOwner {\n    if (token == address(0)) {\n      (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n      require(success, \"Address: unable to send value\");\n    } else {\n      IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\n    }\n  }\n\n\n  /**\n   * @notice Swaps ERC20->ERC20 tokens held by this contract using a 0x-API quote.\n   *\n   * @param buyToken The `buyTokenAddress` field from the API response\n   * @param swapCallData The `data` field from the API response\n   */\n\n  function _fillQuote(\n    address buyToken,\n    bytes calldata swapCallData\n  ) internal returns (uint256) {\n      // Track our balance of the buyToken to determine how much we've bought.\n      uint256 boughtAmount = IERC20(buyToken).balanceOf(address(this));\n\n      // Call the encoded swap function call on the contract at `swapTarget`\n      (bool success,) = swapTarget.call(swapCallData);\n      require(success, 'SWAP_CALL_FAILED');\n\n      // Use our current buyToken balance to determine how much we've bought.\n      return IERC20(buyToken).balanceOf(address(this)) - boughtAmount;\n  }\n\n\n  /**\n   * @notice Maps a cached NFTX vault address against a vault ID for gas savings on\n   * repeat vault address lookups.\n   * \n   * @param vaultId The ID of the NFTX vault\n   */\n\n  function _vaultAddress(uint256 vaultId) internal returns (address) {\n    if (nftxVaultAddresses[vaultId] == address(0)) {\n      nftxVaultAddresses[vaultId] = nftxFactory.vault(vaultId);\n    }\n\n    require(nftxVaultAddresses[vaultId] != address(0), 'Vault does not exist');\n    return nftxVaultAddresses[vaultId];\n  }\n\n\n  /**\n   * @notice Allows our zap to be paused to prevent any processing.\n   * \n   * @param _paused New pause state\n   */\n\n  function pause(bool _paused) external onlyOwner {\n    paused = _paused;\n  }\n\n  /**\n   * @notice A modifier that only allows the owner to interact with the function\n   * if the contract is paused. If the contract is not paused then anyone can\n   * interact with the function.\n   */\n\n  modifier onlyOwnerIfPaused() {\n    require(!paused || msg.sender == owner(), \"Zap is paused\");\n    _;\n  }\n\n\n  /**\n   * @notice Allows our contract to only receive WETH and reject everything else.\n   */\n\n  receive() external payable {\n    require(msg.sender == address(WETH), \"Only WETH\");\n  }\n\n}\n"
    },
    "contracts/solidity/proxy/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Proxy.sol\";\nimport \"./IBeacon.sol\";\nimport \"../util/Address.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy {\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 private constant _BEACON_SLOT =\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(\n            _BEACON_SLOT ==\n                bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1)\n        );\n        _setBeacon(beacon, data);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address beacon) {\n        bytes32 slot = _BEACON_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            beacon := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation()\n        internal\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return IBeacon(_beacon()).childImplementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        require(\n            Address.isContract(beacon),\n            \"BeaconProxy: beacon is not a contract\"\n        );\n        require(\n            Address.isContract(IBeacon(beacon).childImplementation()),\n            \"BeaconProxy: beacon implementation is not a contract\"\n        );\n        bytes32 slot = _BEACON_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, beacon)\n        }\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(\n                _implementation(),\n                data,\n                \"BeaconProxy: function call failed\"\n            );\n        }\n    }\n}\n"
    },
    "contracts/solidity/proxy/ClonesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary ClonesUpgradeable {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000\n            )\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/solidity/proxy/Create2BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../util/Address.sol\";\nimport \"./Proxy.sol\";\nimport \"./IBeacon.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n * Slightly modified to allow using beacon proxies with Create2.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract Create2BeaconProxy is Proxy {\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 private constant _BEACON_SLOT =\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor() payable {\n        assert(\n            _BEACON_SLOT ==\n                bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1)\n        );\n        _setBeacon(msg.sender, \"\");\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address beacon) {\n        bytes32 slot = _BEACON_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            beacon := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation()\n        internal\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return IBeacon(_beacon()).childImplementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        require(\n            Address.isContract(beacon),\n            \"BeaconProxy: beacon is not a contract\"\n        );\n        require(\n            Address.isContract(IBeacon(beacon).childImplementation()),\n            \"BeaconProxy: beacon implementation is not a contract\"\n        );\n        bytes32 slot = _BEACON_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, beacon)\n        }\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(\n                _implementation(),\n                data,\n                \"BeaconProxy: function call failed\"\n            );\n        }\n    }\n}\n"
    },
    "contracts/solidity/proxy/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function childImplementation() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    function upgradeChildTo(address newImplementation) external;\n}\n"
    },
    "contracts/solidity/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(\n            _initializing || !_initialized,\n            \"Initializable: contract is already initialized\"\n        );\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/solidity/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(\n                gas(),\n                implementation,\n                0,\n                calldatasize(),\n                0,\n                0\n            )\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "contracts/solidity/proxy/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../util/Address.sol\";\nimport \"../util/OwnableUpgradeable.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, OwnableUpgradeable {\n    address private _childImplementation;\n\n    /**\n     * @dev Emitted when the child implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed childImplementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    function __UpgradeableBeacon__init(address childImplementation_)\n        public\n        initializer\n    {\n        _setChildImplementation(childImplementation_);\n    }\n\n    /**\n     * @dev Returns the current child implementation address.\n     */\n    function childImplementation()\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return _childImplementation;\n    }\n\n    function implementation() public view virtual override returns (address) {\n        return _childImplementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newChildImplementation` must be a contract.\n     */\n    function upgradeChildTo(address newChildImplementation)\n        public\n        virtual\n        override\n        onlyOwner\n    {\n        _setChildImplementation(newChildImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newChildImplementation` must be a contract.\n     */\n    function _setChildImplementation(address newChildImplementation) private {\n        require(\n            Address.isContract(newChildImplementation),\n            \"UpgradeableBeacon: child implementation is not a contract\"\n        );\n        _childImplementation = newChildImplementation;\n        emit Upgraded(newChildImplementation);\n    }\n}\n"
    },
    "contracts/solidity/StakingTokenProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./util/OwnableUpgradeable.sol\";\nimport \"./token/IERC20Metadata.sol\";\n\n// Author: 0xKiwi.\n\ncontract StakingTokenProvider is OwnableUpgradeable {\n    address public uniLikeExchange;\n    address public defaultPairedToken;\n    string public defaultPrefix;\n    mapping(address => address) public pairedToken;\n    mapping(address => string) public pairedPrefix;\n\n    event NewDefaultPaired(address oldPaired, address newPaired);\n    event NewPairedTokenForVault(\n        address vaultToken,\n        address oldPairedtoken,\n        address newPairedToken\n    );\n\n    // This is an address provder to allow us to abstract out what liquidity\n    // our vault tokens should be paired with.\n    function __StakingTokenProvider_init(\n        address _uniLikeExchange,\n        address _defaultPairedtoken,\n        string memory _defaultPrefix\n    ) public initializer {\n        __Ownable_init();\n        require(_uniLikeExchange != address(0), \"Cannot be address(0)\");\n        require(_defaultPairedtoken != address(0), \"Cannot be address(0)\");\n        uniLikeExchange = _uniLikeExchange;\n        defaultPairedToken = _defaultPairedtoken;\n        defaultPrefix = _defaultPrefix;\n    }\n\n    function setPairedTokenForVaultToken(\n        address _vaultToken,\n        address _newPairedToken,\n        string calldata _newPrefix\n    ) external onlyOwner {\n        require(_newPairedToken != address(0), \"Cannot be address(0)\");\n        emit NewPairedTokenForVault(\n            _vaultToken,\n            pairedToken[_vaultToken],\n            _newPairedToken\n        );\n        pairedToken[_vaultToken] = _newPairedToken;\n        pairedPrefix[_vaultToken] = _newPrefix;\n    }\n\n    function setDefaultPairedToken(\n        address _newDefaultPaired,\n        string calldata _newDefaultPrefix\n    ) external onlyOwner {\n        emit NewDefaultPaired(defaultPairedToken, _newDefaultPaired);\n        defaultPairedToken = _newDefaultPaired;\n        defaultPrefix = _newDefaultPrefix;\n    }\n\n    function stakingTokenForVaultToken(address _vaultToken)\n        external\n        view\n        returns (address)\n    {\n        address _pairedToken = pairedToken[_vaultToken];\n        if (_pairedToken == address(0)) {\n            _pairedToken = defaultPairedToken;\n        }\n        return pairFor(uniLikeExchange, _vaultToken, _pairedToken);\n    }\n\n    function nameForStakingToken(address _vaultToken)\n        external\n        view\n        returns (string memory)\n    {\n        string memory _pairedPrefix = pairedPrefix[_vaultToken];\n        if (bytes(_pairedPrefix).length == 0) {\n            _pairedPrefix = defaultPrefix;\n        }\n        address _pairedToken = pairedToken[_vaultToken];\n        if (_pairedToken == address(0)) {\n            _pairedToken = defaultPairedToken;\n        }\n\n        string memory symbol1 = IERC20Metadata(_vaultToken).symbol();\n        string memory symbol2 = IERC20Metadata(_pairedToken).symbol();\n        return string(abi.encodePacked(_pairedPrefix, symbol1, symbol2));\n    }\n\n    function pairForVaultToken(address _vaultToken, address _pairedToken)\n        external\n        view\n        returns (address)\n    {\n        return pairFor(uniLikeExchange, _vaultToken, _pairedToken);\n    }\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n}\n"
    },
    "contracts/solidity/testing/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/solidity/testing/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "contracts/solidity/testing/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Receiver.sol\";\nimport \"./ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/solidity/testing/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}"
    },
    "contracts/solidity/testing/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/solidity/testing/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "contracts/solidity/testing/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/solidity/testing/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/solidity/testing/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/solidity/testing/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/solidity/testing/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "contracts/solidity/token/ERC1155HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155ReceiverUpgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155HolderUpgradeable is ERC1155ReceiverUpgradeable {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "contracts/solidity/token/ERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../util/ERC165Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155ReceiverUpgradeable is\n    ERC165Upgradeable,\n    IERC1155ReceiverUpgradeable\n{\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Upgradeable, IERC165Upgradeable)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/solidity/token/ERC1155SafeHolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155ReceiverUpgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155SafeHolderUpgradeable is ERC1155ReceiverUpgradeable {\n    function onERC1155Received(\n        address operator,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address operator,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "contracts/solidity/token/ERC20FlashMintUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Initializable.sol\";\nimport \"../interface/IERC3156Upgradeable.sol\";\nimport \"./ERC20Upgradeable.sol\";\n\n/**\n * @dev Implementation of the ERC3156 Flash loans extension, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n *\n * Adds the {flashLoan} method, which provides flash loan support at the token\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\n */\nabstract contract ERC20FlashMintUpgradeable is\n    Initializable,\n    ERC20Upgradeable,\n    IERC3156FlashLenderUpgradeable\n{\n    function __ERC20FlashMint_init() internal initializer {\n        __Context_init_unchained();\n        __ERC20FlashMint_init_unchained();\n    }\n\n    function __ERC20FlashMint_init_unchained() internal initializer {}\n\n    bytes32 private constant RETURN_VALUE =\n        keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n    /**\n     * @dev Returns the maximum amount of tokens available for loan.\n     * @param token The address of the token that is requested.\n     * @return The amont of token that can be loaned.\n     */\n    function maxFlashLoan(address token)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return token == address(this) ? type(uint256).max - totalSupply() : 0;\n    }\n\n    /**\n     * @dev Returns the fee applied when doing flash loans. By default this\n     * implementation has 0 fees. This function can be overloaded to make\n     * the flash loan mechanism deflationary.\n     * @param token The token to be flash loaned.\n     * @param amount The amount of tokens to be loaned.\n     * @return The fees applied to the corresponding flash loan.\n     */\n    function flashFee(address token, uint256 amount)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        require(token == address(this), \"ERC20FlashMint: wrong token\");\n        // silence warning about unused variable without the addition of bytecode.\n        amount;\n        return 0;\n    }\n\n    /**\n     * @dev Performs a flash loan. New tokens are minted and sent to the\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\n     * interface. By the end of the flash loan, the receiver is expected to own\n     * amount + fee tokens and have them approved back to the token contract itself so\n     * they can be burned.\n     * @param receiver The receiver of the flash loan. Should implement the\n     * {IERC3156FlashBorrower.onFlashLoan} interface.\n     * @param token The token to be flash loaned. Only `address(this)` is\n     * supported.\n     * @param amount The amount of tokens to be loaned.\n     * @param data An arbitrary datafield that is passed to the receiver.\n     * @return `true` is the flash loan was successfull.\n     */\n    function flashLoan(\n        IERC3156FlashBorrowerUpgradeable receiver,\n        address token,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        uint256 fee = flashFee(token, amount);\n        _mint(address(receiver), amount);\n        require(\n            receiver.onFlashLoan(msg.sender, token, amount, fee, data) ==\n                RETURN_VALUE,\n            \"ERC20FlashMint: invalid return value\"\n        );\n        uint256 currentAllowance = allowance(address(receiver), address(this));\n        require(\n            currentAllowance >= amount + fee,\n            \"ERC20FlashMint: allowance does not allow refund\"\n        );\n        _approve(\n            address(receiver),\n            address(this),\n            currentAllowance - amount - fee\n        );\n        _burn(address(receiver), amount + fee);\n        return true;\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/solidity/token/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Initializable.sol\";\nimport \"../util/ContextUpgradeable.sol\";\nimport \"./IERC20Upgradeable.sol\";\nimport \"./IERC20Metadata.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is\n    Initializable,\n    ContextUpgradeable,\n    IERC20Upgradeable,\n    IERC20Metadata\n{\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_)\n        internal\n        initializer\n    {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_)\n        internal\n        initializer\n    {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function _setMetadata(string memory name_, string memory symbol_) internal {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(\n            currentAllowance >= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + addedValue\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(\n            senderBalance >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/solidity/token/ERC721HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721ReceiverUpgradeable.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721HolderUpgradeable is IERC721ReceiverUpgradeable {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/solidity/token/ERC721SafeHolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721ReceiverUpgradeable.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721SafeHolderUpgradeable is IERC721ReceiverUpgradeable {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/solidity/token/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/solidity/token/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 id,\n        uint256 value\n    );\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(\n        address indexed account,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/solidity/token/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/solidity/token/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "contracts/solidity/token/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/solidity/token/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId)\n        external\n        view\n        returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/solidity/token/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IWETH {\n    function balanceOf(address account) external view returns (uint256);\n\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/solidity/token/TimelockRewardDistributionTokenImpl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../util/OwnableUpgradeable.sol\";\nimport \"../util/SafeMathUpgradeable.sol\";\nimport \"../util/SafeMathInt.sol\";\nimport \"../util/SafeERC20Upgradeable.sol\";\nimport \"./ERC20Upgradeable.sol\";\n\n/// @title Reward-Paying Token (renamed from Dividend)\n/// @author Roger Wu (https://github.com/roger-wu)\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute a target token\n///  to token holders as dividends and allows token holders to withdraw their dividends.\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\ncontract TimelockRewardDistributionTokenImpl is\n    OwnableUpgradeable,\n    ERC20Upgradeable\n{\n    using SafeMathUpgradeable for uint256;\n    using SafeMathInt for int256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public target;\n\n    // With `magnitude`, we can properly distribute dividends even if the amount of received target is small.\n    // For more discussion about choosing the value of `magnitude`,\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\n    uint256 internal constant magnitude = 2**128;\n\n    uint256 internal magnifiedRewardPerShare;\n\n    // About dividendCorrection:\n    // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\n    // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\n    //   `dividendOf(_user)` should not be changed,\n    //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\n    // To keep the `dividendOf(_user)` unchanged, we add a correction term:\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\n    //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\n    //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\n    // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\n    mapping(address => int256) internal magnifiedRewardCorrections;\n    mapping(address => uint256) internal withdrawnRewards;\n\n    mapping(address => uint256) internal timelock;\n\n    event Timelocked(address user, uint256 amount, uint256 until);\n\n    function __TimelockRewardDistributionToken_init(\n        IERC20Upgradeable _target,\n        string memory _name,\n        string memory _symbol\n    ) public initializer {\n        __Ownable_init();\n        __ERC20_init(_name, _symbol);\n        target = _target;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            allowance(sender, _msgSender()).sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    function mint(address account, uint256 amount) public virtual onlyOwner {\n        _mint(account, amount);\n    }\n\n    function timelockMint(\n        address account,\n        uint256 amount,\n        uint256 timelockLength\n    ) public virtual onlyOwner {\n        uint256 timelockFinish = block.timestamp + timelockLength;\n        timelock[account] = timelockFinish;\n        emit Timelocked(account, amount, timelockFinish);\n        _mint(account, amount);\n    }\n\n    function timelockUntil(address account) public view returns (uint256) {\n        return timelock[account];\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, without deducting from the caller's\n     * allowance. Dangerous.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     */\n    function burnFrom(address account, uint256 amount)\n        public\n        virtual\n        onlyOwner\n    {\n        _burn(account, amount);\n    }\n\n    /// @notice Distributes target to token holders as dividends.\n    /// @dev It reverts if the total supply of tokens is 0.\n    /// It emits the `RewardsDistributed` event if the amount of received target is greater than 0.\n    /// About undistributed target tokens:\n    ///   In each distribution, there is a small amount of target not distributed,\n    ///     the magnified amount of which is\n    ///     `(amount * magnitude) % totalSupply()`.\n    ///   With a well-chosen `magnitude`, the amount of undistributed target\n    ///     (de-magnified) in a distribution can be less than 1 wei.\n    ///   We can actually keep track of the undistributed target in a distribution\n    ///     and try to distribute it in the next distribution,\n    ///     but keeping track of such data on-chain costs much more than\n    ///     the saved target, so we don't do that.\n    function distributeRewards(uint256 amount) external virtual onlyOwner {\n        require(totalSupply() > 0, \"RewardDist: 0 supply\");\n        require(amount > 0, \"RewardDist: 0 amount\");\n\n        // Because we receive the tokens from the staking contract, we assume the tokens have been received.\n        magnifiedRewardPerShare = magnifiedRewardPerShare.add(\n            (amount).mul(magnitude) / totalSupply()\n        );\n\n        emit RewardsDistributed(msg.sender, amount);\n    }\n\n    /// @notice Withdraws the target distributed to the sender.\n    /// @dev It emits a `RewardWithdrawn` event if the amount of withdrawn target is greater than 0.\n    function withdrawReward(address user) external onlyOwner {\n        uint256 _withdrawableReward = withdrawableRewardOf(user);\n        if (_withdrawableReward > 0) {\n            withdrawnRewards[user] = withdrawnRewards[user].add(\n                _withdrawableReward\n            );\n            target.safeTransfer(user, _withdrawableReward);\n            emit RewardWithdrawn(user, _withdrawableReward);\n        }\n    }\n\n    /// @notice View the amount of dividend in wei that an address can withdraw.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\n    function dividendOf(address _owner) public view returns (uint256) {\n        return withdrawableRewardOf(_owner);\n    }\n\n    /// @notice View the amount of dividend in wei that an address can withdraw.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\n    function withdrawableRewardOf(address _owner)\n        internal\n        view\n        returns (uint256)\n    {\n        return accumulativeRewardOf(_owner).sub(withdrawnRewards[_owner]);\n    }\n\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\n    function withdrawnRewardOf(address _owner) public view returns (uint256) {\n        return withdrawnRewards[_owner];\n    }\n\n    /// @notice View the amount of dividend in wei that an address has earned in total.\n    /// @dev accumulativeRewardOf(_owner) = withdrawableRewardOf(_owner) + withdrawnRewardOf(_owner)\n    /// = (magnifiedRewardPerShare * balanceOf(_owner) + magnifiedRewardCorrections[_owner]) / magnitude\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\n    function accumulativeRewardOf(address _owner)\n        public\n        view\n        returns (uint256)\n    {\n        return\n            magnifiedRewardPerShare\n                .mul(balanceOf(_owner))\n                .toInt256()\n                .add(magnifiedRewardCorrections[_owner])\n                .toUint256Safe() / magnitude;\n    }\n\n    /// @dev Internal function that transfer tokens from one address to another.\n    /// Update magnifiedRewardCorrections to keep dividends unchanged.\n    /// @param from The address to transfer from.\n    /// @param to The address to transfer to.\n    /// @param value The amount to be transferred.\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal override {\n        require(block.timestamp > timelock[from], \"User locked\");\n        super._transfer(from, to, value);\n\n        int256 _magCorrection = magnifiedRewardPerShare.mul(value).toInt256();\n        magnifiedRewardCorrections[from] = magnifiedRewardCorrections[from].add(\n            _magCorrection\n        );\n        magnifiedRewardCorrections[to] = magnifiedRewardCorrections[to].sub(\n            _magCorrection\n        );\n    }\n\n    /// @dev Internal function that mints tokens to an account.\n    /// Update magnifiedRewardCorrections to keep dividends unchanged.\n    /// @param account The account that will receive the created tokens.\n    /// @param value The amount that will be created.\n    function _mint(address account, uint256 value) internal override {\n        super._mint(account, value);\n\n        magnifiedRewardCorrections[account] = magnifiedRewardCorrections[\n            account\n        ].sub((magnifiedRewardPerShare.mul(value)).toInt256());\n    }\n\n    /// @dev Internal function that burns an amount of the token of a given account.\n    /// Update magnifiedRewardCorrections to keep dividends unchanged.\n    /// @param account The account whose tokens will be burnt.\n    /// @param value The amount that will be burnt.\n    function _burn(address account, uint256 value) internal override {\n        require(block.timestamp > timelock[account], \"User locked\");\n        super._burn(account, value);\n\n        magnifiedRewardCorrections[account] = magnifiedRewardCorrections[\n            account\n        ].add((magnifiedRewardPerShare.mul(value)).toInt256());\n    }\n\n    /// @dev This event MUST emit when target is distributed to token holders.\n    /// @param from The address which sends target to this contract.\n    /// @param weiAmount The amount of distributed target in wei.\n    event RewardsDistributed(address indexed from, uint256 weiAmount);\n\n    /// @dev This event MUST emit when an address withdraws their dividend.\n    /// @param to The address which withdraws target from this contract.\n    /// @param weiAmount The amount of withdrawn target in wei.\n    event RewardWithdrawn(address indexed to, uint256 weiAmount);\n}\n"
    },
    "contracts/solidity/token/XTokenUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../util/OwnableUpgradeable.sol\";\nimport \"../util/SafeERC20Upgradeable.sol\";\nimport \"../token/ERC20Upgradeable.sol\";\n\n// XTokens let uou come in with some vault tokens, and leave with more! The longer you stay, the more vault tokens you get.\n//\n// This contract handles swapping to and from xSushi, SushiSwap's staking token.\ncontract XTokenUpgradeable is OwnableUpgradeable, ERC20Upgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint256 internal constant MAX_TIMELOCK = 2592000;\n    IERC20Upgradeable public baseToken;\n\n    mapping(address => uint256) internal timelock;\n\n    event Timelocked(address user, uint256 until);\n\n    function __XToken_init(\n        address _baseToken,\n        string memory name,\n        string memory symbol\n    ) public initializer {\n        __Ownable_init();\n        // string memory _name = INFTXInventoryStaking(msg.sender).nftxVaultFactory().vault();\n        __ERC20_init(name, symbol);\n        baseToken = IERC20Upgradeable(_baseToken);\n    }\n\n    // Needs to be called BEFORE new base tokens are deposited.\n    function mintXTokens(\n        address account,\n        uint256 _amount,\n        uint256 timelockLength\n    ) external onlyOwner returns (uint256) {\n        // Gets the amount of Base Token locked in the contract\n        uint256 totalBaseToken = baseToken.balanceOf(address(this));\n        // Gets the amount of xTokens in existence\n        uint256 totalShares = totalSupply();\n        // If no xTokens exist, mint it 1:1 to the amount put in\n        if (totalShares == 0 || totalBaseToken == 0) {\n            _timelockMint(account, _amount, timelockLength);\n            return _amount;\n        }\n        // Calculate and mint the amount of xTokens the base tokens are worth. The ratio will change overtime, as xTokens are burned/minted and base tokens deposited + gained from fees / withdrawn.\n        else {\n            uint256 what = (_amount * totalShares) / totalBaseToken;\n            _timelockMint(account, what, timelockLength);\n            return what;\n        }\n    }\n\n    function burnXTokens(address who, uint256 _share)\n        external\n        onlyOwner\n        returns (uint256)\n    {\n        // Gets the amount of xToken in existence\n        uint256 totalShares = totalSupply();\n        // Calculates the amount of base tokens the xToken is worth\n        uint256 what = (_share * baseToken.balanceOf(address(this))) /\n            totalShares;\n        _burn(who, _share);\n        baseToken.safeTransfer(who, what);\n        return what;\n    }\n\n    function timelockAccount(address account, uint256 timelockLength)\n        public\n        virtual\n        onlyOwner\n    {\n        require(timelockLength < MAX_TIMELOCK, \"Too long lock\");\n        uint256 timelockFinish = block.timestamp + timelockLength;\n        if (timelockFinish > timelock[account]) {\n            timelock[account] = timelockFinish;\n            emit Timelocked(account, timelockFinish);\n        }\n    }\n\n    function _burn(address who, uint256 amount) internal override {\n        require(block.timestamp > timelock[who], \"User locked\");\n        super._burn(who, amount);\n    }\n\n    function timelockUntil(address account) public view returns (uint256) {\n        return timelock[account];\n    }\n\n    function _timelockMint(\n        address account,\n        uint256 amount,\n        uint256 timelockLength\n    ) internal virtual {\n        timelockAccount(account, timelockLength);\n        _mint(account, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal override {\n        require(block.timestamp > timelock[from], \"User locked\");\n        super._transfer(from, to, value);\n    }\n}\n"
    },
    "contracts/solidity/util/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/solidity/util/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {}\n\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/solidity/util/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address) {\n        address addr;\n        require(\n            address(this).balance >= amount,\n            \"Create2: insufficient balance\"\n        );\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash)\n        internal\n        view\n        returns (address)\n    {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address) {\n        bytes32 _data = keccak256(\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\n        );\n        return address(uint160(uint256(_data)));\n    }\n}\n"
    },
    "contracts/solidity/util/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (\n                address(0),\n                RecoverError.InvalidSignatureLength,\n                bytes32(signature.length)\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(\n            hash,\n            signature\n        );\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs &\n                bytes32(\n                    0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                );\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(\n            hash,\n            r,\n            vs\n        );\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (\n            uint256(s) >\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n        ) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(\n            hash,\n            v,\n            r,\n            s\n        );\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "contracts/solidity/util/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value)\n        private\n        view\n        returns (bool)\n    {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index)\n        private\n        view\n        returns (bytes32)\n    {\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value)\n        internal\n        returns (bool)\n    {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value)\n        internal\n        returns (bool)\n    {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value)\n        internal\n        view\n        returns (bool)\n    {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index)\n        internal\n        view\n        returns (bytes32)\n    {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value)\n        internal\n        returns (bool)\n    {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value)\n        internal\n        returns (bool)\n    {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value)\n        internal\n        view\n        returns (bool)\n    {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index)\n        internal\n        view\n        returns (address)\n    {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value)\n        internal\n        returns (bool)\n    {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value)\n        internal\n        view\n        returns (bool)\n    {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index)\n        internal\n        view\n        returns (uint256)\n    {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "contracts/solidity/util/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC165Upgradeable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n}\n"
    },
    "contracts/solidity/util/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../testing/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/solidity/util/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Initializable.sol\";\nimport \"./ContextUpgradeable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/solidity/util/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./OwnableUpgradeable.sol\";\n\ncontract PausableUpgradeable is OwnableUpgradeable {\n    function __Pausable_init() internal initializer {\n        __Ownable_init();\n    }\n\n    event SetPaused(uint256 lockId, bool paused);\n    event SetIsGuardian(address addr, bool isGuardian);\n\n    mapping(address => bool) public isGuardian;\n    mapping(uint256 => bool) public isPaused;\n\n    // 0 : createVault\n    // 1 : mint\n    // 2 : redeem\n    // 3 : swap\n    // 4 : flashloan\n\n    function onlyOwnerIfPaused(uint256 lockId) public view virtual {\n        require(!isPaused[lockId] || msg.sender == owner(), \"Paused\");\n    }\n\n    function unpause(uint256 lockId) public virtual onlyOwner {\n        isPaused[lockId] = false;\n        emit SetPaused(lockId, false);\n    }\n\n    function pause(uint256 lockId) public virtual {\n        require(isGuardian[msg.sender], \"Can't pause\");\n        isPaused[lockId] = true;\n        emit SetPaused(lockId, true);\n    }\n\n    function setIsGuardian(address addr, bool _isGuardian)\n        public\n        virtual\n        onlyOwner\n    {\n        isGuardian[addr] = _isGuardian;\n        emit SetIsGuardian(addr, _isGuardian);\n    }\n}\n"
    },
    "contracts/solidity/util/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/solidity/util/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/solidity/util/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../testing/IERC20.sol\";\nimport \"../testing/IERC20Permit.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(\n                oldAllowance >= value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(\n                token,\n                abi.encodeWithSelector(\n                    token.approve.selector,\n                    spender,\n                    newAllowance\n                )\n            );\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(\n            nonceAfter == nonceBefore + 1,\n            \"SafeERC20: permit did not succeed\"\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n"
    },
    "contracts/solidity/util/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\nimport \"../token/IERC20Upgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(\n                oldAllowance >= value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(\n                token,\n                abi.encodeWithSelector(\n                    token.approve.selector,\n                    spender,\n                    newAllowance\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data)\n        private\n    {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n"
    },
    "contracts/solidity/util/SafeMathInt.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title SafeMathInt\n * @dev Math operations with safety checks that revert on error\n * @dev SafeMath adapted for int256\n * Based on code of  https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMathInt.sol\n */\nlibrary SafeMathInt {\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Prevent overflow when multiplying INT256_MIN with -1\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\n        require(!(a == -2**255 && b == -1) && !(b == -2**255 && a == -1));\n\n        int256 c = a * b;\n        require((b == 0) || (c / b == a));\n        return c;\n    }\n\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        // Prevent overflow when dividing INT256_MIN by -1\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\n        require(!(a == -2**255 && b == -1) && (b > 0));\n\n        return a / b;\n    }\n\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\n\n        return a - b;\n    }\n\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n        return c;\n    }\n\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\n        require(a >= 0);\n        return uint256(a);\n    }\n}\n"
    },
    "contracts/solidity/util/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/solidity/util/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport {ECDSA} from \"./ECDSA.sol\";\nimport {IERC1271} from \"../interface/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC-1271 signatures from smart contract wallets like\n * Argent and Safe Wallet (previously Gnosis Safe).\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC-1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        if (signer.code.length == 0) {\n            (address recovered, ECDSA.RecoverError err, ) = ECDSA.tryRecover(\n                hash,\n                signature\n            );\n            return err == ECDSA.RecoverError.NoError && recovered == signer;\n        } else {\n            return isValidERC1271SignatureNow(signer, hash, signature);\n        }\n    }\n\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\n     * against the signer smart contract using ERC-1271.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidERC1271SignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(\n                IERC1271.isValidSignature.selector,\n                hash,\n                signature\n            )\n        );\n        return (success &&\n            result.length >= 32 &&\n            abi.decode(result, (bytes32)) ==\n            bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "contracts/solidity/util/SushiHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\ncontract SushiHelper {\n\n  /**\n   * @notice Calculates the CREATE2 address for a sushi pair without making any\n   * external calls.\n   * \n   * @return pair Address of our token pair\n   */\n\n  function pairFor(address sushiRouterFactory, address tokenA, address tokenB) external view returns (address pair) {\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\n    pair = address(uint160(uint256(keccak256(abi.encodePacked(\n      hex'ff',\n      sushiRouterFactory,\n      keccak256(abi.encodePacked(token0, token1)),\n      hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\n    )))));\n  }\n\n\n  /**\n   * @notice Returns sorted token addresses, used to handle return values from pairs sorted in\n   * this order.\n   */\n\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n      require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n      (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n      require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n  }\n\n}\n"
    },
    "contracts/solidity/zaps/NFTXVaultCreationZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interface/INFTXInventoryStaking.sol\";\nimport \"../interface/INFTXLPStaking.sol\";\nimport \"../interface/IUniswapV2Router01.sol\";\nimport \"../interface/INFTXVault.sol\";\nimport \"../interface/INFTXVaultFactory.sol\";\nimport \"../testing/IERC1155.sol\";\nimport \"../testing/ERC1155Holder.sol\";\nimport \"../util/Ownable.sol\";\nimport \"../util/ReentrancyGuard.sol\";\nimport \"../util/SafeERC20.sol\";\nimport \"../util/SushiHelper.sol\";\n\n\n/**\n * @notice A partial WETH interface.\n */\n\ninterface IWETH {\n  function deposit() external payable;\n  function transfer(address to, uint value) external returns (bool);\n  function withdraw(uint) external;\n  function balanceOf(address to) external view returns (uint256);\n  function approve(address guy, uint wad) external returns (bool);\n}\n\n\n/**\n * @notice An amalgomation of vault creation steps, merged and optimised in\n * a single contract call in an attempt reduce gas costs to the end-user.\n * \n * @author Twade\n */\n\ncontract NFTXVaultCreationZap is Ownable, ReentrancyGuard, ERC1155Holder {\n\n  using SafeERC20 for IERC20;\n\n  /// @notice Allows zap to be paused\n  bool public paused = false;\n\n  /// @notice An interface for the NFTX Vault Factory contract\n  INFTXVaultFactory public immutable vaultFactory;\n\n  /// @notice Holds the mapping of our sushi router\n  IUniswapV2Router01 public immutable sushiRouter;\n  SushiHelper internal immutable sushiHelper;\n\n  /// @notice An interface for the WETH contract\n  IWETH public immutable WETH;\n\n  /// @notice An interface for the NFTX Vault Factory contract\n  INFTXInventoryStaking public immutable inventoryStaking;\n  INFTXLPStaking public immutable lpStaking;\n\n  // Set a constant address for specific contracts that need special logic\n  address constant CRYPTO_PUNKS = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n\n  /// @notice Basic information pertaining to the vault\n  struct vaultInfo {\n    address assetAddress;      // 20/32\n    bool is1155;               // 21/32\n    bool allowAllItems;        // 22/32\n    string name;               // ??/32\n    string symbol;             // ??/32\n  }\n\n  /// @notice Fee information in 9-decimal format\n  struct vaultFeesConfig {\n    uint32 mintFee;\n    uint32 randomRedeemFee;\n    uint32 targetRedeemFee;\n    uint32 randomSwapFee;\n    uint32 targetSwapFee;\n  }\n\n  /// @notice Reference to the vault's eligibility implementation\n  struct vaultEligibilityStorage {\n    int moduleIndex;\n    bytes initData;\n  }\n\n  /// @notice Valid tokens to be transferred to the vault on creation\n  struct vaultTokens {\n    uint[] assetTokenIds;\n    uint[] assetTokenAmounts;\n\n    // Sushiswap integration for liquidity\n    uint minTokenIn;\n    uint minWethIn;\n    uint wethIn;\n  }\n\n\n  /**\n   * @notice Initialises our zap by setting contract addresses onto their\n   * respective interfaces.\n   */\n\n  constructor(\n    address _vaultFactory,\n    address _inventoryStaking,\n    address _lpStaking,\n    address _sushiRouter,\n    address _sushiHelper,\n    address _weth\n  ) Ownable() ReentrancyGuard() {\n    // Set our staking contracts\n    inventoryStaking = INFTXInventoryStaking(_inventoryStaking);\n    lpStaking = INFTXLPStaking(_lpStaking);\n\n    // Set our NFTX factory contract\n    vaultFactory = INFTXVaultFactory(_vaultFactory);\n\n    // Set our Sushi Router used for liquidity\n    sushiRouter = IUniswapV2Router01(_sushiRouter);\n    sushiHelper = SushiHelper(_sushiHelper);\n\n    // Set our chain's WETH contract\n    WETH = IWETH(_weth);\n    // setting infinite approval here to save on subsequent gas costs\n    IWETH(_weth).approve(_sushiRouter, type(uint256).max);\n  }\n\n\n  /**\n   * @notice Creates an NFTX vault, handling any desired settings and tokens.\n   * \n   * @dev Tokens are deposited into the vault prior to fees being sent.\n   * \n   * @param vaultData Basic information about the vault stored in `vaultInfo` struct\n   * @param vaultFeatures A numeric representation of boolean values for features on the vault\n   * @param vaultFees Fee definitions stored in a `vaultFeesConfig` struct\n   * @param eligibilityStorage Eligibility implementation, stored in a `vaultEligibilityStorage` struct\n   * @param assetTokens Tokens to be transferred to the vault in exchange for vault tokens\n   * \n   * @return vaultId_ The numeric ID of the NFTX vault\n   */\n\n  function createVault(\n    vaultInfo calldata vaultData,\n    uint vaultFeatures,\n    vaultFeesConfig calldata vaultFees,\n    vaultEligibilityStorage calldata eligibilityStorage,\n    vaultTokens calldata assetTokens\n  ) external nonReentrant payable returns (uint vaultId_) {\n    // Ensure our zap is not paused\n    require(!paused, 'Zap is paused');\n\n    // Get the amount of starting ETH in the contract\n    uint startingWeth = WETH.balanceOf(address(this));\n\n    // Create our vault skeleton\n    vaultId_ = vaultFactory.createVault(\n      vaultData.name,\n      vaultData.symbol,\n      vaultData.assetAddress,\n      vaultData.is1155,\n      vaultData.allowAllItems\n    );\n\n    // Deploy our vault's xToken\n    inventoryStaking.deployXTokenForVault(vaultId_);\n\n    // Build our vault interface\n    INFTXVault vault = INFTXVault(vaultFactory.vault(vaultId_));\n\n    // If we have a specified eligibility storage, add that on\n    if (eligibilityStorage.moduleIndex >= 0) {\n      vault.deployEligibilityStorage(\n        uint256(eligibilityStorage.moduleIndex),\n        eligibilityStorage.initData\n      );\n    }\n\n    // Mint and stake liquidity into the vault\n    uint length = assetTokens.assetTokenIds.length;\n\n    // If we don't have any tokens to send, we can skip our transfers\n    if (length > 0) {\n      // Determine the token type to alternate our transfer logic\n      if (!vaultData.is1155) {\n        // Iterate over our 721 tokens to transfer them all to our vault\n        for (uint i; i < length;) {\n          _transferFromERC721(vaultData.assetAddress, assetTokens.assetTokenIds[i], address(vault));\n\n          if(vaultData.assetAddress == CRYPTO_PUNKS) {\n            bytes memory data = abi.encodeWithSignature(\n                \"offerPunkForSaleToAddress(uint256,uint256,address)\",\n                assetTokens.assetTokenIds[i],\n                0,\n                address(vault)\n            );\n            (bool success, bytes memory resultData) = vaultData.assetAddress.call(data);\n            require(success, string(resultData));\n          }\n\n          unchecked { ++i; }\n        }\n      } else {\n        // Transfer all of our 1155 tokens to our zap, as the `mintTo` call on our\n        // vault requires the call sender to hold the ERC1155 token.\n        IERC1155(vaultData.assetAddress).safeBatchTransferFrom(\n          msg.sender,\n          address(this),\n          assetTokens.assetTokenIds,\n          assetTokens.assetTokenAmounts,\n          \"\"\n        );\n\n        // Approve our vault to play with our 1155 tokens\n        IERC1155(vaultData.assetAddress).setApprovalForAll(address(vault), true);\n      }\n\n      // We can now mint our asset tokens, giving the vault our tokens and storing them\n      // inside our zap, as we will shortly be staking them. Our zap is excluded from fees,\n      // so there should be no loss in the amount returned.\n      vault.mintTo(assetTokens.assetTokenIds, assetTokens.assetTokenAmounts, address(this));\n\n      // We now have tokens against our provided NFTs that we can now stake through either\n      // inventory or liquidity.\n\n      // Get our vaults base staking token. This is used to calculate the xToken\n      address baseToken = address(vault);\n\n      // We first want to set up our liquidity, as the returned values will be variable\n      if (assetTokens.minTokenIn > 0) {\n        require(msg.value >= assetTokens.wethIn, 'Insufficient msg.value sent for liquidity');\n\n        // Wrap ETH into WETH for our contract from the sender\n        WETH.deposit{value: msg.value}();\n\n        // Convert WETH to vault token\n        require(IERC20(baseToken).balanceOf(address(this)) >= assetTokens.minTokenIn, 'Insufficient tokens acquired for liquidity');\n\n        // Provide liquidity to sushiswap, using the vault tokens and pairing it with the\n        // liquidity amount specified in the call.\n        IERC20(baseToken).safeApprove(address(sushiRouter), assetTokens.minTokenIn);\n        (,, uint256 liquidity) = sushiRouter.addLiquidity(\n          baseToken,\n          address(WETH),\n          assetTokens.minTokenIn,\n          assetTokens.wethIn,\n          assetTokens.minTokenIn,\n          assetTokens.minWethIn,\n          address(this),\n          block.timestamp\n        );\n        IERC20(baseToken).safeApprove(address(sushiRouter), 0);\n\n        // Stake in LP rewards contract \n        address lpToken = sushiHelper.pairFor(sushiRouter.factory(), baseToken, address(WETH));\n        IERC20(lpToken).safeApprove(address(lpStaking), liquidity);\n        lpStaking.timelockDepositFor(vaultId_, msg.sender, liquidity, 48 hours);\n      }\n\n      // Return any token dust to the caller\n      uint256 remainingTokens = IERC20(baseToken).balanceOf(address(this));\n\n      // Any tokens that we have remaining after our liquidity staking are thrown into\n      // inventory to ensure what we don't have any token dust remaining.\n      if (remainingTokens > 0) {\n        // Make a direct timelock mint using the default timelock duration. This sends directly\n        // to our user, rather than via the zap, to avoid the timelock locking the tx.\n        IERC20(baseToken).transfer(inventoryStaking.vaultXToken(vaultId_), remainingTokens);\n        inventoryStaking.timelockMintFor(vaultId_, remainingTokens, msg.sender, 2);\n      }\n    }\n\n    // If we have specified vault features that aren't the default (all enabled)\n    // then update them\n    if (vaultFeatures < 31) {\n      vault.setVaultFeatures(\n        _getBoolean(vaultFeatures, 4),\n        _getBoolean(vaultFeatures, 3),\n        _getBoolean(vaultFeatures, 2),\n        _getBoolean(vaultFeatures, 1),\n        _getBoolean(vaultFeatures, 0)\n      );\n    }\n\n    // Set our vault fees, converting our 9-decimal to 18-decimal\n    vault.setFees(\n      uint256(vaultFees.mintFee) * 10e9,\n      uint256(vaultFees.randomRedeemFee) * 10e9,\n      uint256(vaultFees.targetRedeemFee) * 10e9,\n      uint256(vaultFees.randomSwapFee) * 10e9,\n      uint256(vaultFees.targetSwapFee) * 10e9\n    );\n\n    // Finalise our vault, preventing further edits\n    vault.finalizeVault();\n\n    // Now that all transactions are finished we can return any ETH dust left over\n    // from our liquidity staking.\n    uint remainingWEth = WETH.balanceOf(address(this)) - startingWeth;\n    if (remainingWEth > 0) {\n      WETH.withdraw(remainingWEth);\n      bool sent = payable(msg.sender).send(remainingWEth);\n      require(sent, \"Failed to send Ether\");\n    }\n  }\n\n\n  /**\n   * @notice Transfers our ERC721 tokens to a specified recipient.\n   * \n   * @param assetAddr Address of the asset being transferred\n   * @param tokenId The ID of the token being transferred\n   * @param to The address the token is being transferred to\n   */\n\n  function _transferFromERC721(address assetAddr, uint256 tokenId, address to) internal virtual {\n    bytes memory data;\n\n    if (assetAddr == CRYPTO_PUNKS) {\n      // Fix here for frontrun attack.\n      bytes memory punkIndexToAddress = abi.encodeWithSignature(\"punkIndexToAddress(uint256)\", tokenId);\n      (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\n      (address nftOwner) = abi.decode(result, (address));\n      require(checkSuccess && nftOwner == msg.sender, \"Not the NFT owner\");\n      data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\n    } else {\n      // We push to the vault to avoid an unneeded transfer.\n      data = abi.encodeWithSignature(\"safeTransferFrom(address,address,uint256)\", msg.sender, to, tokenId);\n    }\n\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\n    require(success, string(resultData));\n  }\n\n\n  /**\n   * @notice Reads a boolean at a set character index of a uint.\n   * \n   * @dev 0 and 1 define false and true respectively.\n   * \n   * @param _packedBools A numeric representation of a series of boolean values\n   * @param _boolNumber The character index of the boolean we are looking up\n   *\n   * @return bool The representation of the boolean value\n   */\n\n  function _getBoolean(uint256 _packedBools, uint256 _boolNumber) internal pure returns(bool) {\n    uint256 flag = (_packedBools >> _boolNumber) & uint256(1);\n    return (flag == 1 ? true : false);\n  }\n\n\n  /**\n   * @notice Allows our zap to be paused to prevent any processing.\n   * \n   * @param _paused New pause state\n   */\n\n  function pause(bool _paused) external onlyOwner {\n    paused = _paused;\n  }\n\n  receive() external payable {\n    require(msg.sender == address(WETH), \"Only WETH\");\n  }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}