{
  "address": "0xA64c2F3f965f055E51482bF0960Ebb5f2904BF68",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "moduleIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "eligibilityAddr",
          "type": "address"
        }
      ],
      "name": "EligibilityDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "EnableMintUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "EnableRandomRedeemUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "EnableRandomSwapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "EnableTargetRedeemUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "EnableTargetSwapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "specificIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "specificIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "redeemedIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "is1155",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowAllItems",
          "type": "bool"
        }
      ],
      "name": "VaultInit",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_assetAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_is1155",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_allowAllItems",
          "type": "bool"
        }
      ],
      "name": "__NFTXVault_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allHoldings",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "allValidNFTs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowAllItems",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moduleIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        }
      ],
      "name": "deployEligibilityStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableVaultFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibilityStorage",
      "outputs": [
        {
          "internalType": "contract INFTXEligibility",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableRandomRedeem",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableRandomSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableTargetRedeem",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableTargetSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "flashFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC3156FlashBorrowerUpgradeable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "is1155",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "maxFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "holdingsIndex",
          "type": "uint256"
        }
      ],
      "name": "nftIdAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomRedeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "specificIds",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "specificIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "redeemTo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_randomRedeemFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetRedeemFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_randomSwapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetSwapFee",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enableMint",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_enableRandomRedeem",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_enableTargetRedeem",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_enableRandomSwap",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_enableTargetSwap",
          "type": "bool"
        }
      ],
      "name": "setVaultFeatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "name": "setVaultMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "specificIds",
          "type": "uint256[]"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "specificIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swapTo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetRedeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalHoldings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultFactory",
      "outputs": [
        {
          "internalType": "contract INFTXVaultFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x2de6c79adbdb87dcccb6b76131e5aeaf2bd641775f7732b1c9916e0f53a38615",
  "receipt": {
    "to": null,
    "from": "0xDEA9196Dcdd2173D6E369c2AcC0faCc83fD9346a",
    "contractAddress": "0xA64c2F3f965f055E51482bF0960Ebb5f2904BF68",
    "transactionIndex": 28,
    "gasUsed": "4304818",
    "logsBloom": "0x
    "blockHash": "0xbfba7f450f6a8dbbe80931fbf530bcfdf58015155930e9bd54550c7665b453a7",
    "transactionHash": "0x2de6c79adbdb87dcccb6b76131e5aeaf2bd641775f7732b1c9916e0f53a38615",
    "logs": [],
    "blockNumber": 3334386,
    "cumulativeGasUsed": "7914633",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2d454ec0cd5e2ba69d4608440183e71e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moduleIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"eligibilityAddr\",\"type\":\"address\"}],\"name\":\"EligibilityDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"EnableMintUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"EnableRandomRedeemUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"EnableRandomSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"EnableTargetRedeemUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"EnableTargetSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"redeemedIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"is1155\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowAllItems\",\"type\":\"bool\"}],\"name\":\"VaultInit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_is1155\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_allowAllItems\",\"type\":\"bool\"}],\"name\":\"__NFTXVault_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allHoldings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"allValidNFTs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowAllItems\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"deployEligibilityStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableVaultFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibilityStorage\",\"outputs\":[{\"internalType\":\"contract INFTXEligibility\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRandomRedeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRandomSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTargetRedeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTargetSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrowerUpgradeable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is1155\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"holdingsIndex\",\"type\":\"uint256\"}],\"name\":\"nftIdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomRedeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"redeemTo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_randomRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_randomSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetSwapFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_enableRandomRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_enableTargetRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_enableRandomSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_enableTargetSwap\",\"type\":\"bool\"}],\"name\":\"setVaultFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"setVaultMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapTo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetRedeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFactory\",\"outputs\":[{\"internalType\":\"contract INFTXVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"flashFee(address,uint256)\":{\"details\":\"Returns the fee applied when doing flash loans. By default this implementation has 0 fees. This function can be overloaded to make the flash loan mechanism deflationary.\",\"params\":{\"amount\":\"The amount of tokens to be loaned.\",\"token\":\"The token to be flash loaned.\"},\"returns\":{\"_0\":\"The fees applied to the corresponding flash loan.\"}},\"flashLoan(address,address,uint256,bytes)\":{\"details\":\"Performs a flash loan. New tokens are minted and sent to the `receiver`, who is required to implement the {IERC3156FlashBorrower} interface. By the end of the flash loan, the receiver is expected to own amount + fee tokens and have them approved back to the token contract itself so they can be burned.\",\"params\":{\"amount\":\"The amount of tokens to be loaned.\",\"data\":\"An arbitrary datafield that is passed to the receiver.\",\"receiver\":\"The receiver of the flash loan. Should implement the {IERC3156FlashBorrower.onFlashLoan} interface.\",\"token\":\"The token to be flash loaned. Only `address(this)` is supported.\"},\"returns\":{\"_0\":\"`true` is the flash loan was successfull.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"maxFlashLoan(address)\":{\"details\":\"Returns the maximum amount of tokens available for loan.\",\"params\":{\"token\":\"The address of the token that is requested.\"},\"returns\":{\"_0\":\"The amont of token that can be loaned.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/solidity/NFTXVaultUpgradeable.sol\":\"NFTXVaultUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/solidity/NFTXVaultUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./util/OwnableUpgradeable.sol\\\";\\nimport \\\"./util/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./util/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"./token/ERC20FlashMintUpgradeable.sol\\\";\\nimport \\\"./token/ERC721SafeHolderUpgradeable.sol\\\";\\nimport \\\"./token/ERC1155SafeHolderUpgradeable.sol\\\";\\nimport \\\"./token/IERC1155Upgradeable.sol\\\";\\nimport \\\"./token/IERC721Upgradeable.sol\\\";\\nimport \\\"./interface/INFTXVault.sol\\\";\\nimport \\\"./interface/INFTXEligibilityManager.sol\\\";\\nimport \\\"./interface/INFTXFeeDistributor.sol\\\";\\n\\n// Authors: @0xKiwi_ and @alexgausman.\\n\\ncontract NFTXVaultUpgradeable is\\n    OwnableUpgradeable,\\n    ERC20FlashMintUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ERC721SafeHolderUpgradeable,\\n    ERC1155SafeHolderUpgradeable,\\n    INFTXVault\\n{\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    uint256 constant base = 10**18;\\n\\n    uint256 public override vaultId;\\n    address public override manager;\\n    address public override assetAddress;\\n    INFTXVaultFactory public override vaultFactory;\\n    INFTXEligibility public override eligibilityStorage;\\n\\n    uint256 randNonce;\\n    uint256 private UNUSED_FEE1;\\n    uint256 private UNUSED_FEE2;\\n    uint256 private UNUSED_FEE3;\\n\\n    bool public override is1155;\\n    bool public override allowAllItems;\\n    bool public override enableMint;\\n    bool public override enableRandomRedeem;\\n    bool public override enableTargetRedeem;\\n\\n    EnumerableSetUpgradeable.UintSet holdings;\\n    mapping(uint256 => uint256) quantity1155;\\n\\n    bool public override enableRandomSwap;\\n    bool public override enableTargetSwap;\\n\\n    function __NFTXVault_init(\\n        string memory _name,\\n        string memory _symbol,\\n        address _assetAddress,\\n        bool _is1155,\\n        bool _allowAllItems\\n    ) public virtual override initializer {\\n        __Ownable_init();\\n        __ERC20_init(_name, _symbol);\\n        require(_assetAddress != address(0), \\\"Asset != address(0)\\\");\\n        assetAddress = _assetAddress;\\n        vaultFactory = INFTXVaultFactory(msg.sender);\\n        vaultId = vaultFactory.numVaults();\\n        is1155 = _is1155;\\n        allowAllItems = _allowAllItems;\\n        emit VaultInit(vaultId, _assetAddress, _is1155, _allowAllItems);\\n        setVaultFeatures(\\n            true, /*enableMint*/\\n            true, /*enableRandomRedeem*/\\n            true, /*enableTargetRedeem*/\\n            true, /*enableRandomSwap*/\\n            true /*enableTargetSwap*/\\n        );\\n    }\\n\\n    function finalizeVault() external virtual override {\\n        setManager(address(0));\\n    }\\n\\n    // Added in v1.0.3.\\n    function setVaultMetadata(string calldata name_, string calldata symbol_)\\n        external\\n        virtual\\n        override\\n    {\\n        onlyPrivileged();\\n        _setMetadata(name_, symbol_);\\n    }\\n\\n    function setVaultFeatures(\\n        bool _enableMint,\\n        bool _enableRandomRedeem,\\n        bool _enableTargetRedeem,\\n        bool _enableRandomSwap,\\n        bool _enableTargetSwap\\n    ) public virtual override {\\n        onlyPrivileged();\\n        enableMint = _enableMint;\\n        enableRandomRedeem = _enableRandomRedeem;\\n        enableTargetRedeem = _enableTargetRedeem;\\n        enableRandomSwap = _enableRandomSwap;\\n        enableTargetSwap = _enableTargetSwap;\\n\\n        emit EnableMintUpdated(_enableMint);\\n        emit EnableRandomRedeemUpdated(_enableRandomRedeem);\\n        emit EnableTargetRedeemUpdated(_enableTargetRedeem);\\n        emit EnableRandomSwapUpdated(_enableRandomSwap);\\n        emit EnableTargetSwapUpdated(_enableTargetSwap);\\n    }\\n\\n    function setFees(\\n        uint256 _mintFee,\\n        uint256 _randomRedeemFee,\\n        uint256 _targetRedeemFee,\\n        uint256 _randomSwapFee,\\n        uint256 _targetSwapFee\\n    ) public virtual override {\\n        onlyPrivileged();\\n        vaultFactory.setVaultFees(\\n            vaultId,\\n            _mintFee,\\n            _randomRedeemFee,\\n            _targetRedeemFee,\\n            _randomSwapFee,\\n            _targetSwapFee\\n        );\\n    }\\n\\n    function disableVaultFees() public virtual override {\\n        onlyPrivileged();\\n        vaultFactory.disableVaultFees(vaultId);\\n    }\\n\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\n    // a similar interface.\\n    function deployEligibilityStorage(\\n        uint256 moduleIndex,\\n        bytes calldata initData\\n    ) external virtual override returns (address) {\\n        onlyPrivileged();\\n        require(\\n            address(eligibilityStorage) == address(0),\\n            \\\"NFTXVault: eligibility already set\\\"\\n        );\\n        INFTXEligibilityManager eligManager = INFTXEligibilityManager(\\n            vaultFactory.eligibilityManager()\\n        );\\n        address _eligibility = eligManager.deployEligibility(\\n            moduleIndex,\\n            initData\\n        );\\n        eligibilityStorage = INFTXEligibility(_eligibility);\\n        // Toggle this to let the contract know to check eligibility now.\\n        allowAllItems = false;\\n        emit EligibilityDeployed(moduleIndex, _eligibility);\\n        return _eligibility;\\n    }\\n\\n    // // This function allows for the manager to set their own arbitrary eligibility contract.\\n    // // Once eligiblity is set, it cannot be unset or changed.\\n    // Disabled for launch.\\n    // function setEligibilityStorage(address _newEligibility) public virtual {\\n    //     onlyPrivileged();\\n    //     require(\\n    //         address(eligibilityStorage) == address(0),\\n    //         \\\"NFTXVault: eligibility already set\\\"\\n    //     );\\n    //     eligibilityStorage = INFTXEligibility(_newEligibility);\\n    //     // Toggle this to let the contract know to check eligibility now.\\n    //     allowAllItems = false;\\n    //     emit CustomEligibilityDeployed(address(_newEligibility));\\n    // }\\n\\n    // The manager has control over options like fees and features\\n    function setManager(address _manager) public virtual override {\\n        onlyPrivileged();\\n        manager = _manager;\\n        emit ManagerSet(_manager);\\n    }\\n\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\n    ) external virtual override returns (uint256) {\\n        return mintTo(tokenIds, amounts, msg.sender);\\n    }\\n\\n    function mintTo(\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts, /* ignored for ERC721 vaults */\\n        address to\\n    ) public virtual override nonReentrant returns (uint256) {\\n        onlyOwnerIfPaused(1);\\n        require(enableMint, \\\"Minting not enabled\\\");\\n        // Take the NFTs.\\n        uint256 count = receiveNFTs(tokenIds, amounts);\\n\\n        // Mint to the user.\\n        _mint(to, base * count);\\n        uint256 totalFee = mintFee() * count;\\n        _chargeAndDistributeFees(to, totalFee);\\n\\n        emit Minted(tokenIds, amounts, to);\\n        return count;\\n    }\\n\\n    function redeem(uint256 amount, uint256[] calldata specificIds)\\n        external\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return redeemTo(amount, specificIds, msg.sender);\\n    }\\n\\n    function redeemTo(\\n        uint256 amount,\\n        uint256[] memory specificIds,\\n        address to\\n    ) public virtual override nonReentrant returns (uint256[] memory) {\\n        onlyOwnerIfPaused(2);\\n        require(\\n            amount == specificIds.length || enableRandomRedeem,\\n            \\\"NFTXVault: Random redeem not enabled\\\"\\n        );\\n        require(\\n            specificIds.length == 0 || enableTargetRedeem,\\n            \\\"NFTXVault: Target redeem not enabled\\\"\\n        );\\n\\n        // We burn all from sender and mint to fee receiver to reduce costs.\\n        _burn(msg.sender, base * amount);\\n\\n        // Pay the tokens + toll.\\n        (\\n            ,\\n            uint256 _randomRedeemFee,\\n            uint256 _targetRedeemFee,\\n            ,\\n\\n        ) = vaultFees();\\n        uint256 totalFee = (_targetRedeemFee * specificIds.length) +\\n            (_randomRedeemFee * (amount - specificIds.length));\\n        _chargeAndDistributeFees(msg.sender, totalFee);\\n\\n        // Withdraw from vault.\\n        uint256[] memory redeemedIds = withdrawNFTsTo(amount, specificIds, to);\\n        emit Redeemed(redeemedIds, specificIds, to);\\n        return redeemedIds;\\n    }\\n\\n    function swap(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds\\n    ) external virtual override returns (uint256[] memory) {\\n        return swapTo(tokenIds, amounts, specificIds, msg.sender);\\n    }\\n\\n    function swapTo(\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts, /* ignored for ERC721 vaults */\\n        uint256[] memory specificIds,\\n        address to\\n    ) public virtual override nonReentrant returns (uint256[] memory) {\\n        onlyOwnerIfPaused(3);\\n        uint256 count;\\n        if (is1155) {\\n            for (uint256 i; i < tokenIds.length; ++i) {\\n                uint256 amount = amounts[i];\\n                require(amount != 0, \\\"NFTXVault: transferring < 1\\\");\\n                count += amount;\\n            }\\n        } else {\\n            count = tokenIds.length;\\n        }\\n\\n        require(\\n            count == specificIds.length || enableRandomSwap,\\n            \\\"NFTXVault: Random swap disabled\\\"\\n        );\\n        require(\\n            specificIds.length == 0 || enableTargetSwap,\\n            \\\"NFTXVault: Target swap disabled\\\"\\n        );\\n\\n        (, , , uint256 _randomSwapFee, uint256 _targetSwapFee) = vaultFees();\\n        uint256 totalFee = (_targetSwapFee * specificIds.length) +\\n            (_randomSwapFee * (count - specificIds.length));\\n        _chargeAndDistributeFees(msg.sender, totalFee);\\n\\n        // Give the NFTs first, so the user wont get the same thing back, just to be nice.\\n        uint256[] memory ids = withdrawNFTsTo(count, specificIds, to);\\n\\n        receiveNFTs(tokenIds, amounts);\\n\\n        emit Swapped(tokenIds, amounts, specificIds, ids, to);\\n        return ids;\\n    }\\n\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address token,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override returns (bool) {\\n        onlyOwnerIfPaused(4);\\n        return super.flashLoan(receiver, token, amount, data);\\n    }\\n\\n    function mintFee() public view virtual override returns (uint256) {\\n        (uint256 _mintFee, , , , ) = vaultFactory.vaultFees(vaultId);\\n        return _mintFee;\\n    }\\n\\n    function randomRedeemFee() public view virtual override returns (uint256) {\\n        (, uint256 _randomRedeemFee, , , ) = vaultFactory.vaultFees(vaultId);\\n        return _randomRedeemFee;\\n    }\\n\\n    function targetRedeemFee() public view virtual override returns (uint256) {\\n        (, , uint256 _targetRedeemFee, , ) = vaultFactory.vaultFees(vaultId);\\n        return _targetRedeemFee;\\n    }\\n\\n    function randomSwapFee() public view virtual override returns (uint256) {\\n        (, , , uint256 _randomSwapFee, ) = vaultFactory.vaultFees(vaultId);\\n        return _randomSwapFee;\\n    }\\n\\n    function targetSwapFee() public view virtual override returns (uint256) {\\n        (, , , , uint256 _targetSwapFee) = vaultFactory.vaultFees(vaultId);\\n        return _targetSwapFee;\\n    }\\n\\n    function vaultFees()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return vaultFactory.vaultFees(vaultId);\\n    }\\n\\n    function allValidNFTs(uint256[] memory tokenIds)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        if (allowAllItems) {\\n            return true;\\n        }\\n\\n        INFTXEligibility _eligibilityStorage = eligibilityStorage;\\n        if (address(_eligibilityStorage) == address(0)) {\\n            return false;\\n        }\\n        return _eligibilityStorage.checkAllEligible(tokenIds);\\n    }\\n\\n    function nftIdAt(uint256 holdingsIndex)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return holdings.at(holdingsIndex);\\n    }\\n\\n    // Added in v1.0.3.\\n    function allHoldings()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256 len = holdings.length();\\n        uint256[] memory idArray = new uint256[](len);\\n        for (uint256 i; i < len; ++i) {\\n            idArray[i] = holdings.at(i);\\n        }\\n        return idArray;\\n    }\\n\\n    // Added in v1.0.3.\\n    function totalHoldings() external view virtual override returns (uint256) {\\n        return holdings.length();\\n    }\\n\\n    // Added in v1.0.3.\\n    function version() external pure returns (string memory) {\\n        return \\\"v1.0.5\\\";\\n    }\\n\\n    // We set a hook to the eligibility module (if it exists) after redeems in case anything needs to be modified.\\n    function afterRedeemHook(uint256[] memory tokenIds) internal virtual {\\n        INFTXEligibility _eligibilityStorage = eligibilityStorage;\\n        if (address(_eligibilityStorage) == address(0)) {\\n            return;\\n        }\\n        _eligibilityStorage.afterRedeemHook(tokenIds);\\n    }\\n\\n    function receiveNFTs(uint256[] memory tokenIds, uint256[] memory amounts)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        require(allValidNFTs(tokenIds), \\\"NFTXVault: not eligible\\\");\\n        uint256 length = tokenIds.length;\\n        if (is1155) {\\n            // This is technically a check, so placing it before the effect.\\n            IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(\\n                msg.sender,\\n                address(this),\\n                tokenIds,\\n                amounts,\\n                \\\"\\\"\\n            );\\n\\n            uint256 count;\\n            for (uint256 i; i < length; ++i) {\\n                uint256 tokenId = tokenIds[i];\\n                uint256 amount = amounts[i];\\n                require(amount != 0, \\\"NFTXVault: transferring < 1\\\");\\n                if (quantity1155[tokenId] == 0) {\\n                    holdings.add(tokenId);\\n                }\\n                quantity1155[tokenId] += amount;\\n                count += amount;\\n            }\\n            return count;\\n        } else {\\n            address _assetAddress = assetAddress;\\n            for (uint256 i; i < length; ++i) {\\n                uint256 tokenId = tokenIds[i];\\n                // We may already own the NFT here so we check in order:\\n                // Does the vault own it?\\n                //   - If so, check if its in holdings list\\n                //      - If so, we reject. This means the NFT has already been claimed for.\\n                //      - If not, it means we have not yet accounted for this NFT, so we continue.\\n                //   -If not, we \\\"pull\\\" it from the msg.sender and add to holdings.\\n                transferFromERC721(_assetAddress, tokenId);\\n                holdings.add(tokenId);\\n            }\\n            return length;\\n        }\\n    }\\n\\n    function withdrawNFTsTo(\\n        uint256 amount,\\n        uint256[] memory specificIds,\\n        address to\\n    ) internal virtual returns (uint256[] memory) {\\n        bool _is1155 = is1155;\\n        address _assetAddress = assetAddress;\\n        uint256[] memory redeemedIds = new uint256[](amount);\\n        uint256 specificLength = specificIds.length;\\n        for (uint256 i; i < amount; ++i) {\\n            // This will always be fine considering the validations made above.\\n            uint256 tokenId = i < specificLength\\n                ? specificIds[i]\\n                : getRandomTokenIdFromVault();\\n            redeemedIds[i] = tokenId;\\n\\n            if (_is1155) {\\n                quantity1155[tokenId] -= 1;\\n                if (quantity1155[tokenId] == 0) {\\n                    holdings.remove(tokenId);\\n                }\\n\\n                IERC1155Upgradeable(_assetAddress).safeTransferFrom(\\n                    address(this),\\n                    to,\\n                    tokenId,\\n                    1,\\n                    \\\"\\\"\\n                );\\n            } else {\\n                holdings.remove(tokenId);\\n                transferERC721(_assetAddress, to, tokenId);\\n            }\\n        }\\n        afterRedeemHook(redeemedIds);\\n        return redeemedIds;\\n    }\\n\\n    function _chargeAndDistributeFees(address user, uint256 amount)\\n        internal\\n        virtual\\n    {\\n        // Do not charge fees if the zap contract is calling\\n        // Added in v1.0.3. Changed to mapping in v1.0.5.\\n\\n        INFTXVaultFactory _vaultFactory = vaultFactory;\\n\\n        if (_vaultFactory.excludedFromFees(msg.sender)) {\\n            return;\\n        }\\n\\n        // Mint fees directly to the distributor and distribute.\\n        if (amount > 0) {\\n            address feeDistributor = _vaultFactory.feeDistributor();\\n            // Changed to a _transfer() in v1.0.3.\\n            _transfer(user, feeDistributor, amount);\\n            INFTXFeeDistributor(feeDistributor).distribute(vaultId);\\n        }\\n    }\\n\\n    function transferERC721(\\n        address assetAddr,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n        bytes memory data;\\n        if (assetAddr == kitties) {\\n            // Changed in v1.0.4.\\n            data = abi.encodeWithSignature(\\n                \\\"transfer(address,uint256)\\\",\\n                to,\\n                tokenId\\n            );\\n        } else if (assetAddr == punks) {\\n            // CryptoPunks.\\n            data = abi.encodeWithSignature(\\n                \\\"transferPunk(address,uint256)\\\",\\n                to,\\n                tokenId\\n            );\\n        } else {\\n            // Default.\\n            data = abi.encodeWithSignature(\\n                \\\"safeTransferFrom(address,address,uint256)\\\",\\n                address(this),\\n                to,\\n                tokenId\\n            );\\n        }\\n        (bool success, bytes memory returnData) = address(assetAddr).call(data);\\n        require(success, string(returnData));\\n    }\\n\\n    function transferFromERC721(address assetAddr, uint256 tokenId)\\n        internal\\n        virtual\\n    {\\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n        bytes memory data;\\n        if (assetAddr == kitties) {\\n            // Cryptokitties.\\n            data = abi.encodeWithSignature(\\n                \\\"transferFrom(address,address,uint256)\\\",\\n                msg.sender,\\n                address(this),\\n                tokenId\\n            );\\n        } else if (assetAddr == punks) {\\n            // CryptoPunks.\\n            // Fix here for frontrun attack. Added in v1.0.2.\\n            bytes memory punkIndexToAddress = abi.encodeWithSignature(\\n                \\\"punkIndexToAddress(uint256)\\\",\\n                tokenId\\n            );\\n            (bool checkSuccess, bytes memory result) = address(assetAddr)\\n                .staticcall(punkIndexToAddress);\\n            address nftOwner = abi.decode(result, (address));\\n            require(\\n                checkSuccess && nftOwner == msg.sender,\\n                \\\"Not the NFT owner\\\"\\n            );\\n            data = abi.encodeWithSignature(\\\"buyPunk(uint256)\\\", tokenId);\\n        } else {\\n            // Default.\\n            // Allow other contracts to \\\"push\\\" into the vault, safely.\\n            // If we already have the token requested, make sure we don't have it in the list to prevent duplicate minting.\\n            if (\\n                IERC721Upgradeable(assetAddress).ownerOf(tokenId) ==\\n                address(this)\\n            ) {\\n                require(\\n                    !holdings.contains(tokenId),\\n                    \\\"Trying to use an owned NFT\\\"\\n                );\\n                return;\\n            } else {\\n                data = abi.encodeWithSignature(\\n                    \\\"safeTransferFrom(address,address,uint256)\\\",\\n                    msg.sender,\\n                    address(this),\\n                    tokenId\\n                );\\n            }\\n        }\\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\\n        require(success, string(resultData));\\n    }\\n\\n    function getRandomTokenIdFromVault() internal virtual returns (uint256) {\\n        uint256 randomIndex = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    blockhash(block.number - 1),\\n                    randNonce,\\n                    block.coinbase,\\n                    block.difficulty,\\n                    block.timestamp\\n                )\\n            )\\n        ) % holdings.length();\\n        ++randNonce;\\n        return holdings.at(randomIndex);\\n    }\\n\\n    function onlyPrivileged() internal view {\\n        if (manager == address(0)) {\\n            require(msg.sender == owner(), \\\"Not owner\\\");\\n        } else {\\n            require(msg.sender == manager, \\\"Not manager\\\");\\n        }\\n    }\\n\\n    function onlyOwnerIfPaused(uint256 lockId) internal view {\\n        require(\\n            !vaultFactory.isLocked(lockId) || msg.sender == owner(),\\n            \\\"Paused\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2b796ae3fcbeb50578e694669f0f7faff0d105434edf61f9eb7084c5268142e3\",\"license\":\"MIT\"},\"contracts/solidity/interface/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/solidity/interface/IERC3156Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n */\\ninterface IERC3156FlashBorrowerUpgradeable {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n */\\ninterface IERC3156FlashLenderUpgradeable {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc3dd354cf226f6ef2e87cae8e262c74dce01a1bc6d90557b9c64eb736293a19a\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXEligibility {\\n    // Read functions.\\n    function name() external pure returns (string memory);\\n\\n    function finalized() external view returns (bool);\\n\\n    function targetAsset() external pure returns (address);\\n\\n    function checkAllEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool[] memory);\\n\\n    function checkAllIneligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\\n\\n    // Write functions.\\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\\n\\n    function beforeMintHook(uint256[] calldata tokenIds) external;\\n\\n    function afterMintHook(uint256[] calldata tokenIds) external;\\n\\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\\n\\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xd932fdc4ea04b9d685f094b4405e64da8f3ab46cd701b22223f2a28d42973c70\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXEligibilityManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXEligibilityManager {\\n    function nftxVaultFactory() external returns (address);\\n\\n    function eligibilityImpl() external returns (address);\\n\\n    function deployEligibility(uint256 vaultId, bytes calldata initData)\\n        external\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x750a9fd711c960997a5027eaac03d77385b1e1cc0d608f629e807233b1731262\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXFeeDistributor {\\n    struct FeeReceiver {\\n        uint256 allocPoint;\\n        address receiver;\\n        bool isContract;\\n    }\\n\\n    function nftxVaultFactory() external returns (address);\\n\\n    function lpStaking() external returns (address);\\n\\n    function treasury() external returns (address);\\n\\n    function defaultTreasuryAlloc() external returns (uint256);\\n\\n    function defaultLPAlloc() external returns (uint256);\\n\\n    function allocTotal(uint256 vaultId) external returns (uint256);\\n\\n    function specificTreasuryAlloc(uint256 vaultId) external returns (uint256);\\n\\n    // Write functions.\\n    function __FeeDistributor__init__(address _lpStaking, address _treasury)\\n        external;\\n\\n    function rescueTokens(address token) external;\\n\\n    function distribute(uint256 vaultId) external;\\n\\n    function addReceiver(\\n        uint256 _vaultId,\\n        uint256 _allocPoint,\\n        address _receiver,\\n        bool _isContract\\n    ) external;\\n\\n    function initializeVaultReceivers(uint256 _vaultId) external;\\n\\n    function changeMultipleReceiverAlloc(\\n        uint256[] memory _vaultIds,\\n        uint256[] memory _receiverIdxs,\\n        uint256[] memory allocPoints\\n    ) external;\\n\\n    function changeMultipleReceiverAddress(\\n        uint256[] memory _vaultIds,\\n        uint256[] memory _receiverIdxs,\\n        address[] memory addresses,\\n        bool[] memory isContracts\\n    ) external;\\n\\n    function changeReceiverAlloc(\\n        uint256 _vaultId,\\n        uint256 _idx,\\n        uint256 _allocPoint\\n    ) external;\\n\\n    function changeReceiverAddress(\\n        uint256 _vaultId,\\n        uint256 _idx,\\n        address _address,\\n        bool _isContract\\n    ) external;\\n\\n    function removeReceiver(uint256 _vaultId, uint256 _receiverIdx) external;\\n\\n    // Configuration functions.\\n    function setTreasuryAddress(address _treasury) external;\\n\\n    function setDefaultTreasuryAlloc(uint256 _allocPoint) external;\\n\\n    function setSpecificTreasuryAlloc(uint256 _vaultId, uint256 _allocPoint)\\n        external;\\n\\n    function setLPStakingAddress(address _lpStaking) external;\\n\\n    function setNFTXVaultFactory(address _factory) external;\\n\\n    function setDefaultLPAlloc(uint256 _allocPoint) external;\\n}\\n\",\"keccak256\":\"0x7ef389ef9a6316b3f0c414b629de700774ebbbc76cef2427506dcfa5b523c10e\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\nimport \\\"./INFTXVaultFactory.sol\\\";\\nimport \\\"./INFTXEligibility.sol\\\";\\n\\ninterface INFTXVault is IERC20Upgradeable {\\n    function manager() external view returns (address);\\n\\n    function assetAddress() external view returns (address);\\n\\n    function vaultFactory() external view returns (INFTXVaultFactory);\\n\\n    function eligibilityStorage() external view returns (INFTXEligibility);\\n\\n    function is1155() external view returns (bool);\\n\\n    function allowAllItems() external view returns (bool);\\n\\n    function enableMint() external view returns (bool);\\n\\n    function enableRandomRedeem() external view returns (bool);\\n\\n    function enableTargetRedeem() external view returns (bool);\\n\\n    function enableRandomSwap() external view returns (bool);\\n\\n    function enableTargetSwap() external view returns (bool);\\n\\n    function vaultId() external view returns (uint256);\\n\\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\\n\\n    function allHoldings() external view returns (uint256[] memory);\\n\\n    function totalHoldings() external view returns (uint256);\\n\\n    function mintFee() external view returns (uint256);\\n\\n    function randomRedeemFee() external view returns (uint256);\\n\\n    function targetRedeemFee() external view returns (uint256);\\n\\n    function randomSwapFee() external view returns (uint256);\\n\\n    function targetSwapFee() external view returns (uint256);\\n\\n    function vaultFees()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    event VaultInit(\\n        uint256 indexed vaultId,\\n        address assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    );\\n\\n    event ManagerSet(address manager);\\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\\n    // event CustomEligibilityDeployed(address eligibilityAddr);\\n\\n    event EnableMintUpdated(bool enabled);\\n    event EnableRandomRedeemUpdated(bool enabled);\\n    event EnableTargetRedeemUpdated(bool enabled);\\n    event EnableRandomSwapUpdated(bool enabled);\\n    event EnableTargetSwapUpdated(bool enabled);\\n\\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\\n    event Swapped(\\n        uint256[] nftIds,\\n        uint256[] amounts,\\n        uint256[] specificIds,\\n        uint256[] redeemedIds,\\n        address to\\n    );\\n\\n    function __NFTXVault_init(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _assetAddress,\\n        bool _is1155,\\n        bool _allowAllItems\\n    ) external;\\n\\n    function finalizeVault() external;\\n\\n    function setVaultMetadata(string memory name_, string memory symbol_)\\n        external;\\n\\n    function setVaultFeatures(\\n        bool _enableMint,\\n        bool _enableRandomRedeem,\\n        bool _enableTargetRedeem,\\n        bool _enableRandomSwap,\\n        bool _enableTargetSwap\\n    ) external;\\n\\n    function setFees(\\n        uint256 _mintFee,\\n        uint256 _randomRedeemFee,\\n        uint256 _targetRedeemFee,\\n        uint256 _randomSwapFee,\\n        uint256 _targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees() external;\\n\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\n    // a similar interface.\\n    function deployEligibilityStorage(\\n        uint256 moduleIndex,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    // The manager has control over options like fees and features\\n    function setManager(address _manager) external;\\n\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\n    ) external returns (uint256);\\n\\n    function mintTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        address to\\n    ) external returns (uint256);\\n\\n    function redeem(uint256 amount, uint256[] calldata specificIds)\\n        external\\n        returns (uint256[] calldata);\\n\\n    function redeemTo(\\n        uint256 amount,\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function swap(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds\\n    ) external returns (uint256[] calldata);\\n\\n    function swapTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function allValidNFTs(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x2d3a6170188b0e18d6744b9ea5414e8f01946302b390b032bed94546ce3f5f41\",\"license\":\"MIT\"},\"contracts/solidity/interface/INFTXVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/IBeacon.sol\\\";\\n\\ninterface INFTXVaultFactory is IBeacon {\\n    // Read functions.\\n    function numVaults() external view returns (uint256);\\n\\n    function zapContract() external view returns (address);\\n\\n    function zapContracts(address addr) external view returns (bool);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function eligibilityManager() external view returns (address);\\n\\n    function vault(uint256 vaultId) external view returns (address);\\n\\n    function allVaults() external view returns (address[] memory);\\n\\n    function vaultsForAsset(address asset)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function isLocked(uint256 id) external view returns (bool);\\n\\n    function excludedFromFees(address addr) external view returns (bool);\\n\\n    function factoryMintFee() external view returns (uint64);\\n\\n    function factoryRandomRedeemFee() external view returns (uint64);\\n\\n    function factoryTargetRedeemFee() external view returns (uint64);\\n\\n    function factoryRandomSwapFee() external view returns (uint64);\\n\\n    function factoryTargetSwapFee() external view returns (uint64);\\n\\n    function vaultFees(uint256 vaultId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    event NewFeeDistributor(address oldDistributor, address newDistributor);\\n    event NewZapContract(address oldZap, address newZap);\\n    event UpdatedZapContract(address zap, bool excluded);\\n    event FeeExclusion(address feeExcluded, bool excluded);\\n    event NewEligibilityManager(address oldEligManager, address newEligManager);\\n    event NewVault(\\n        uint256 indexed vaultId,\\n        address vaultAddress,\\n        address assetAddress\\n    );\\n    event UpdateVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n    event DisableVaultFees(uint256 vaultId);\\n    event UpdateFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    );\\n\\n    // Write functions.\\n    function __NFTXVaultFactory_init(\\n        address _vaultImpl,\\n        address _feeDistributor\\n    ) external;\\n\\n    function createVault(\\n        string calldata name,\\n        string calldata symbol,\\n        address _assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    ) external returns (uint256);\\n\\n    function setFeeDistributor(address _feeDistributor) external;\\n\\n    function setEligibilityManager(address _eligibilityManager) external;\\n\\n    function setZapContract(address _zapContract, bool _excluded) external;\\n\\n    function setFeeExclusion(address _excludedAddr, bool excluded) external;\\n\\n    function setFactoryFees(\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function setVaultFees(\\n        uint256 vaultId,\\n        uint256 mintFee,\\n        uint256 randomRedeemFee,\\n        uint256 targetRedeemFee,\\n        uint256 randomSwapFee,\\n        uint256 targetSwapFee\\n    ) external;\\n\\n    function disableVaultFees(uint256 vaultId) external;\\n}\\n\",\"keccak256\":\"0xb6d64ca7f387cb11b1a345add3556c21d2b3c9fa9b8d8645a3312bcbb33ce9bb\",\"license\":\"MIT\"},\"contracts/solidity/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function childImplementation() external view returns (address);\\n\\n    function upgradeChildTo(address newImplementation) external;\\n}\\n\",\"keccak256\":\"0xd9b361e1d9b9a4bde9801abb5692e9fd7018cb52505d3a47dc7b5dd968bcad28\",\"license\":\"MIT\"},\"contracts/solidity/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            _initializing || !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04ad3c77a6a5006b66f1642cc3353b8009215d734eb80f069ed42a6c09460391\",\"license\":\"MIT\"},\"contracts/solidity/token/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../util/ERC165Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is\\n    ERC165Upgradeable,\\n    IERC1155ReceiverUpgradeable\\n{\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xd7f7789da0b41f951db4f53a48f704c1b22e3b248d8455a5e52ee1becf564673\",\"license\":\"MIT\"},\"contracts/solidity/token/ERC1155SafeHolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155SafeHolderUpgradeable is ERC1155ReceiverUpgradeable {\\n    function onERC1155Received(\\n        address operator,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xb6cd42b38b685dbce17ee09d14a8af6e7b69f9cf8d5a2bdbbdd36517238ede86\",\"license\":\"MIT\"},\"contracts/solidity/token/ERC20FlashMintUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\nimport \\\"../interface/IERC3156Upgradeable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC3156 Flash loans extension, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * Adds the {flashLoan} method, which provides flash loan support at the token\\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\\n */\\nabstract contract ERC20FlashMintUpgradeable is\\n    Initializable,\\n    ERC20Upgradeable,\\n    IERC3156FlashLenderUpgradeable\\n{\\n    function __ERC20FlashMint_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC20FlashMint_init_unchained();\\n    }\\n\\n    function __ERC20FlashMint_init_unchained() internal initializer {}\\n\\n    bytes32 private constant RETURN_VALUE =\\n        keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /**\\n     * @dev Returns the maximum amount of tokens available for loan.\\n     * @param token The address of the token that is requested.\\n     * @return The amont of token that can be loaned.\\n     */\\n    function maxFlashLoan(address token)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return token == address(this) ? type(uint256).max - totalSupply() : 0;\\n    }\\n\\n    /**\\n     * @dev Returns the fee applied when doing flash loans. By default this\\n     * implementation has 0 fees. This function can be overloaded to make\\n     * the flash loan mechanism deflationary.\\n     * @param token The token to be flash loaned.\\n     * @param amount The amount of tokens to be loaned.\\n     * @return The fees applied to the corresponding flash loan.\\n     */\\n    function flashFee(address token, uint256 amount)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(token == address(this), \\\"ERC20FlashMint: wrong token\\\");\\n        // silence warning about unused variable without the addition of bytecode.\\n        amount;\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Performs a flash loan. New tokens are minted and sent to the\\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\\n     * interface. By the end of the flash loan, the receiver is expected to own\\n     * amount + fee tokens and have them approved back to the token contract itself so\\n     * they can be burned.\\n     * @param receiver The receiver of the flash loan. Should implement the\\n     * {IERC3156FlashBorrower.onFlashLoan} interface.\\n     * @param token The token to be flash loaned. Only `address(this)` is\\n     * supported.\\n     * @param amount The amount of tokens to be loaned.\\n     * @param data An arbitrary datafield that is passed to the receiver.\\n     * @return `true` is the flash loan was successfull.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address token,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override returns (bool) {\\n        uint256 fee = flashFee(token, amount);\\n        _mint(address(receiver), amount);\\n        require(\\n            receiver.onFlashLoan(msg.sender, token, amount, fee, data) ==\\n                RETURN_VALUE,\\n            \\\"ERC20FlashMint: invalid return value\\\"\\n        );\\n        uint256 currentAllowance = allowance(address(receiver), address(this));\\n        require(\\n            currentAllowance >= amount + fee,\\n            \\\"ERC20FlashMint: allowance does not allow refund\\\"\\n        );\\n        _approve(\\n            address(receiver),\\n            address(this),\\n            currentAllowance - amount - fee\\n        );\\n        _burn(address(receiver), amount + fee);\\n        return true;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd3d57c0b7fa17a6f13fd29de9b7c1cdb7e2459fcaf79cd8fc04044f74f1aeac9\",\"license\":\"MIT\"},\"contracts/solidity/token/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\nimport \\\"../util/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    IERC20Upgradeable,\\n    IERC20Metadata\\n{\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_)\\n        internal\\n        initializer\\n    {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_)\\n        internal\\n        initializer\\n    {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function _setMetadata(string memory name_, string memory symbol_) internal {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xbf251e6b6effb5717664c474e2adda144585a5d45da12f7c24c3df05797de67f\",\"license\":\"MIT\"},\"contracts/solidity/token/ERC721SafeHolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721SafeHolderUpgradeable is IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xe7f89f7e043898e42c0181d643c02da1ec265006bdcfebce713743c50d778bcc\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x6d374da0f9e9acbfa496ca04a6828efe7cf00845bb4918e3bdf794701efabde8\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdef1a66125379a97fe41534944cc128c8b93287690b114df5365033d385c148e\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1e18474180ce77dc747bb185501fd4d5395cb6096274d3d8f4977d9ed11619c9\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x57ee5f4c65fa0d2e023e97cb265784084412c700117cac90cfe29bf4bab3c7fc\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"contracts/solidity/token/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x77a17ee7d78abd229ded2dd4470e9a45287cc66b73ffca0b3dc2bbba5f7c82c1\",\"license\":\"MIT\"},\"contracts/solidity/util/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {}\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8d6fce5d0897740611b909a023e797e08d324503881d9839969124076fe9eb44\",\"license\":\"MIT\"},\"contracts/solidity/util/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x556f1630ad6f0c8e666a674dc9bd279ca2eeb3d20fb2211c05ba7fdb9ed5ca53\",\"license\":\"MIT\"},\"contracts/solidity/util/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xfb89cba6a09fb76fc81f2ecbb1a666d8c90645a634ff1ebf417d4b47418c8feb\",\"license\":\"MIT\"},\"contracts/solidity/util/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x76303f728817d84e7de3b7bb8839a3b30f5e078e223c7dbbbcc45da3d4dc905c\",\"license\":\"MIT\"},\"contracts/solidity/util/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa9f12a4d5b2176c3699ea7fe4234ffa276c461c89400242cd2f85e32e92bd627\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614d22806100206000396000f3fe608060405234801561001057600080fd5b506004361061038d5760003560e01c806372188e3f116101de578063d0ebdbe71161010f578063e78458c4116100ad578063f2fde38b1161007c578063f2fde38b14610862578063f7fce33414610875578063fcc0e3811461087d578063feb8eba51461089257600080fd5b8063e78458c4146107fc578063e9ec2e991461080f578063f1d20dd414610817578063f23a6e611461082a57600080fd5b8063d8a06f73116100e9578063d8a06f731461078a578063d9d98ce41461079d578063dd62ed3e146107b0578063e0a8b97a146107e957600080fd5b8063d0ebdbe71461075c578063d53f62171461076f578063d6ee4a931461077757600080fd5b8063a457c2d71161017c578063bc197c8111610156578063bc197c81146106f6578063c3cb8c141461072e578063c4a0db9614610736578063c4ff52471461074957600080fd5b8063a457c2d7146106bd578063a9059cbb146106d0578063b10402ea146106e357600080fd5b80638da5cb5b116101b85780638da5cb5b1461067e5780638f878a431461068f57806395d89b41146106a25780639d54def6146106aa57600080fd5b806372188e3f1461062557806379309658146106555780638c8508141461066b57600080fd5b806333194c0a116102c35780635035434a11610261578063613255ab11610230578063613255ab146105ce5780636b948a35146105e157806370a08231146105f4578063715018a61461061d57600080fd5b80635035434a1461056157806354fd4d501461056f5780635877aee6146105a85780635cffe9de146105bb57600080fd5b80633d5d190c1161029d5780633d5d190c1461051457806344b28d591461052757806345a0b6521461053b578063481c6a751461054e57600080fd5b806333194c0a146104f057806335dca76c146104f9578063395093511461050157600080fd5b806313966db5116103305780631ba46cfd1161030a5780631ba46cfd1461048e57806323b872dd146104b957806325705d8d146104cc578063313ce567146104e157600080fd5b806313966db514610420578063150b7a021461043657806318160ddd1461048657600080fd5b806306f26dc21161036c57806306f26dc2146103d757806306fdde03146103e5578063095ea7b3146103fa5780630d636a091461040d57600080fd5b80625181611461039257806301ffc9a71461039c57806304a66b48146103c4575b600080fd5b61039a61089a565b005b6103af6103aa36600461470a565b610924565b60405190151581526020015b60405180910390f35b61039a6103d23660046148ed565b61098d565b610104546103af9060ff1681565b6103ed610a3a565b6040516103bb9190614b33565b6103af6104083660046143fd565b610acc565b61039a61041b366004614682565b610ae2565b610428610c56565b6040519081526020016103bb565b61046d61044436600461432c565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516001600160e01b031990911681526020016103bb565b606754610428565b60fd546104a1906001600160a01b031681565b6040516001600160a01b0390911681526020016103bb565b6103af6104c73660046142ec565b610ceb565b6104d4610db6565b6040516103bb9190614a78565b604051601281526020016103bb565b61042860fb5481565b610428610e75565b6103af61050f3660046143fd565b610f09565b610428610522366004614428565b610f40565b610104546103af9062010000900460ff1681565b610428610549366004614811565b610fba565b60fc546104a1906001600160a01b031681565b610108546103af9060ff1681565b60408051808201909152600681527f76312e302e35000000000000000000000000000000000000000000000000000060208201526103ed565b6104a16105b63660046148b0565b610fc8565b6103af6105c9366004614732565b6111dd565b6104286105dc3660046141d2565b6111f5565b610104546103af90610100900460ff1681565b6104286106023660046141d2565b6001600160a01b031660009081526065602052604090205490565b61039a61121d565b61062d6112c1565b604080519586526020860194909452928401919091526060830152608082015260a0016103bb565b610104546103af90640100000000900460ff1681565b6104d46106793660046145cf565b61135b565b6033546001600160a01b03166104a1565b60ff546104a1906001600160a01b031681565b6103ed6115f7565b6104d46106b8366004614873565b611606565b6103af6106cb3660046143fd565b61180f565b6103af6106de3660046143fd565b6118c2565b6104286106f136600461455a565b6118cf565b61046d610704366004614242565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b61039a611a1f565b6104d4610744366004614829565b611a2b565b610108546103af90610100900460ff1681565b61039a61076a3660046141d2565b611a74565b610428611ad0565b6104d4610785366004614491565b611b64565b60fe546104a1906001600160a01b031681565b6104286107ab3660046143fd565b611c11565b6104286107be36600461420a565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b61039a6107f7366004614747565b611c74565b61039a61080a3660046147a4565b611cef565b610428611f45565b6103af610825366004614527565b611f57565b61046d610838366004614396565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b61039a6108703660046141d2565b612029565b61042861215b565b610104546103af906301000000900460ff1681565b6104286121f0565b6108a2612285565b60fe5460fb546040517fc182f2b20000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163c182f2b2916108f09160040190815260200190565b600060405180830381600087803b15801561090a57600080fd5b505af115801561091e573d6000803e3d6000fd5b50505050565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061098757507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b610995612285565b60fe5460fb546040517f219962d200000000000000000000000000000000000000000000000000000000815260048101919091526024810187905260448101869052606481018590526084810184905260a481018390526001600160a01b039091169063219962d29060c401600060405180830381600087803b158015610a1b57600080fd5b505af1158015610a2f573d6000803e3d6000fd5b505050505050505050565b606060688054610a4990614c27565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7590614c27565b8015610ac25780601f10610a9757610100808354040283529160200191610ac2565b820191906000526020600020905b815481529060010190602001808311610aa557829003601f168201915b5050505050905090565b6000610ad9338484612349565b50600192915050565b610aea612285565b610104805463ffff000019166201000087151590810263ff0000001916919091176301000000871515021764ff0000000019166401000000008615150217909155610108805461ffff191684151561ff00191617610100841515021790556040519081527fc604be2f834727754dc1ec1225c14d1ecde48e7d12fa7b745dfb137a3db998bd9060200160405180910390a160405184151581527f835d9397f97f5df575f718046bb3e918f911d39d7edfa79aa8d40ddc7d5ce2a59060200160405180910390a160405183151581527f64b60f32742df47d4ccb5b31ca12fee1bc20695467bfe8fa058b00ec446c15639060200160405180910390a160405182151581527f7e8b58aeb3d1d3a1777185c996f374a5d3c46ef3cd25a07ec6eb2569488d50589060200160405180910390a160405181151581527fbfb092a6cb2d49526b6982acab35d64782cf1c05f8c8f0dd88008b288bfa5af59060200160405180910390a15050505050565b60fe5460fb54604051632206137960e01b815260009283926001600160a01b0390911691632206137991610c909160040190815260200190565b60a06040518083038186803b158015610ca857600080fd5b505afa158015610cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce09190614927565b509295945050505050565b6000610cf88484846124a2565b6001600160a01b038416600090815260666020908152604080832033845290915290205482811015610d975760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610dab8533610da68685614be4565b612349565b506001949350505050565b60606000610dc56101056126c3565b905060008167ffffffffffffffff811115610df057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e19578160200160208202803683370190505b50905060005b82811015610e6e57610e33610105826126cd565b828281518110610e5357634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610e6781614c62565b9050610e1f565b5092915050565b60fe5460fb54604051632206137960e01b815260009283926001600160a01b0390911691632206137991610eaf9160040190815260200190565b60a06040518083038186803b158015610ec757600080fd5b505afa158015610edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eff9190614927565b9695505050505050565b3360008181526066602090815260408083206001600160a01b03871684529091528120549091610ad9918590610da6908690614bad565b6000610fb1858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920191909152503392506118cf915050565b95945050505050565b6000610987610105836126cd565b6000610fd2612285565b60ff546001600160a01b0316156110515760405162461bcd60e51b815260206004820152602260248201527f4e4654585661756c743a20656c69676962696c69747920616c7265616479207360448201527f65740000000000000000000000000000000000000000000000000000000000006064820152608401610d8e565b60fe54604080517f14c77faa00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916314c77faa916004808301926020929190829003018186803b1580156110af57600080fd5b505afa1580156110c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e791906141ee565b90506000816001600160a01b031663576ff9088787876040518463ffffffff1660e01b815260040161111b93929190614b46565b602060405180830381600087803b15801561113557600080fd5b505af1158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d91906141ee565b60ff80546001600160a01b0319166001600160a01b038316908117909155610104805461ff00191690556040805189815260208101929092529192507fe14c63b3d4272158635bee1d1b95b51bb8de042ee95a15cbfaf2865b4d0af811910160405180910390a195945050505050565b60006111e960046126d9565b610fb1858585856127d3565b60006001600160a01b038216301461120e576000610987565b60675461098790600019614be4565b6033546001600160a01b031633146112775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d8e565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b60fe5460fb54604051632206137960e01b8152600481019190915260009182918291829182916001600160a01b03169063220613799060240160a06040518083038186803b15801561131257600080fd5b505afa158015611326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134a9190614927565b945094509450945094509091929394565b6060600260c95414156113b05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d8e565b600260c9556113bf60036126d9565b6101045460009060ff161561147b5760005b86518110156114755760008682815181106113fc57634e487b7160e01b600052603260045260246000fd5b6020026020010151905080600014156114575760405162461bcd60e51b815260206004820152601b60248201527f4e4654585661756c743a207472616e7366657272696e67203c203100000000006044820152606401610d8e565b6114618184614bad565b9250508061146e90614c62565b90506113d1565b5061147f565b5084515b835181148061149157506101085460ff165b6114dd5760405162461bcd60e51b815260206004820152601f60248201527f4e4654585661756c743a2052616e646f6d20737761702064697361626c6564006044820152606401610d8e565b835115806114f3575061010854610100900460ff165b61153f5760405162461bcd60e51b815260206004820152601f60248201527f4e4654585661756c743a2054617267657420737761702064697361626c6564006044820152606401610d8e565b60008061154a6112c1565b9450945050505060008651846115609190614be4565b61156a9084614bc5565b87516115769084614bc5565b6115809190614bad565b905061158c33826129f7565b6000611599858989612b9b565b90506115a58a8a612da9565b507f66982ed4a058811a8004bdcec9adcb3671f2b4f1a788667a3a74959d7c09af3c8a8a8a848b6040516115dd959493929190614aca565b60405180910390a1600160c9559998505050505050505050565b606060698054610a4990614c27565b6060600260c954141561165b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d8e565b600260c981905561166b906126d9565b82518414806116845750610104546301000000900460ff165b6116dc5760405162461bcd60e51b8152602060048201526024808201527f4e4654585661756c743a2052616e646f6d2072656465656d206e6f7420656e61604482015263189b195960e21b6064820152608401610d8e565b825115806116f5575061010454640100000000900460ff165b61174d5760405162461bcd60e51b8152602060048201526024808201527f4e4654585661756c743a205461726765742072656465656d206e6f7420656e61604482015263189b195960e21b6064820152608401610d8e565b6117683361176386670de0b6b3a7640000614bc5565b61302b565b6000806117736112c1565b5050925092505060008551876117899190614be4565b6117939084614bc5565b865161179f9084614bc5565b6117a99190614bad565b90506117b533826129f7565b60006117c2888888612b9b565b90507f63b13f6307f284441e029836b0c22eb91eb62a7ad555670061157930ce884f4e8188886040516117f793929190614a8b565b60405180910390a1600160c955979650505050505050565b3360009081526066602090815260408083206001600160a01b0386168452909152812054828110156118a95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6118b83385610da68685614be4565b5060019392505050565b6000610ad93384846124a2565b6000600260c95414156119245760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d8e565b600260c95561193360016126d9565b6101045462010000900460ff1661198c5760405162461bcd60e51b815260206004820152601360248201527f4d696e74696e67206e6f7420656e61626c6564000000000000000000000000006044820152606401610d8e565b60006119988585612da9565b90506119b5836119b083670de0b6b3a7640000614bc5565b6131b1565b6000816119c0610c56565b6119ca9190614bc5565b90506119d684826129f7565b7f1f72ad2a14447fa756b6f5aca53504645af79813493aca2d906b69e4aaeb9492868686604051611a0993929190614a8b565b60405180910390a150600160c955949350505050565b611a296000611a74565b565b6060611a6c84848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250611606915050565b949350505050565b611a7c612285565b60fc80546001600160a01b0319166001600160a01b0383169081179091556040519081527f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa699060200160405180910390a150565b60fe5460fb54604051632206137960e01b815260009283926001600160a01b0390911691632206137991611b0a9160040190815260200190565b60a06040518083038186803b158015611b2257600080fd5b505afa158015611b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5a9190614927565b5095945050505050565b6060611c0687878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a92508991829185019084908082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525033925061135b915050565b979650505050505050565b60006001600160a01b0383163014611c6b5760405162461bcd60e51b815260206004820152601b60248201527f4552433230466c6173684d696e743a2077726f6e6720746f6b656e00000000006044820152606401610d8e565b50600092915050565b611c7c612285565b61091e84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8801819004810282018101909252868152925086915085908190840183828082843760009201919091525061329092505050565b600054610100900460ff1680611d08575060005460ff16155b611d6b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d8e565b600054610100900460ff16158015611d8d576000805461ffff19166101011790555b611d956132b7565b611d9f8686613379565b6001600160a01b038416611df55760405162461bcd60e51b815260206004820152601360248201527f417373657420213d2061646472657373283029000000000000000000000000006044820152606401610d8e565b60fd80546001600160a01b03199081166001600160a01b0387161790915560fe805433921682179055604080517f264a6208000000000000000000000000000000000000000000000000000000008152905163264a620891600480820192602092909190829003018186803b158015611e6d57600080fd5b505afa158015611e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea591906146f2565b60fb8190556101048054841515610100810261ff001988151590811661ffff199094169390931717909255604080516001600160a01b038916815260208101929092528101919091527f18ecce5c418b882a3d89e5b6cc8100dc3383309b8e78525266fe1283a7f934d69060600160405180910390a2611f2b6001806001806001610ae2565b8015611f3d576000805461ff00191690555b505050505050565b6000611f526101056126c3565b905090565b61010454600090610100900460ff1615611f7357506001919050565b60ff546001600160a01b031680611f8d5750600092915050565b6040517f84ca9f850000000000000000000000000000000000000000000000000000000081526001600160a01b038216906384ca9f8590611fd2908690600401614a78565b60206040518083038186803b158015611fea57600080fd5b505afa158015611ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120229190614666565b9392505050565b6033546001600160a01b031633146120835760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d8e565b6001600160a01b0381166120ff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610d8e565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60fe5460fb54604051632206137960e01b815260009283926001600160a01b03909116916322061379916121959160040190815260200190565b60a06040518083038186803b1580156121ad57600080fd5b505afa1580156121c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e59190614927565b509195945050505050565b60fe5460fb54604051632206137960e01b815260009283926001600160a01b039091169163220613799161222a9160040190815260200190565b60a06040518083038186803b15801561224257600080fd5b505afa158015612256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227a9190614927565b509095945050505050565b60fc546001600160a01b03166122ef576033546001600160a01b03163314611a295760405162461bcd60e51b815260206004820152600960248201527f4e6f74206f776e657200000000000000000000000000000000000000000000006044820152606401610d8e565b60fc546001600160a01b03163314611a295760405162461bcd60e51b815260206004820152600b60248201527f4e6f74206d616e616765720000000000000000000000000000000000000000006044820152606401610d8e565b6001600160a01b0383166123c45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6001600160a01b0382166124405760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831661251e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6001600160a01b03821661259a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6001600160a01b038316600090815260656020526040902054818110156126295760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610d8e565b6126338282614be4565b6001600160a01b038086166000908152606560205260408082209390935590851681529081208054849290612669908490614bad565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516126b591815260200190565b60405180910390a350505050565b6000610987825490565b6000612022838361343f565b60fe546040517ff6aacfb1000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b039091169063f6aacfb19060240160206040518083038186803b15801561273657600080fd5b505afa15801561274a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276e9190614666565b158061278457506033546001600160a01b031633145b6127d05760405162461bcd60e51b815260206004820152600660248201527f50617573656400000000000000000000000000000000000000000000000000006044820152606401610d8e565b50565b6000806127e08585611c11565b90506127ec86856131b1565b6040517f23e30c8b0000000000000000000000000000000000000000000000000000000081527f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9906001600160a01b038816906323e30c8b9061285b9033908a908a9088908b90600401614a40565b602060405180830381600087803b15801561287557600080fd5b505af1158015612889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ad91906146f2565b1461291f5760405162461bcd60e51b8152602060048201526024808201527f4552433230466c6173684d696e743a20696e76616c69642072657475726e207660448201527f616c7565000000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6001600160a01b038616600090815260666020908152604080832030845290915290205461294d8286614bad565b8110156129c25760405162461bcd60e51b815260206004820152602f60248201527f4552433230466c6173684d696e743a20616c6c6f77616e636520646f6573206e60448201527f6f7420616c6c6f7720726566756e6400000000000000000000000000000000006064820152608401610d8e565b6129dc8730846129d28986614be4565b610da69190614be4565b6129ea876117638488614bad565b5060019695505050505050565b60fe546040517fdbe66ca00000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0390911690819063dbe66ca09060240160206040518083038186803b158015612a5557600080fd5b505afa158015612a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8d9190614666565b15612a9757505050565b8115612b96576000816001600160a01b0316630d43e8ad6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ad857600080fd5b505afa158015612aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1091906141ee565b9050612b1d8482856124a2565b60fb546040517f91c05b0b00000000000000000000000000000000000000000000000000000000815260048101919091526001600160a01b038216906391c05b0b90602401600060405180830381600087803b158015612b7c57600080fd5b505af1158015612b90573d6000803e3d6000fd5b50505050505b505050565b6101045460fd5460609160ff16906001600160a01b031660008667ffffffffffffffff811115612bdb57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612c04578160200160208202803683370190505b50865190915060005b88811015612d94576000828210612c2b57612c26613477565b612c54565b888281518110612c4b57634e487b7160e01b600052603260045260246000fd5b60200260200101515b905080848381518110612c7757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508515612d6b57600081815261010760205260408120805460019290612ca9908490614be4565b909155505060008181526101076020526040902054612cd057612cce61010582613515565b505b6040517ff242432a0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038981166024830152604482018390526001606483015260a06084830152600060a483015286169063f242432a9060c401600060405180830381600087803b158015612d4e57600080fd5b505af1158015612d62573d6000803e3d6000fd5b50505050612d83565b612d7761010582613515565b50612d83858983613521565b50612d8d81614c62565b9050612c0d565b50612d9e82613715565b509695505050505050565b6000612db483611f57565b612e005760405162461bcd60e51b815260206004820152601760248201527f4e4654585661756c743a206e6f7420656c696769626c650000000000000000006044820152606401610d8e565b82516101045460ff1615612fb45760fd546040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632eb2c2d690612e5d9033903090899089906004016149e8565b600060405180830381600087803b158015612e7757600080fd5b505af1158015612e8b573d6000803e3d6000fd5b505050506000805b82811015612faa576000868281518110612ebd57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000868381518110612ee957634e487b7160e01b600052603260045260246000fd5b602002602001015190508060001415612f445760405162461bcd60e51b815260206004820152601b60248201527f4e4654585661756c743a207472616e7366657272696e67203c203100000000006044820152606401610d8e565b60008281526101076020526040902054612f6657612f646101058361379d565b505b6000828152610107602052604081208054839290612f85908490614bad565b90915550612f9590508185614bad565b9350505080612fa390614c62565b9050612e93565b5091506109879050565b60fd546001600160a01b031660005b82811015613020576000868281518110612fed57634e487b7160e01b600052603260045260246000fd5b6020026020010151905061300183826137a9565b61300d6101058261379d565b50508061301990614c62565b9050612fc3565b508192505050610987565b6001600160a01b0382166130a75760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6001600160a01b038216600090815260656020526040902054818110156131365760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6131408282614be4565b6001600160a01b0384166000908152606560205260408120919091556067805484929061316e908490614be4565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612495565b6001600160a01b0382166132075760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610d8e565b80606760008282546132199190614bad565b90915550506001600160a01b03821660009081526065602052604081208054839290613246908490614bad565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b81516132a3906068906020850190613fc1565b508051612b96906069906020840190613fc1565b600054610100900460ff16806132d0575060005460ff16155b6133335760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d8e565b600054610100900460ff16158015613355576000805461ffff19166101011790555b61335d613bd3565b613365613c84565b80156127d0576000805461ff001916905550565b600054610100900460ff1680613392575060005460ff16155b6133f55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d8e565b600054610100900460ff16158015613417576000805461ffff19166101011790555b61341f613bd3565b6134298383613d79565b8015612b96576000805461ff0019169055505050565b600082600001828154811061346457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6000806134856101056126c3565b613490600143614be4565b61010054604080519240602084015282015241606090811b6bffffffffffffffffffffffff19169082015244607482015242609482015260b4016040516020818303038152906040528051906020012060001c6134ed9190614c7d565b9050610100600081546134ff90614c62565b9091555061350f610105826126cd565b91505090565b60006120228383613e55565b7306012c8cf97bead5deae237070f9587f8e7a266d73b47e3cd837ddf8e4c57f05d70ab865de6e193bbb60606001600160a01b0386168314156135c4576040516001600160a01b03861660248201526044810185905260640160408051601f198184030181529190526020810180516001600160e01b03167fa9059cbb000000000000000000000000000000000000000000000000000000001790529050613693565b816001600160a01b0316866001600160a01b03161415613644576040516001600160a01b03861660248201526044810185905260640160408051601f198184030181529190526020810180516001600160e01b03167f8b72a2ec000000000000000000000000000000000000000000000000000000001790529050613693565b6040513060248201526001600160a01b03861660448201526064810185905260840160408051601f198184030181529190526020810180516001600160e01b0316632142170760e11b17905290505b600080876001600160a01b0316836040516136ae91906149cc565b6000604051808303816000865af19150503d80600081146136eb576040519150601f19603f3d011682016040523d82523d6000602084013e6136f0565b606091505b5091509150818190610a2f5760405162461bcd60e51b8152600401610d8e9190614b33565b60ff546001600160a01b03168061372a575050565b6040517f5e2f9b520000000000000000000000000000000000000000000000000000000081526001600160a01b03821690635e2f9b529061376f908590600401614a78565b600060405180830381600087803b15801561378957600080fd5b505af1158015611f3d573d6000803e3d6000fd5b60006120228383613f72565b7306012c8cf97bead5deae237070f9587f8e7a266d73b47e3cd837ddf8e4c57f05d70ab865de6e193bbb60606001600160a01b038516831415613849576040513360248201523060448201526064810185905260840160408051601f198184030181529190526020810180516001600160e01b03167f23b872dd000000000000000000000000000000000000000000000000000000001790529050613b51565b816001600160a01b0316856001600160a01b031614156139f45760008460405160240161387891815260200190565b60408051601f198184030181529181526020820180516001600160e01b03167f58178168000000000000000000000000000000000000000000000000000000001790525190915060009081906001600160a01b038916906138da9085906149cc565b600060405180830381855afa9150503d8060008114613915576040519150601f19603f3d011682016040523d82523d6000602084013e61391a565b606091505b509150915060008180602001905181019061393591906141ee565b905082801561394c57506001600160a01b03811633145b6139985760405162461bcd60e51b815260206004820152601160248201527f4e6f7420746865204e4654206f776e65720000000000000000000000000000006044820152606401610d8e565b6040516024810189905260440160408051601f198184030181529190526020810180516001600160e01b03167f8264fe98000000000000000000000000000000000000000000000000000000001790529450613b519350505050565b60fd546040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810186905230916001600160a01b031690636352211e9060240160206040518083038186803b158015613a5157600080fd5b505afa158015613a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8991906141ee565b6001600160a01b03161415613b0b57613ab76101058560008181526001830160205260408120541515612022565b15613b045760405162461bcd60e51b815260206004820152601a60248201527f547279696e6720746f2075736520616e206f776e6564204e46540000000000006044820152606401610d8e565b5050505050565b6040513360248201523060448201526064810185905260840160408051601f198184030181529190526020810180516001600160e01b0316632142170760e11b17905290505b600080866001600160a01b031683604051613b6c91906149cc565b6000604051808303816000865af19150503d8060008114613ba9576040519150601f19603f3d011682016040523d82523d6000602084013e613bae565b606091505b5091509150818190612b905760405162461bcd60e51b8152600401610d8e9190614b33565b600054610100900460ff1680613bec575060005460ff16155b613c4f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d8e565b600054610100900460ff16158015613365576000805461ffff191661010117905580156127d0576000805461ff001916905550565b600054610100900460ff1680613c9d575060005460ff16155b613d005760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d8e565b600054610100900460ff16158015613d22576000805461ffff19166101011790555b603380546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156127d0576000805461ff001916905550565b600054610100900460ff1680613d92575060005460ff16155b613df55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d8e565b600054610100900460ff16158015613e17576000805461ffff19166101011790555b8251613e2a906068906020860190613fc1565b508151613e3e906069906020850190613fc1565b508015612b96576000805461ff0019169055505050565b60008181526001830160205260408120548015613f68576000613e79600183614be4565b8554909150600090613e8d90600190614be4565b9050818114613f0e576000866000018281548110613ebb57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110613eec57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613f2d57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610987565b6000915050610987565b6000818152600183016020526040812054613fb957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610987565b506000610987565b828054613fcd90614c27565b90600052602060002090601f016020900481019282613fef5760008555614035565b82601f1061400857805160ff1916838001178555614035565b82800160010185558215614035579182015b8281111561403557825182559160200191906001019061401a565b50614041929150614045565b5090565b5b808211156140415760008155600101614046565b60008083601f84011261406b578182fd5b50813567ffffffffffffffff811115614082578182fd5b6020830191508360208260051b850101111561409d57600080fd5b9250929050565b600082601f8301126140b4578081fd5b8135602067ffffffffffffffff8211156140d0576140d0614cb3565b8160051b6140df828201614b7c565b8381528281019086840183880185018910156140f9578687fd5b8693505b8584101561411b5780358352600193909301929184019184016140fd565b50979650505050505050565b60008083601f840112614138578182fd5b50813567ffffffffffffffff81111561414f578182fd5b60208301915083602082850101111561409d57600080fd5b600082601f830112614177578081fd5b813567ffffffffffffffff81111561419157614191614cb3565b6141a4601f8201601f1916602001614b7c565b8181528460208386010111156141b8578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156141e3578081fd5b813561202281614cc9565b6000602082840312156141ff578081fd5b815161202281614cc9565b6000806040838503121561421c578081fd5b823561422781614cc9565b9150602083013561423781614cc9565b809150509250929050565b600080600080600060a08688031215614259578081fd5b853561426481614cc9565b9450602086013561427481614cc9565b9350604086013567ffffffffffffffff80821115614290578283fd5b61429c89838a016140a4565b945060608801359150808211156142b1578283fd5b6142bd89838a016140a4565b935060808801359150808211156142d2578283fd5b506142df88828901614167565b9150509295509295909350565b600080600060608486031215614300578283fd5b833561430b81614cc9565b9250602084013561431b81614cc9565b929592945050506040919091013590565b60008060008060808587031215614341578384fd5b843561434c81614cc9565b9350602085013561435c81614cc9565b925060408501359150606085013567ffffffffffffffff81111561437e578182fd5b61438a87828801614167565b91505092959194509250565b600080600080600060a086880312156143ad578283fd5b85356143b881614cc9565b945060208601356143c881614cc9565b93506040860135925060608601359150608086013567ffffffffffffffff8111156143f1578182fd5b6142df88828901614167565b6000806040838503121561440f578182fd5b823561441a81614cc9565b946020939093013593505050565b6000806000806040858703121561443d578182fd5b843567ffffffffffffffff80821115614454578384fd5b6144608883890161405a565b90965094506020870135915080821115614478578384fd5b506144858782880161405a565b95989497509550505050565b600080600080600080606087890312156144a9578384fd5b863567ffffffffffffffff808211156144c0578586fd5b6144cc8a838b0161405a565b909850965060208901359150808211156144e4578586fd5b6144f08a838b0161405a565b90965094506040890135915080821115614508578283fd5b5061451589828a0161405a565b979a9699509497509295939492505050565b600060208284031215614538578081fd5b813567ffffffffffffffff81111561454e578182fd5b611a6c848285016140a4565b60008060006060848603121561456e578081fd5b833567ffffffffffffffff80821115614585578283fd5b614591878388016140a4565b945060208601359150808211156145a6578283fd5b506145b3868287016140a4565b92505060408401356145c481614cc9565b809150509250925092565b600080600080608085870312156145e4578182fd5b843567ffffffffffffffff808211156145fb578384fd5b614607888389016140a4565b9550602087013591508082111561461c578384fd5b614628888389016140a4565b9450604087013591508082111561463d578384fd5b5061464a878288016140a4565b925050606085013561465b81614cc9565b939692955090935050565b600060208284031215614677578081fd5b815161202281614cde565b600080600080600060a08688031215614699578283fd5b85356146a481614cde565b945060208601356146b481614cde565b935060408601356146c481614cde565b925060608601356146d481614cde565b915060808601356146e481614cde565b809150509295509295909350565b600060208284031215614703578081fd5b5051919050565b60006020828403121561471b578081fd5b81356001600160e01b031981168114612022578182fd5b60008060008060808587031215614341578182fd5b6000806000806040858703121561475c578182fd5b843567ffffffffffffffff80821115614773578384fd5b61477f88838901614127565b90965094506020870135915080821115614797578384fd5b5061448587828801614127565b600080600080600060a086880312156147bb578283fd5b853567ffffffffffffffff808211156147d2578485fd5b6147de89838a01614167565b965060208801359150808211156147f3578485fd5b5061480088828901614167565b94505060408601356146c481614cc9565b600060208284031215614822578081fd5b5035919050565b60008060006040848603121561483d578081fd5b83359250602084013567ffffffffffffffff81111561485a578182fd5b6148668682870161405a565b9497909650939450505050565b600080600060608486031215614887578081fd5b83359250602084013567ffffffffffffffff8111156148a4578182fd5b6145b3868287016140a4565b6000806000604084860312156148c4578081fd5b83359250602084013567ffffffffffffffff8111156148e1578182fd5b61486686828701614127565b600080600080600060a08688031215614904578283fd5b505083359560208501359550604085013594606081013594506080013592509050565b600080600080600060a0868803121561493e578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6000815180845260208085019450808401835b8381101561499557815187529582019590820190600101614979565b509495945050505050565b600081518084526149b8816020860160208601614bfb565b601f01601f19169290920160200192915050565b600082516149de818460208701614bfb565b9190910192915050565b60006001600160a01b03808716835280861660208401525060a06040830152614a1460a0830185614966565b8281036060840152614a268185614966565b838103608090940193909352508152602001949350505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152611c0660a08301846149a0565b6020815260006120226020830184614966565b606081526000614a9e6060830186614966565b8281036020840152614ab08186614966565b9150506001600160a01b0383166040830152949350505050565b60a081526000614add60a0830188614966565b8281036020840152614aef8188614966565b90508281036040840152614b038187614966565b90508281036060840152614b178186614966565b9150506001600160a01b03831660808301529695505050505050565b60208152600061202260208301846149a0565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715614ba557614ba5614cb3565b604052919050565b60008219821115614bc057614bc0614c9d565b500190565b6000816000190483118215151615614bdf57614bdf614c9d565b500290565b600082821015614bf657614bf6614c9d565b500390565b60005b83811015614c16578181015183820152602001614bfe565b8381111561091e5750506000910152565b600181811c90821680614c3b57607f821691505b60208210811415614c5c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614c7657614c76614c9d565b5060010190565b600082614c9857634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146127d057600080fd5b80151581146127d057600080fdfea264697066735822122098dab4d3fe0ce61204fc02ce7ba743d00e781ed7c8ab13cdbbc109cf172d73d364736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061038d5760003560e01c806372188e3f116101de578063d0ebdbe71161010f578063e78458c4116100ad578063f2fde38b1161007c578063f2fde38b14610862578063f7fce33414610875578063fcc0e3811461087d578063feb8eba51461089257600080fd5b8063e78458c4146107fc578063e9ec2e991461080f578063f1d20dd414610817578063f23a6e611461082a57600080fd5b8063d8a06f73116100e9578063d8a06f731461078a578063d9d98ce41461079d578063dd62ed3e146107b0578063e0a8b97a146107e957600080fd5b8063d0ebdbe71461075c578063d53f62171461076f578063d6ee4a931461077757600080fd5b8063a457c2d71161017c578063bc197c8111610156578063bc197c81146106f6578063c3cb8c141461072e578063c4a0db9614610736578063c4ff52471461074957600080fd5b8063a457c2d7146106bd578063a9059cbb146106d0578063b10402ea146106e357600080fd5b80638da5cb5b116101b85780638da5cb5b1461067e5780638f878a431461068f57806395d89b41146106a25780639d54def6146106aa57600080fd5b806372188e3f1461062557806379309658146106555780638c8508141461066b57600080fd5b806333194c0a116102c35780635035434a11610261578063613255ab11610230578063613255ab146105ce5780636b948a35146105e157806370a08231146105f4578063715018a61461061d57600080fd5b80635035434a1461056157806354fd4d501461056f5780635877aee6146105a85780635cffe9de146105bb57600080fd5b80633d5d190c1161029d5780633d5d190c1461051457806344b28d591461052757806345a0b6521461053b578063481c6a751461054e57600080fd5b806333194c0a146104f057806335dca76c146104f9578063395093511461050157600080fd5b806313966db5116103305780631ba46cfd1161030a5780631ba46cfd1461048e57806323b872dd146104b957806325705d8d146104cc578063313ce567146104e157600080fd5b806313966db514610420578063150b7a021461043657806318160ddd1461048657600080fd5b806306f26dc21161036c57806306f26dc2146103d757806306fdde03146103e5578063095ea7b3146103fa5780630d636a091461040d57600080fd5b80625181611461039257806301ffc9a71461039c57806304a66b48146103c4575b600080fd5b61039a61089a565b005b6103af6103aa36600461470a565b610924565b60405190151581526020015b60405180910390f35b61039a6103d23660046148ed565b61098d565b610104546103af9060ff1681565b6103ed610a3a565b6040516103bb9190614b33565b6103af6104083660046143fd565b610acc565b61039a61041b366004614682565b610ae2565b610428610c56565b6040519081526020016103bb565b61046d61044436600461432c565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516001600160e01b031990911681526020016103bb565b606754610428565b60fd546104a1906001600160a01b031681565b6040516001600160a01b0390911681526020016103bb565b6103af6104c73660046142ec565b610ceb565b6104d4610db6565b6040516103bb9190614a78565b604051601281526020016103bb565b61042860fb5481565b610428610e75565b6103af61050f3660046143fd565b610f09565b610428610522366004614428565b610f40565b610104546103af9062010000900460ff1681565b610428610549366004614811565b610fba565b60fc546104a1906001600160a01b031681565b610108546103af9060ff1681565b60408051808201909152600681527f76312e302e35000000000000000000000000000000000000000000000000000060208201526103ed565b6104a16105b63660046148b0565b610fc8565b6103af6105c9366004614732565b6111dd565b6104286105dc3660046141d2565b6111f5565b610104546103af90610100900460ff1681565b6104286106023660046141d2565b6001600160a01b031660009081526065602052604090205490565b61039a61121d565b61062d6112c1565b604080519586526020860194909452928401919091526060830152608082015260a0016103bb565b610104546103af90640100000000900460ff1681565b6104d46106793660046145cf565b61135b565b6033546001600160a01b03166104a1565b60ff546104a1906001600160a01b031681565b6103ed6115f7565b6104d46106b8366004614873565b611606565b6103af6106cb3660046143fd565b61180f565b6103af6106de3660046143fd565b6118c2565b6104286106f136600461455a565b6118cf565b61046d610704366004614242565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b61039a611a1f565b6104d4610744366004614829565b611a2b565b610108546103af90610100900460ff1681565b61039a61076a3660046141d2565b611a74565b610428611ad0565b6104d4610785366004614491565b611b64565b60fe546104a1906001600160a01b031681565b6104286107ab3660046143fd565b611c11565b6104286107be36600461420a565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b61039a6107f7366004614747565b611c74565b61039a61080a3660046147a4565b611cef565b610428611f45565b6103af610825366004614527565b611f57565b61046d610838366004614396565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b61039a6108703660046141d2565b612029565b61042861215b565b610104546103af906301000000900460ff1681565b6104286121f0565b6108a2612285565b60fe5460fb546040517fc182f2b20000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163c182f2b2916108f09160040190815260200190565b600060405180830381600087803b15801561090a57600080fd5b505af115801561091e573d6000803e3d6000fd5b50505050565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061098757507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b610995612285565b60fe5460fb546040517f219962d200000000000000000000000000000000000000000000000000000000815260048101919091526024810187905260448101869052606481018590526084810184905260a481018390526001600160a01b039091169063219962d29060c401600060405180830381600087803b158015610a1b57600080fd5b505af1158015610a2f573d6000803e3d6000fd5b505050505050505050565b606060688054610a4990614c27565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7590614c27565b8015610ac25780601f10610a9757610100808354040283529160200191610ac2565b820191906000526020600020905b815481529060010190602001808311610aa557829003601f168201915b5050505050905090565b6000610ad9338484612349565b50600192915050565b610aea612285565b610104805463ffff000019166201000087151590810263ff0000001916919091176301000000871515021764ff0000000019166401000000008615150217909155610108805461ffff191684151561ff00191617610100841515021790556040519081527fc604be2f834727754dc1ec1225c14d1ecde48e7d12fa7b745dfb137a3db998bd9060200160405180910390a160405184151581527f835d9397f97f5df575f718046bb3e918f911d39d7edfa79aa8d40ddc7d5ce2a59060200160405180910390a160405183151581527f64b60f32742df47d4ccb5b31ca12fee1bc20695467bfe8fa058b00ec446c15639060200160405180910390a160405182151581527f7e8b58aeb3d1d3a1777185c996f374a5d3c46ef3cd25a07ec6eb2569488d50589060200160405180910390a160405181151581527fbfb092a6cb2d49526b6982acab35d64782cf1c05f8c8f0dd88008b288bfa5af59060200160405180910390a15050505050565b60fe5460fb54604051632206137960e01b815260009283926001600160a01b0390911691632206137991610c909160040190815260200190565b60a06040518083038186803b158015610ca857600080fd5b505afa158015610cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce09190614927565b509295945050505050565b6000610cf88484846124a2565b6001600160a01b038416600090815260666020908152604080832033845290915290205482811015610d975760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610dab8533610da68685614be4565b612349565b506001949350505050565b60606000610dc56101056126c3565b905060008167ffffffffffffffff811115610df057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e19578160200160208202803683370190505b50905060005b82811015610e6e57610e33610105826126cd565b828281518110610e5357634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610e6781614c62565b9050610e1f565b5092915050565b60fe5460fb54604051632206137960e01b815260009283926001600160a01b0390911691632206137991610eaf9160040190815260200190565b60a06040518083038186803b158015610ec757600080fd5b505afa158015610edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eff9190614927565b9695505050505050565b3360008181526066602090815260408083206001600160a01b03871684529091528120549091610ad9918590610da6908690614bad565b6000610fb1858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920191909152503392506118cf915050565b95945050505050565b6000610987610105836126cd565b6000610fd2612285565b60ff546001600160a01b0316156110515760405162461bcd60e51b815260206004820152602260248201527f4e4654585661756c743a20656c69676962696c69747920616c7265616479207360448201527f65740000000000000000000000000000000000000000000000000000000000006064820152608401610d8e565b60fe54604080517f14c77faa00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916314c77faa916004808301926020929190829003018186803b1580156110af57600080fd5b505afa1580156110c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e791906141ee565b90506000816001600160a01b031663576ff9088787876040518463ffffffff1660e01b815260040161111b93929190614b46565b602060405180830381600087803b15801561113557600080fd5b505af1158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d91906141ee565b60ff80546001600160a01b0319166001600160a01b038316908117909155610104805461ff00191690556040805189815260208101929092529192507fe14c63b3d4272158635bee1d1b95b51bb8de042ee95a15cbfaf2865b4d0af811910160405180910390a195945050505050565b60006111e960046126d9565b610fb1858585856127d3565b60006001600160a01b038216301461120e576000610987565b60675461098790600019614be4565b6033546001600160a01b031633146112775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d8e565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b60fe5460fb54604051632206137960e01b8152600481019190915260009182918291829182916001600160a01b03169063220613799060240160a06040518083038186803b15801561131257600080fd5b505afa158015611326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134a9190614927565b945094509450945094509091929394565b6060600260c95414156113b05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d8e565b600260c9556113bf60036126d9565b6101045460009060ff161561147b5760005b86518110156114755760008682815181106113fc57634e487b7160e01b600052603260045260246000fd5b6020026020010151905080600014156114575760405162461bcd60e51b815260206004820152601b60248201527f4e4654585661756c743a207472616e7366657272696e67203c203100000000006044820152606401610d8e565b6114618184614bad565b9250508061146e90614c62565b90506113d1565b5061147f565b5084515b835181148061149157506101085460ff165b6114dd5760405162461bcd60e51b815260206004820152601f60248201527f4e4654585661756c743a2052616e646f6d20737761702064697361626c6564006044820152606401610d8e565b835115806114f3575061010854610100900460ff165b61153f5760405162461bcd60e51b815260206004820152601f60248201527f4e4654585661756c743a2054617267657420737761702064697361626c6564006044820152606401610d8e565b60008061154a6112c1565b9450945050505060008651846115609190614be4565b61156a9084614bc5565b87516115769084614bc5565b6115809190614bad565b905061158c33826129f7565b6000611599858989612b9b565b90506115a58a8a612da9565b507f66982ed4a058811a8004bdcec9adcb3671f2b4f1a788667a3a74959d7c09af3c8a8a8a848b6040516115dd959493929190614aca565b60405180910390a1600160c9559998505050505050505050565b606060698054610a4990614c27565b6060600260c954141561165b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d8e565b600260c981905561166b906126d9565b82518414806116845750610104546301000000900460ff165b6116dc5760405162461bcd60e51b8152602060048201526024808201527f4e4654585661756c743a2052616e646f6d2072656465656d206e6f7420656e61604482015263189b195960e21b6064820152608401610d8e565b825115806116f5575061010454640100000000900460ff165b61174d5760405162461bcd60e51b8152602060048201526024808201527f4e4654585661756c743a205461726765742072656465656d206e6f7420656e61604482015263189b195960e21b6064820152608401610d8e565b6117683361176386670de0b6b3a7640000614bc5565b61302b565b6000806117736112c1565b5050925092505060008551876117899190614be4565b6117939084614bc5565b865161179f9084614bc5565b6117a99190614bad565b90506117b533826129f7565b60006117c2888888612b9b565b90507f63b13f6307f284441e029836b0c22eb91eb62a7ad555670061157930ce884f4e8188886040516117f793929190614a8b565b60405180910390a1600160c955979650505050505050565b3360009081526066602090815260408083206001600160a01b0386168452909152812054828110156118a95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6118b83385610da68685614be4565b5060019392505050565b6000610ad93384846124a2565b6000600260c95414156119245760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d8e565b600260c95561193360016126d9565b6101045462010000900460ff1661198c5760405162461bcd60e51b815260206004820152601360248201527f4d696e74696e67206e6f7420656e61626c6564000000000000000000000000006044820152606401610d8e565b60006119988585612da9565b90506119b5836119b083670de0b6b3a7640000614bc5565b6131b1565b6000816119c0610c56565b6119ca9190614bc5565b90506119d684826129f7565b7f1f72ad2a14447fa756b6f5aca53504645af79813493aca2d906b69e4aaeb9492868686604051611a0993929190614a8b565b60405180910390a150600160c955949350505050565b611a296000611a74565b565b6060611a6c84848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250611606915050565b949350505050565b611a7c612285565b60fc80546001600160a01b0319166001600160a01b0383169081179091556040519081527f60a0f5b9f9e81e98216071b85826681c796256fe3d1354ecb675580fba64fa699060200160405180910390a150565b60fe5460fb54604051632206137960e01b815260009283926001600160a01b0390911691632206137991611b0a9160040190815260200190565b60a06040518083038186803b158015611b2257600080fd5b505afa158015611b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5a9190614927565b5095945050505050565b6060611c0687878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a92508991829185019084908082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525033925061135b915050565b979650505050505050565b60006001600160a01b0383163014611c6b5760405162461bcd60e51b815260206004820152601b60248201527f4552433230466c6173684d696e743a2077726f6e6720746f6b656e00000000006044820152606401610d8e565b50600092915050565b611c7c612285565b61091e84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8801819004810282018101909252868152925086915085908190840183828082843760009201919091525061329092505050565b600054610100900460ff1680611d08575060005460ff16155b611d6b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d8e565b600054610100900460ff16158015611d8d576000805461ffff19166101011790555b611d956132b7565b611d9f8686613379565b6001600160a01b038416611df55760405162461bcd60e51b815260206004820152601360248201527f417373657420213d2061646472657373283029000000000000000000000000006044820152606401610d8e565b60fd80546001600160a01b03199081166001600160a01b0387161790915560fe805433921682179055604080517f264a6208000000000000000000000000000000000000000000000000000000008152905163264a620891600480820192602092909190829003018186803b158015611e6d57600080fd5b505afa158015611e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea591906146f2565b60fb8190556101048054841515610100810261ff001988151590811661ffff199094169390931717909255604080516001600160a01b038916815260208101929092528101919091527f18ecce5c418b882a3d89e5b6cc8100dc3383309b8e78525266fe1283a7f934d69060600160405180910390a2611f2b6001806001806001610ae2565b8015611f3d576000805461ff00191690555b505050505050565b6000611f526101056126c3565b905090565b61010454600090610100900460ff1615611f7357506001919050565b60ff546001600160a01b031680611f8d5750600092915050565b6040517f84ca9f850000000000000000000000000000000000000000000000000000000081526001600160a01b038216906384ca9f8590611fd2908690600401614a78565b60206040518083038186803b158015611fea57600080fd5b505afa158015611ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120229190614666565b9392505050565b6033546001600160a01b031633146120835760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d8e565b6001600160a01b0381166120ff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610d8e565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60fe5460fb54604051632206137960e01b815260009283926001600160a01b03909116916322061379916121959160040190815260200190565b60a06040518083038186803b1580156121ad57600080fd5b505afa1580156121c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e59190614927565b509195945050505050565b60fe5460fb54604051632206137960e01b815260009283926001600160a01b039091169163220613799161222a9160040190815260200190565b60a06040518083038186803b15801561224257600080fd5b505afa158015612256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227a9190614927565b509095945050505050565b60fc546001600160a01b03166122ef576033546001600160a01b03163314611a295760405162461bcd60e51b815260206004820152600960248201527f4e6f74206f776e657200000000000000000000000000000000000000000000006044820152606401610d8e565b60fc546001600160a01b03163314611a295760405162461bcd60e51b815260206004820152600b60248201527f4e6f74206d616e616765720000000000000000000000000000000000000000006044820152606401610d8e565b6001600160a01b0383166123c45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6001600160a01b0382166124405760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831661251e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6001600160a01b03821661259a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6001600160a01b038316600090815260656020526040902054818110156126295760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610d8e565b6126338282614be4565b6001600160a01b038086166000908152606560205260408082209390935590851681529081208054849290612669908490614bad565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516126b591815260200190565b60405180910390a350505050565b6000610987825490565b6000612022838361343f565b60fe546040517ff6aacfb1000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b039091169063f6aacfb19060240160206040518083038186803b15801561273657600080fd5b505afa15801561274a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276e9190614666565b158061278457506033546001600160a01b031633145b6127d05760405162461bcd60e51b815260206004820152600660248201527f50617573656400000000000000000000000000000000000000000000000000006044820152606401610d8e565b50565b6000806127e08585611c11565b90506127ec86856131b1565b6040517f23e30c8b0000000000000000000000000000000000000000000000000000000081527f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9906001600160a01b038816906323e30c8b9061285b9033908a908a9088908b90600401614a40565b602060405180830381600087803b15801561287557600080fd5b505af1158015612889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ad91906146f2565b1461291f5760405162461bcd60e51b8152602060048201526024808201527f4552433230466c6173684d696e743a20696e76616c69642072657475726e207660448201527f616c7565000000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6001600160a01b038616600090815260666020908152604080832030845290915290205461294d8286614bad565b8110156129c25760405162461bcd60e51b815260206004820152602f60248201527f4552433230466c6173684d696e743a20616c6c6f77616e636520646f6573206e60448201527f6f7420616c6c6f7720726566756e6400000000000000000000000000000000006064820152608401610d8e565b6129dc8730846129d28986614be4565b610da69190614be4565b6129ea876117638488614bad565b5060019695505050505050565b60fe546040517fdbe66ca00000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0390911690819063dbe66ca09060240160206040518083038186803b158015612a5557600080fd5b505afa158015612a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8d9190614666565b15612a9757505050565b8115612b96576000816001600160a01b0316630d43e8ad6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ad857600080fd5b505afa158015612aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1091906141ee565b9050612b1d8482856124a2565b60fb546040517f91c05b0b00000000000000000000000000000000000000000000000000000000815260048101919091526001600160a01b038216906391c05b0b90602401600060405180830381600087803b158015612b7c57600080fd5b505af1158015612b90573d6000803e3d6000fd5b50505050505b505050565b6101045460fd5460609160ff16906001600160a01b031660008667ffffffffffffffff811115612bdb57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612c04578160200160208202803683370190505b50865190915060005b88811015612d94576000828210612c2b57612c26613477565b612c54565b888281518110612c4b57634e487b7160e01b600052603260045260246000fd5b60200260200101515b905080848381518110612c7757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508515612d6b57600081815261010760205260408120805460019290612ca9908490614be4565b909155505060008181526101076020526040902054612cd057612cce61010582613515565b505b6040517ff242432a0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038981166024830152604482018390526001606483015260a06084830152600060a483015286169063f242432a9060c401600060405180830381600087803b158015612d4e57600080fd5b505af1158015612d62573d6000803e3d6000fd5b50505050612d83565b612d7761010582613515565b50612d83858983613521565b50612d8d81614c62565b9050612c0d565b50612d9e82613715565b509695505050505050565b6000612db483611f57565b612e005760405162461bcd60e51b815260206004820152601760248201527f4e4654585661756c743a206e6f7420656c696769626c650000000000000000006044820152606401610d8e565b82516101045460ff1615612fb45760fd546040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632eb2c2d690612e5d9033903090899089906004016149e8565b600060405180830381600087803b158015612e7757600080fd5b505af1158015612e8b573d6000803e3d6000fd5b505050506000805b82811015612faa576000868281518110612ebd57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000868381518110612ee957634e487b7160e01b600052603260045260246000fd5b602002602001015190508060001415612f445760405162461bcd60e51b815260206004820152601b60248201527f4e4654585661756c743a207472616e7366657272696e67203c203100000000006044820152606401610d8e565b60008281526101076020526040902054612f6657612f646101058361379d565b505b6000828152610107602052604081208054839290612f85908490614bad565b90915550612f9590508185614bad565b9350505080612fa390614c62565b9050612e93565b5091506109879050565b60fd546001600160a01b031660005b82811015613020576000868281518110612fed57634e487b7160e01b600052603260045260246000fd5b6020026020010151905061300183826137a9565b61300d6101058261379d565b50508061301990614c62565b9050612fc3565b508192505050610987565b6001600160a01b0382166130a75760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6001600160a01b038216600090815260656020526040902054818110156131365760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610d8e565b6131408282614be4565b6001600160a01b0384166000908152606560205260408120919091556067805484929061316e908490614be4565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612495565b6001600160a01b0382166132075760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610d8e565b80606760008282546132199190614bad565b90915550506001600160a01b03821660009081526065602052604081208054839290613246908490614bad565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b81516132a3906068906020850190613fc1565b508051612b96906069906020840190613fc1565b600054610100900460ff16806132d0575060005460ff16155b6133335760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d8e565b600054610100900460ff16158015613355576000805461ffff19166101011790555b61335d613bd3565b613365613c84565b80156127d0576000805461ff001916905550565b600054610100900460ff1680613392575060005460ff16155b6133f55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d8e565b600054610100900460ff16158015613417576000805461ffff19166101011790555b61341f613bd3565b6134298383613d79565b8015612b96576000805461ff0019169055505050565b600082600001828154811061346457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6000806134856101056126c3565b613490600143614be4565b61010054604080519240602084015282015241606090811b6bffffffffffffffffffffffff19169082015244607482015242609482015260b4016040516020818303038152906040528051906020012060001c6134ed9190614c7d565b9050610100600081546134ff90614c62565b9091555061350f610105826126cd565b91505090565b60006120228383613e55565b7306012c8cf97bead5deae237070f9587f8e7a266d73b47e3cd837ddf8e4c57f05d70ab865de6e193bbb60606001600160a01b0386168314156135c4576040516001600160a01b03861660248201526044810185905260640160408051601f198184030181529190526020810180516001600160e01b03167fa9059cbb000000000000000000000000000000000000000000000000000000001790529050613693565b816001600160a01b0316866001600160a01b03161415613644576040516001600160a01b03861660248201526044810185905260640160408051601f198184030181529190526020810180516001600160e01b03167f8b72a2ec000000000000000000000000000000000000000000000000000000001790529050613693565b6040513060248201526001600160a01b03861660448201526064810185905260840160408051601f198184030181529190526020810180516001600160e01b0316632142170760e11b17905290505b600080876001600160a01b0316836040516136ae91906149cc565b6000604051808303816000865af19150503d80600081146136eb576040519150601f19603f3d011682016040523d82523d6000602084013e6136f0565b606091505b5091509150818190610a2f5760405162461bcd60e51b8152600401610d8e9190614b33565b60ff546001600160a01b03168061372a575050565b6040517f5e2f9b520000000000000000000000000000000000000000000000000000000081526001600160a01b03821690635e2f9b529061376f908590600401614a78565b600060405180830381600087803b15801561378957600080fd5b505af1158015611f3d573d6000803e3d6000fd5b60006120228383613f72565b7306012c8cf97bead5deae237070f9587f8e7a266d73b47e3cd837ddf8e4c57f05d70ab865de6e193bbb60606001600160a01b038516831415613849576040513360248201523060448201526064810185905260840160408051601f198184030181529190526020810180516001600160e01b03167f23b872dd000000000000000000000000000000000000000000000000000000001790529050613b51565b816001600160a01b0316856001600160a01b031614156139f45760008460405160240161387891815260200190565b60408051601f198184030181529181526020820180516001600160e01b03167f58178168000000000000000000000000000000000000000000000000000000001790525190915060009081906001600160a01b038916906138da9085906149cc565b600060405180830381855afa9150503d8060008114613915576040519150601f19603f3d011682016040523d82523d6000602084013e61391a565b606091505b509150915060008180602001905181019061393591906141ee565b905082801561394c57506001600160a01b03811633145b6139985760405162461bcd60e51b815260206004820152601160248201527f4e6f7420746865204e4654206f776e65720000000000000000000000000000006044820152606401610d8e565b6040516024810189905260440160408051601f198184030181529190526020810180516001600160e01b03167f8264fe98000000000000000000000000000000000000000000000000000000001790529450613b519350505050565b60fd546040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810186905230916001600160a01b031690636352211e9060240160206040518083038186803b158015613a5157600080fd5b505afa158015613a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8991906141ee565b6001600160a01b03161415613b0b57613ab76101058560008181526001830160205260408120541515612022565b15613b045760405162461bcd60e51b815260206004820152601a60248201527f547279696e6720746f2075736520616e206f776e6564204e46540000000000006044820152606401610d8e565b5050505050565b6040513360248201523060448201526064810185905260840160408051601f198184030181529190526020810180516001600160e01b0316632142170760e11b17905290505b600080866001600160a01b031683604051613b6c91906149cc565b6000604051808303816000865af19150503d8060008114613ba9576040519150601f19603f3d011682016040523d82523d6000602084013e613bae565b606091505b5091509150818190612b905760405162461bcd60e51b8152600401610d8e9190614b33565b600054610100900460ff1680613bec575060005460ff16155b613c4f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d8e565b600054610100900460ff16158015613365576000805461ffff191661010117905580156127d0576000805461ff001916905550565b600054610100900460ff1680613c9d575060005460ff16155b613d005760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d8e565b600054610100900460ff16158015613d22576000805461ffff19166101011790555b603380546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156127d0576000805461ff001916905550565b600054610100900460ff1680613d92575060005460ff16155b613df55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d8e565b600054610100900460ff16158015613e17576000805461ffff19166101011790555b8251613e2a906068906020860190613fc1565b508151613e3e906069906020850190613fc1565b508015612b96576000805461ff0019169055505050565b60008181526001830160205260408120548015613f68576000613e79600183614be4565b8554909150600090613e8d90600190614be4565b9050818114613f0e576000866000018281548110613ebb57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110613eec57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613f2d57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610987565b6000915050610987565b6000818152600183016020526040812054613fb957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610987565b506000610987565b828054613fcd90614c27565b90600052602060002090601f016020900481019282613fef5760008555614035565b82601f1061400857805160ff1916838001178555614035565b82800160010185558215614035579182015b8281111561403557825182559160200191906001019061401a565b50614041929150614045565b5090565b5b808211156140415760008155600101614046565b60008083601f84011261406b578182fd5b50813567ffffffffffffffff811115614082578182fd5b6020830191508360208260051b850101111561409d57600080fd5b9250929050565b600082601f8301126140b4578081fd5b8135602067ffffffffffffffff8211156140d0576140d0614cb3565b8160051b6140df828201614b7c565b8381528281019086840183880185018910156140f9578687fd5b8693505b8584101561411b5780358352600193909301929184019184016140fd565b50979650505050505050565b60008083601f840112614138578182fd5b50813567ffffffffffffffff81111561414f578182fd5b60208301915083602082850101111561409d57600080fd5b600082601f830112614177578081fd5b813567ffffffffffffffff81111561419157614191614cb3565b6141a4601f8201601f1916602001614b7c565b8181528460208386010111156141b8578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156141e3578081fd5b813561202281614cc9565b6000602082840312156141ff578081fd5b815161202281614cc9565b6000806040838503121561421c578081fd5b823561422781614cc9565b9150602083013561423781614cc9565b809150509250929050565b600080600080600060a08688031215614259578081fd5b853561426481614cc9565b9450602086013561427481614cc9565b9350604086013567ffffffffffffffff80821115614290578283fd5b61429c89838a016140a4565b945060608801359150808211156142b1578283fd5b6142bd89838a016140a4565b935060808801359150808211156142d2578283fd5b506142df88828901614167565b9150509295509295909350565b600080600060608486031215614300578283fd5b833561430b81614cc9565b9250602084013561431b81614cc9565b929592945050506040919091013590565b60008060008060808587031215614341578384fd5b843561434c81614cc9565b9350602085013561435c81614cc9565b925060408501359150606085013567ffffffffffffffff81111561437e578182fd5b61438a87828801614167565b91505092959194509250565b600080600080600060a086880312156143ad578283fd5b85356143b881614cc9565b945060208601356143c881614cc9565b93506040860135925060608601359150608086013567ffffffffffffffff8111156143f1578182fd5b6142df88828901614167565b6000806040838503121561440f578182fd5b823561441a81614cc9565b946020939093013593505050565b6000806000806040858703121561443d578182fd5b843567ffffffffffffffff80821115614454578384fd5b6144608883890161405a565b90965094506020870135915080821115614478578384fd5b506144858782880161405a565b95989497509550505050565b600080600080600080606087890312156144a9578384fd5b863567ffffffffffffffff808211156144c0578586fd5b6144cc8a838b0161405a565b909850965060208901359150808211156144e4578586fd5b6144f08a838b0161405a565b90965094506040890135915080821115614508578283fd5b5061451589828a0161405a565b979a9699509497509295939492505050565b600060208284031215614538578081fd5b813567ffffffffffffffff81111561454e578182fd5b611a6c848285016140a4565b60008060006060848603121561456e578081fd5b833567ffffffffffffffff80821115614585578283fd5b614591878388016140a4565b945060208601359150808211156145a6578283fd5b506145b3868287016140a4565b92505060408401356145c481614cc9565b809150509250925092565b600080600080608085870312156145e4578182fd5b843567ffffffffffffffff808211156145fb578384fd5b614607888389016140a4565b9550602087013591508082111561461c578384fd5b614628888389016140a4565b9450604087013591508082111561463d578384fd5b5061464a878288016140a4565b925050606085013561465b81614cc9565b939692955090935050565b600060208284031215614677578081fd5b815161202281614cde565b600080600080600060a08688031215614699578283fd5b85356146a481614cde565b945060208601356146b481614cde565b935060408601356146c481614cde565b925060608601356146d481614cde565b915060808601356146e481614cde565b809150509295509295909350565b600060208284031215614703578081fd5b5051919050565b60006020828403121561471b578081fd5b81356001600160e01b031981168114612022578182fd5b60008060008060808587031215614341578182fd5b6000806000806040858703121561475c578182fd5b843567ffffffffffffffff80821115614773578384fd5b61477f88838901614127565b90965094506020870135915080821115614797578384fd5b5061448587828801614127565b600080600080600060a086880312156147bb578283fd5b853567ffffffffffffffff808211156147d2578485fd5b6147de89838a01614167565b965060208801359150808211156147f3578485fd5b5061480088828901614167565b94505060408601356146c481614cc9565b600060208284031215614822578081fd5b5035919050565b60008060006040848603121561483d578081fd5b83359250602084013567ffffffffffffffff81111561485a578182fd5b6148668682870161405a565b9497909650939450505050565b600080600060608486031215614887578081fd5b83359250602084013567ffffffffffffffff8111156148a4578182fd5b6145b3868287016140a4565b6000806000604084860312156148c4578081fd5b83359250602084013567ffffffffffffffff8111156148e1578182fd5b61486686828701614127565b600080600080600060a08688031215614904578283fd5b505083359560208501359550604085013594606081013594506080013592509050565b600080600080600060a0868803121561493e578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6000815180845260208085019450808401835b8381101561499557815187529582019590820190600101614979565b509495945050505050565b600081518084526149b8816020860160208601614bfb565b601f01601f19169290920160200192915050565b600082516149de818460208701614bfb565b9190910192915050565b60006001600160a01b03808716835280861660208401525060a06040830152614a1460a0830185614966565b8281036060840152614a268185614966565b838103608090940193909352508152602001949350505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152611c0660a08301846149a0565b6020815260006120226020830184614966565b606081526000614a9e6060830186614966565b8281036020840152614ab08186614966565b9150506001600160a01b0383166040830152949350505050565b60a081526000614add60a0830188614966565b8281036020840152614aef8188614966565b90508281036040840152614b038187614966565b90508281036060840152614b178186614966565b9150506001600160a01b03831660808301529695505050505050565b60208152600061202260208301846149a0565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715614ba557614ba5614cb3565b604052919050565b60008219821115614bc057614bc0614c9d565b500190565b6000816000190483118215151615614bdf57614bdf614c9d565b500290565b600082821015614bf657614bf6614c9d565b500390565b60005b83811015614c16578181015183820152602001614bfe565b8381111561091e5750506000910152565b600181811c90821680614c3b57607f821691505b60208210811415614c5c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614c7657614c76614c9d565b5060010190565b600082614c9857634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146127d057600080fd5b80151581146127d057600080fdfea264697066735822122098dab4d3fe0ce61204fc02ce7ba743d00e781ed7c8ab13cdbbc109cf172d73d364736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "flashFee(address,uint256)": {
        "details": "Returns the fee applied when doing flash loans. By default this implementation has 0 fees. This function can be overloaded to make the flash loan mechanism deflationary.",
        "params": {
          "amount": "The amount of tokens to be loaned.",
          "token": "The token to be flash loaned."
        },
        "returns": {
          "_0": "The fees applied to the corresponding flash loan."
        }
      },
      "flashLoan(address,address,uint256,bytes)": {
        "details": "Performs a flash loan. New tokens are minted and sent to the `receiver`, who is required to implement the {IERC3156FlashBorrower} interface. By the end of the flash loan, the receiver is expected to own amount + fee tokens and have them approved back to the token contract itself so they can be burned.",
        "params": {
          "amount": "The amount of tokens to be loaned.",
          "data": "An arbitrary datafield that is passed to the receiver.",
          "receiver": "The receiver of the flash loan. Should implement the {IERC3156FlashBorrower.onFlashLoan} interface.",
          "token": "The token to be flash loaned. Only `address(this)` is supported."
        },
        "returns": {
          "_0": "`true` is the flash loan was successfull."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "maxFlashLoan(address)": {
        "details": "Returns the maximum amount of tokens available for loan.",
        "params": {
          "token": "The address of the token that is requested."
        },
        "returns": {
          "_0": "The amont of token that can be loaned."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15315,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15318,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18468,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 19234,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 19353,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16296,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16302,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "_allowances",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 16304,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 16306,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "_name",
        "offset": 0,
        "slot": "104",
        "type": "t_string_storage"
      },
      {
        "astId": 16308,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "_symbol",
        "offset": 0,
        "slot": "105",
        "type": "t_string_storage"
      },
      {
        "astId": 16826,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 16276,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 19527,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 19570,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10536,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "vaultId",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 10539,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "manager",
        "offset": 0,
        "slot": "252",
        "type": "t_address"
      },
      {
        "astId": 10542,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "assetAddress",
        "offset": 0,
        "slot": "253",
        "type": "t_address"
      },
      {
        "astId": 10546,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "vaultFactory",
        "offset": 0,
        "slot": "254",
        "type": "t_contract(INFTXVaultFactory)14596"
      },
      {
        "astId": 10550,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "eligibilityStorage",
        "offset": 0,
        "slot": "255",
        "type": "t_contract(INFTXEligibility)13460"
      },
      {
        "astId": 10552,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "randNonce",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 10554,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "UNUSED_FEE1",
        "offset": 0,
        "slot": "257",
        "type": "t_uint256"
      },
      {
        "astId": 10556,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "UNUSED_FEE2",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 10558,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "UNUSED_FEE3",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 10561,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "is1155",
        "offset": 0,
        "slot": "260",
        "type": "t_bool"
      },
      {
        "astId": 10564,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "allowAllItems",
        "offset": 1,
        "slot": "260",
        "type": "t_bool"
      },
      {
        "astId": 10567,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "enableMint",
        "offset": 2,
        "slot": "260",
        "type": "t_bool"
      },
      {
        "astId": 10570,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "enableRandomRedeem",
        "offset": 3,
        "slot": "260",
        "type": "t_bool"
      },
      {
        "astId": 10573,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "enableTargetRedeem",
        "offset": 4,
        "slot": "260",
        "type": "t_bool"
      },
      {
        "astId": 10576,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "holdings",
        "offset": 0,
        "slot": "261",
        "type": "t_struct(UintSet)19013_storage"
      },
      {
        "astId": 10580,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "quantity1155",
        "offset": 0,
        "slot": "263",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10583,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "enableRandomSwap",
        "offset": 0,
        "slot": "264",
        "type": "t_bool"
      },
      {
        "astId": 10586,
        "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
        "label": "enableTargetSwap",
        "offset": 1,
        "slot": "264",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(INFTXEligibility)13460": {
        "encoding": "inplace",
        "label": "contract INFTXEligibility",
        "numberOfBytes": "20"
      },
      "t_contract(INFTXVaultFactory)14596": {
        "encoding": "inplace",
        "label": "contract INFTXVaultFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Set)18615_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 18610,
            "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 18614,
            "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)19013_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.UintSet",
        "members": [
          {
            "astId": 19012,
            "contract": "contracts/solidity/NFTXVaultUpgradeable.sol:NFTXVaultUpgradeable",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)18615_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}